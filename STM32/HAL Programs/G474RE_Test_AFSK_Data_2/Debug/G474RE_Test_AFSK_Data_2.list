
G474RE_Test_AFSK_Data_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c04  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a4  08009de8  08009de8  0000ade8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a58c  0800a58c  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a58c  0800a58c  0000b58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a594  0800a594  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a594  0800a594  0000b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a598  0800a598  0000b598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a59c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000698  200001d4  0800a770  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000086c  0800a770  0000c86c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178a2  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd1  00000000  00000000  00023aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  00026778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001090  00000000  00000000  00027cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296e6  00000000  00000000  00028d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cb1  00000000  00000000  00052436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114da2  00000000  00000000  0006a0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017ee89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d84  00000000  00000000  0017eecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00185c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009dcc 	.word	0x08009dcc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08009dcc 	.word	0x08009dcc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b988 	b.w	8000fc0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	468e      	mov	lr, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d962      	bls.n	8000da4 <__udivmoddi4+0xdc>
 8000cde:	fab2 f682 	clz	r6, r2
 8000ce2:	b14e      	cbz	r6, 8000cf8 <__udivmoddi4+0x30>
 8000ce4:	f1c6 0320 	rsb	r3, r6, #32
 8000ce8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cec:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf0:	40b7      	lsls	r7, r6
 8000cf2:	ea43 0808 	orr.w	r8, r3, r8
 8000cf6:	40b4      	lsls	r4, r6
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d04:	0c23      	lsrs	r3, r4, #16
 8000d06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d1c:	f080 80ea 	bcs.w	8000ef4 <__udivmoddi4+0x22c>
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f240 80e7 	bls.w	8000ef4 <__udivmoddi4+0x22c>
 8000d26:	3902      	subs	r1, #2
 8000d28:	443b      	add	r3, r7
 8000d2a:	1a9a      	subs	r2, r3, r2
 8000d2c:	b2a3      	uxth	r3, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3e:	459c      	cmp	ip, r3
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x8e>
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d48:	f080 80d6 	bcs.w	8000ef8 <__udivmoddi4+0x230>
 8000d4c:	459c      	cmp	ip, r3
 8000d4e:	f240 80d3 	bls.w	8000ef8 <__udivmoddi4+0x230>
 8000d52:	443b      	add	r3, r7
 8000d54:	3802      	subs	r0, #2
 8000d56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5a:	eba3 030c 	sub.w	r3, r3, ip
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40f3      	lsrs	r3, r6
 8000d64:	2200      	movs	r2, #0
 8000d66:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d905      	bls.n	8000d7e <__udivmoddi4+0xb6>
 8000d72:	b10d      	cbz	r5, 8000d78 <__udivmoddi4+0xb0>
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e7f5      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000d7e:	fab3 f183 	clz	r1, r3
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d146      	bne.n	8000e14 <__udivmoddi4+0x14c>
 8000d86:	4573      	cmp	r3, lr
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xc8>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 8105 	bhi.w	8000f9a <__udivmoddi4+0x2d2>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	4690      	mov	r8, r2
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0e5      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000d9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000da2:	e7e2      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f000 8090 	beq.w	8000eca <__udivmoddi4+0x202>
 8000daa:	fab2 f682 	clz	r6, r2
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	f040 80a4 	bne.w	8000efc <__udivmoddi4+0x234>
 8000db4:	1a8a      	subs	r2, r1, r2
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	b280      	uxth	r0, r0
 8000dbe:	b2bc      	uxth	r4, r7
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dce:	fb04 f20c 	mul.w	r2, r4, ip
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x11e>
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x11c>
 8000dde:	429a      	cmp	r2, r3
 8000de0:	f200 80e0 	bhi.w	8000fa4 <__udivmoddi4+0x2dc>
 8000de4:	46c4      	mov	ip, r8
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000df0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000df4:	fb02 f404 	mul.w	r4, r2, r4
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x144>
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x142>
 8000e04:	429c      	cmp	r4, r3
 8000e06:	f200 80ca 	bhi.w	8000f9e <__udivmoddi4+0x2d6>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e12:	e7a5      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e14:	f1c1 0620 	rsb	r6, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	fa0e f401 	lsl.w	r4, lr, r1
 8000e24:	fa20 f306 	lsr.w	r3, r0, r6
 8000e28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	fa1f fc87 	uxth.w	ip, r7
 8000e3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x1a0>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e5a:	f080 809c 	bcs.w	8000f96 <__udivmoddi4+0x2ce>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8099 	bls.w	8000f96 <__udivmoddi4+0x2ce>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	eba4 040e 	sub.w	r4, r4, lr
 8000e6c:	fa1f fe83 	uxth.w	lr, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e80:	45a4      	cmp	ip, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1ce>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e8a:	f080 8082 	bcs.w	8000f92 <__udivmoddi4+0x2ca>
 8000e8e:	45a4      	cmp	ip, r4
 8000e90:	d97f      	bls.n	8000f92 <__udivmoddi4+0x2ca>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e9a:	eba4 040c 	sub.w	r4, r4, ip
 8000e9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ea2:	4564      	cmp	r4, ip
 8000ea4:	4673      	mov	r3, lr
 8000ea6:	46e1      	mov	r9, ip
 8000ea8:	d362      	bcc.n	8000f70 <__udivmoddi4+0x2a8>
 8000eaa:	d05f      	beq.n	8000f6c <__udivmoddi4+0x2a4>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x1fe>
 8000eae:	ebb8 0203 	subs.w	r2, r8, r3
 8000eb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000eb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eba:	fa22 f301 	lsr.w	r3, r2, r1
 8000ebe:	431e      	orrs	r6, r3
 8000ec0:	40cc      	lsrs	r4, r1
 8000ec2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e74f      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000eca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ece:	0c01      	lsrs	r1, r0, #16
 8000ed0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ed4:	b280      	uxth	r0, r0
 8000ed6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eda:	463b      	mov	r3, r7
 8000edc:	4638      	mov	r0, r7
 8000ede:	463c      	mov	r4, r7
 8000ee0:	46b8      	mov	r8, r7
 8000ee2:	46be      	mov	lr, r7
 8000ee4:	2620      	movs	r6, #32
 8000ee6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eea:	eba2 0208 	sub.w	r2, r2, r8
 8000eee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ef2:	e766      	b.n	8000dc2 <__udivmoddi4+0xfa>
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	e718      	b.n	8000d2a <__udivmoddi4+0x62>
 8000ef8:	4610      	mov	r0, r2
 8000efa:	e72c      	b.n	8000d56 <__udivmoddi4+0x8e>
 8000efc:	f1c6 0220 	rsb	r2, r6, #32
 8000f00:	fa2e f302 	lsr.w	r3, lr, r2
 8000f04:	40b7      	lsls	r7, r6
 8000f06:	40b1      	lsls	r1, r6
 8000f08:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	430a      	orrs	r2, r1
 8000f12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f16:	b2bc      	uxth	r4, r7
 8000f18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb08 f904 	mul.w	r9, r8, r4
 8000f26:	40b0      	lsls	r0, r6
 8000f28:	4589      	cmp	r9, r1
 8000f2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f2e:	b280      	uxth	r0, r0
 8000f30:	d93e      	bls.n	8000fb0 <__udivmoddi4+0x2e8>
 8000f32:	1879      	adds	r1, r7, r1
 8000f34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f38:	d201      	bcs.n	8000f3e <__udivmoddi4+0x276>
 8000f3a:	4589      	cmp	r9, r1
 8000f3c:	d81f      	bhi.n	8000f7e <__udivmoddi4+0x2b6>
 8000f3e:	eba1 0109 	sub.w	r1, r1, r9
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fb09 f804 	mul.w	r8, r9, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f54:	4542      	cmp	r2, r8
 8000f56:	d229      	bcs.n	8000fac <__udivmoddi4+0x2e4>
 8000f58:	18ba      	adds	r2, r7, r2
 8000f5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f5e:	d2c4      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f60:	4542      	cmp	r2, r8
 8000f62:	d2c2      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f64:	f1a9 0102 	sub.w	r1, r9, #2
 8000f68:	443a      	add	r2, r7
 8000f6a:	e7be      	b.n	8000eea <__udivmoddi4+0x222>
 8000f6c:	45f0      	cmp	r8, lr
 8000f6e:	d29d      	bcs.n	8000eac <__udivmoddi4+0x1e4>
 8000f70:	ebbe 0302 	subs.w	r3, lr, r2
 8000f74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f78:	3801      	subs	r0, #1
 8000f7a:	46e1      	mov	r9, ip
 8000f7c:	e796      	b.n	8000eac <__udivmoddi4+0x1e4>
 8000f7e:	eba7 0909 	sub.w	r9, r7, r9
 8000f82:	4449      	add	r1, r9
 8000f84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8c:	fb09 f804 	mul.w	r8, r9, r4
 8000f90:	e7db      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f92:	4673      	mov	r3, lr
 8000f94:	e77f      	b.n	8000e96 <__udivmoddi4+0x1ce>
 8000f96:	4650      	mov	r0, sl
 8000f98:	e766      	b.n	8000e68 <__udivmoddi4+0x1a0>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e6fd      	b.n	8000d9a <__udivmoddi4+0xd2>
 8000f9e:	443b      	add	r3, r7
 8000fa0:	3a02      	subs	r2, #2
 8000fa2:	e733      	b.n	8000e0c <__udivmoddi4+0x144>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	443b      	add	r3, r7
 8000faa:	e71c      	b.n	8000de6 <__udivmoddi4+0x11e>
 8000fac:	4649      	mov	r1, r9
 8000fae:	e79c      	b.n	8000eea <__udivmoddi4+0x222>
 8000fb0:	eba1 0109 	sub.w	r1, r1, r9
 8000fb4:	46c4      	mov	ip, r8
 8000fb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fba:	fb09 f804 	mul.w	r8, r9, r4
 8000fbe:	e7c4      	b.n	8000f4a <__udivmoddi4+0x282>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <crc8>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint8_t crc8(uint8_t crc, uint8_t data) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
	crc ^= data;
 8000fd4:	79fa      	ldrb	r2, [r7, #7]
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	4053      	eors	r3, r2
 8000fda:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; i++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	e013      	b.n	800100a <crc8+0x46>
		crc = (crc & 0x80) ? ((crc << 1) ^ 0x07) : (crc << 1);
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	da08      	bge.n	8000ffc <crc8+0x38>
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	f083 0307 	eor.w	r3, r3, #7
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	e002      	b.n	8001002 <crc8+0x3e>
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; i++)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b07      	cmp	r3, #7
 800100e:	dde8      	ble.n	8000fe2 <crc8+0x1e>
	return crc;
 8001010:	79fb      	ldrb	r3, [r7, #7]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <goertzel>:

float goertzel(float freq, uint16_t *samples) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	ed87 0a01 	vstr	s0, [r7, #4]
 800102a:	6038      	str	r0, [r7, #0]
	float omega = 2 * M_PI * freq / SAMPLE_RATE;
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff fab3 	bl	8000598 <__aeabi_f2d>
 8001032:	a33a      	add	r3, pc, #232	@ (adr r3, 800111c <goertzel+0xfc>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f7ff fb06 	bl	8000648 <__aeabi_dmul>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	a337      	add	r3, pc, #220	@ (adr r3, 8001124 <goertzel+0x104>)
 8001046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104a:	f7ff fc27 	bl	800089c <__aeabi_ddiv>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fdcf 	bl	8000bf8 <__aeabi_d2f>
 800105a:	4603      	mov	r3, r0
 800105c:	61bb      	str	r3, [r7, #24]
	float coeff = 2 * cosf(omega), s0 = 0, s1 = 0, s2 = 0;
 800105e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001062:	f008 f985 	bl	8009370 <cosf>
 8001066:	eef0 7a40 	vmov.f32	s15, s0
 800106a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800106e:	edc7 7a05 	vstr	s15, [r7, #20]
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < SAMPLES_PER_BIT; i++) {
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	e025      	b.n	80010d6 <goertzel+0xb6>
		float x = (float) samples[i] - 2048;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	4413      	add	r3, r2
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800109c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001118 <goertzel+0xf8>
 80010a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010a4:	edc7 7a03 	vstr	s15, [r7, #12]
		s0 = x + coeff * s1 - s2;
 80010a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80010ac:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80010b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80010c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c4:	edc7 7a04 	vstr	s15, [r7, #16]
		s2 = s1;
 80010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ca:	623b      	str	r3, [r7, #32]
		s1 = s0;
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < SAMPLES_PER_BIT; i++) {
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	3301      	adds	r3, #1
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80010dc:	dbd5      	blt.n	800108a <goertzel+0x6a>
	}
	return s1 * s1 + s2 * s2 - coeff * s1 * s2;
 80010de:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80010e2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80010ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010f2:	edd7 6a05 	vldr	s13, [r7, #20]
 80010f6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80010fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001106:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800110a:	eeb0 0a67 	vmov.f32	s0, s15
 800110e:	3728      	adds	r7, #40	@ 0x28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	f3af 8000 	nop.w
 8001118:	45000000 	.word	0x45000000
 800111c:	54442d18 	.word	0x54442d18
 8001120:	401921fb 	.word	0x401921fb
 8001124:	00000000 	.word	0x00000000
 8001128:	40e38800 	.word	0x40e38800

0800112c <push_bit>:

void push_bit(uint8_t bit) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	bit_queue[q_idx++] = bit;
 8001136:	4b62      	ldr	r3, [pc, #392]	@ (80012c0 <push_bit+0x194>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	4960      	ldr	r1, [pc, #384]	@ (80012c0 <push_bit+0x194>)
 800113e:	600a      	str	r2, [r1, #0]
 8001140:	4960      	ldr	r1, [pc, #384]	@ (80012c4 <push_bit+0x198>)
 8001142:	79fa      	ldrb	r2, [r7, #7]
 8001144:	54ca      	strb	r2, [r1, r3]
	if (q_idx >= 10) {
 8001146:	4b5e      	ldr	r3, [pc, #376]	@ (80012c0 <push_bit+0x194>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b09      	cmp	r3, #9
 800114c:	f340 80b4 	ble.w	80012b8 <push_bit+0x18c>
		if (bit_queue[0] == 0 && bit_queue[9] == 1) {
 8001150:	4b5c      	ldr	r3, [pc, #368]	@ (80012c4 <push_bit+0x198>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	f040 80ac 	bne.w	80012b2 <push_bit+0x186>
 800115a:	4b5a      	ldr	r3, [pc, #360]	@ (80012c4 <push_bit+0x198>)
 800115c:	7a5b      	ldrb	r3, [r3, #9]
 800115e:	2b01      	cmp	r3, #1
 8001160:	f040 80a7 	bne.w	80012b2 <push_bit+0x186>
			uint8_t val = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]
			for (int i = 0; i < 8; i++)
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	e012      	b.n	8001194 <push_bit+0x68>
				if (bit_queue[1 + i])
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	3301      	adds	r3, #1
 8001172:	4a54      	ldr	r2, [pc, #336]	@ (80012c4 <push_bit+0x198>)
 8001174:	5cd3      	ldrb	r3, [r2, r3]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d009      	beq.n	800118e <push_bit+0x62>
					val |= 1 << i;
 800117a:	2201      	movs	r2, #1
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	b25a      	sxtb	r2, r3
 8001184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001188:	4313      	orrs	r3, r2
 800118a:	b25b      	sxtb	r3, r3
 800118c:	73fb      	strb	r3, [r7, #15]
			for (int i = 0; i < 8; i++)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	3301      	adds	r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	2b07      	cmp	r3, #7
 8001198:	dde9      	ble.n	800116e <push_bit+0x42>

			if (state == 0) {
 800119a:	4b4b      	ldr	r3, [pc, #300]	@ (80012c8 <push_bit+0x19c>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d114      	bne.n	80011cc <push_bit+0xa0>
				if (val == PREAMBLE_BYTE) {
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	2b55      	cmp	r3, #85	@ 0x55
 80011a6:	d10d      	bne.n	80011c4 <push_bit+0x98>
					if (++preamble_seen >= PREAMBLE_COUNT)
 80011a8:	4b48      	ldr	r3, [pc, #288]	@ (80012cc <push_bit+0x1a0>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b46      	ldr	r3, [pc, #280]	@ (80012cc <push_bit+0x1a0>)
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	4b45      	ldr	r3, [pc, #276]	@ (80012cc <push_bit+0x1a0>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b07      	cmp	r3, #7
 80011ba:	d97a      	bls.n	80012b2 <push_bit+0x186>
						state = 1;
 80011bc:	4b42      	ldr	r3, [pc, #264]	@ (80012c8 <push_bit+0x19c>)
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e076      	b.n	80012b2 <push_bit+0x186>
				} else
					preamble_seen = 0;
 80011c4:	4b41      	ldr	r3, [pc, #260]	@ (80012cc <push_bit+0x1a0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	e072      	b.n	80012b2 <push_bit+0x186>
			} else if (state == 1) {
 80011cc:	4b3e      	ldr	r3, [pc, #248]	@ (80012c8 <push_bit+0x19c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d117      	bne.n	8001204 <push_bit+0xd8>
				if (val == SYNC_BYTE)
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	2bd5      	cmp	r3, #213	@ 0xd5
 80011d8:	d103      	bne.n	80011e2 <push_bit+0xb6>
					state = 2;
 80011da:	4b3b      	ldr	r3, [pc, #236]	@ (80012c8 <push_bit+0x19c>)
 80011dc:	2202      	movs	r2, #2
 80011de:	701a      	strb	r2, [r3, #0]
 80011e0:	e067      	b.n	80012b2 <push_bit+0x186>
				else if (val == PREAMBLE_BYTE) {
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b55      	cmp	r3, #85	@ 0x55
 80011e6:	d106      	bne.n	80011f6 <push_bit+0xca>
					state = 0;
 80011e8:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <push_bit+0x19c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
					preamble_seen = 1;
 80011ee:	4b37      	ldr	r3, [pc, #220]	@ (80012cc <push_bit+0x1a0>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	e05d      	b.n	80012b2 <push_bit+0x186>
				} else {
					state = 0;
 80011f6:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <push_bit+0x19c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
					preamble_seen = 0;
 80011fc:	4b33      	ldr	r3, [pc, #204]	@ (80012cc <push_bit+0x1a0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	e056      	b.n	80012b2 <push_bit+0x186>
				}
			} else if (state == 2) {
 8001204:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <push_bit+0x19c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d112      	bne.n	8001232 <push_bit+0x106>
				len_expected = val;
 800120c:	4a30      	ldr	r2, [pc, #192]	@ (80012d0 <push_bit+0x1a4>)
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	7013      	strb	r3, [r2, #0]
				frame_len = 0;
 8001212:	4b30      	ldr	r3, [pc, #192]	@ (80012d4 <push_bit+0x1a8>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
				crc_calc = crc8(0, val);
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	4619      	mov	r1, r3
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff fed1 	bl	8000fc4 <crc8>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	4b2c      	ldr	r3, [pc, #176]	@ (80012d8 <push_bit+0x1ac>)
 8001228:	701a      	strb	r2, [r3, #0]
				state = 3;
 800122a:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <push_bit+0x19c>)
 800122c:	2203      	movs	r2, #3
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	e03f      	b.n	80012b2 <push_bit+0x186>
			} else if (state == 3) {
 8001232:	4b25      	ldr	r3, [pc, #148]	@ (80012c8 <push_bit+0x19c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d11e      	bne.n	8001278 <push_bit+0x14c>
				frame[frame_len++] = val;
 800123a:	4b26      	ldr	r3, [pc, #152]	@ (80012d4 <push_bit+0x1a8>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	b2d1      	uxtb	r1, r2
 8001242:	4a24      	ldr	r2, [pc, #144]	@ (80012d4 <push_bit+0x1a8>)
 8001244:	7011      	strb	r1, [r2, #0]
 8001246:	4619      	mov	r1, r3
 8001248:	4a24      	ldr	r2, [pc, #144]	@ (80012dc <push_bit+0x1b0>)
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	5453      	strb	r3, [r2, r1]
				crc_calc = crc8(crc_calc, val);
 800124e:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <push_bit+0x1ac>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff feb4 	bl	8000fc4 <crc8>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <push_bit+0x1ac>)
 8001262:	701a      	strb	r2, [r3, #0]
				if (frame_len >= len_expected)
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <push_bit+0x1a8>)
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <push_bit+0x1a4>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d320      	bcc.n	80012b2 <push_bit+0x186>
					state = 4;
 8001270:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <push_bit+0x19c>)
 8001272:	2204      	movs	r2, #4
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	e01c      	b.n	80012b2 <push_bit+0x186>
			} else if (state == 4) {
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <push_bit+0x19c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b04      	cmp	r3, #4
 800127e:	d118      	bne.n	80012b2 <push_bit+0x186>
				if (val == crc_calc) {
 8001280:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <push_bit+0x1ac>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	429a      	cmp	r2, r3
 8001288:	d10d      	bne.n	80012a6 <push_bit+0x17a>
					HAL_UART_Transmit(&huart1, (uint8_t*) "\r\n[RX] ", 7, 50);
 800128a:	2332      	movs	r3, #50	@ 0x32
 800128c:	2207      	movs	r2, #7
 800128e:	4914      	ldr	r1, [pc, #80]	@ (80012e0 <push_bit+0x1b4>)
 8001290:	4814      	ldr	r0, [pc, #80]	@ (80012e4 <push_bit+0x1b8>)
 8001292:	f004 fd3f 	bl	8005d14 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, frame, frame_len, 50);
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <push_bit+0x1a8>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	2332      	movs	r3, #50	@ 0x32
 800129e:	490f      	ldr	r1, [pc, #60]	@ (80012dc <push_bit+0x1b0>)
 80012a0:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <push_bit+0x1b8>)
 80012a2:	f004 fd37 	bl	8005d14 <HAL_UART_Transmit>
				}
				state = 0;
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <push_bit+0x19c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
				preamble_seen = 0;
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <push_bit+0x1a0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
			}
		}
		q_idx = 0;
 80012b2:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <push_bit+0x194>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
	}
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000520 	.word	0x20000520
 80012c4:	20000510 	.word	0x20000510
 80012c8:	20000565 	.word	0x20000565
 80012cc:	20000566 	.word	0x20000566
 80012d0:	20000567 	.word	0x20000567
 80012d4:	20000564 	.word	0x20000564
 80012d8:	20000568 	.word	0x20000568
 80012dc:	20000524 	.word	0x20000524
 80012e0:	08009de8 	.word	0x08009de8
 80012e4:	20000684 	.word	0x20000684

080012e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	float e_mark = goertzel(FREQ_MARK, adc_buf);
 80012f0:	4814      	ldr	r0, [pc, #80]	@ (8001344 <HAL_ADC_ConvCpltCallback+0x5c>)
 80012f2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001348 <HAL_ADC_ConvCpltCallback+0x60>
 80012f6:	f7ff fe93 	bl	8001020 <goertzel>
 80012fa:	ed87 0a03 	vstr	s0, [r7, #12]
	float e_space = goertzel(FREQ_SPACE, adc_buf);
 80012fe:	4811      	ldr	r0, [pc, #68]	@ (8001344 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001300:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 800134c <HAL_ADC_ConvCpltCallback+0x64>
 8001304:	f7ff fe8c 	bl	8001020 <goertzel>
 8001308:	ed87 0a02 	vstr	s0, [r7, #8]
	push_bit(e_mark > e_space ? 1 : 0);
 800130c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001310:	edd7 7a02 	vldr	s15, [r7, #8]
 8001314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131c:	bfcc      	ite	gt
 800131e:	2301      	movgt	r3, #1
 8001320:	2300      	movle	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff01 	bl	800112c <push_bit>
	HAL_ADC_Stop_DMA(&hadc1);
 800132a:	4809      	ldr	r0, [pc, #36]	@ (8001350 <HAL_ADC_ConvCpltCallback+0x68>)
 800132c:	f001 f9d0 	bl	80026d0 <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, SAMPLES_PER_BIT);
 8001330:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001334:	4903      	ldr	r1, [pc, #12]	@ (8001344 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001336:	4806      	ldr	r0, [pc, #24]	@ (8001350 <HAL_ADC_ConvCpltCallback+0x68>)
 8001338:	f001 f8f6 	bl	8002528 <HAL_ADC_Start_DMA>
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200001f0 	.word	0x200001f0
 8001348:	451c4000 	.word	0x451c4000
 800134c:	44bb8000 	.word	0x44bb8000
 8001350:	2000056c 	.word	0x2000056c

08001354 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001358:	f000 fc4d 	bl	8001bf6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800135c:	f000 f820 	bl	80013a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001360:	f000 f9a8 	bl	80016b4 <MX_GPIO_Init>
	MX_DMA_Init();
 8001364:	f000 f97c 	bl	8001660 <MX_DMA_Init>
	MX_ADC1_Init();
 8001368:	f000 f866 	bl	8001438 <MX_ADC1_Init>
	MX_TIM3_Init();
 800136c:	f000 f8de 	bl	800152c <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001370:	f000 f92a 	bl	80015c8 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart1, (uint8_t*) "\r\nAFSK RX Ready\r\n", 16, 200);
 8001374:	23c8      	movs	r3, #200	@ 0xc8
 8001376:	2210      	movs	r2, #16
 8001378:	4905      	ldr	r1, [pc, #20]	@ (8001390 <main+0x3c>)
 800137a:	4806      	ldr	r0, [pc, #24]	@ (8001394 <main+0x40>)
 800137c:	f004 fcca 	bl	8005d14 <HAL_UART_Transmit>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, SAMPLES_PER_BIT);
 8001380:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001384:	4904      	ldr	r1, [pc, #16]	@ (8001398 <main+0x44>)
 8001386:	4805      	ldr	r0, [pc, #20]	@ (800139c <main+0x48>)
 8001388:	f001 f8ce 	bl	8002528 <HAL_ADC_Start_DMA>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <main+0x38>
 8001390:	08009df0 	.word	0x08009df0
 8001394:	20000684 	.word	0x20000684
 8001398:	200001f0 	.word	0x200001f0
 800139c:	2000056c 	.word	0x2000056c

080013a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b094      	sub	sp, #80	@ 0x50
 80013a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013a6:	f107 0318 	add.w	r3, r7, #24
 80013aa:	2238      	movs	r2, #56	@ 0x38
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f006 f8b7 	bl	8007522 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f002 ff0c 	bl	80041e0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d2:	2340      	movs	r3, #64	@ 0x40
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d6:	2302      	movs	r3, #2
 80013d8:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013da:	2302      	movs	r3, #2
 80013dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80013de:	2304      	movs	r3, #4
 80013e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80013e2:	2355      	movs	r3, #85	@ 0x55
 80013e4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013ee:	2302      	movs	r3, #2
 80013f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 ffa6 	bl	8004348 <HAL_RCC_OscConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0x66>
		Error_Handler();
 8001402:	f000 f987 	bl	8001714 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001406:	230f      	movs	r3, #15
 8001408:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140a:	2303      	movs	r3, #3
 800140c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2104      	movs	r1, #4
 800141e:	4618      	mov	r0, r3
 8001420:	f003 faa4 	bl	800496c <HAL_RCC_ClockConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0x8e>
		Error_Handler();
 800142a:	f000 f973 	bl	8001714 <Error_Handler>
	}
}
 800142e:	bf00      	nop
 8001430:	3750      	adds	r7, #80	@ 0x50
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b08c      	sub	sp, #48	@ 0x30
 800143c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 800143e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2220      	movs	r2, #32
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f006 f866 	bl	8007522 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001456:	4b33      	ldr	r3, [pc, #204]	@ (8001524 <MX_ADC1_Init+0xec>)
 8001458:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800145c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800145e:	4b31      	ldr	r3, [pc, #196]	@ (8001524 <MX_ADC1_Init+0xec>)
 8001460:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001464:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001466:	4b2f      	ldr	r3, [pc, #188]	@ (8001524 <MX_ADC1_Init+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800146c:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <MX_ADC1_Init+0xec>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8001472:	4b2c      	ldr	r3, [pc, #176]	@ (8001524 <MX_ADC1_Init+0xec>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001478:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <MX_ADC1_Init+0xec>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800147e:	4b29      	ldr	r3, [pc, #164]	@ (8001524 <MX_ADC1_Init+0xec>)
 8001480:	2204      	movs	r2, #4
 8001482:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001484:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <MX_ADC1_Init+0xec>)
 8001486:	2200      	movs	r2, #0
 8001488:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800148a:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <MX_ADC1_Init+0xec>)
 800148c:	2201      	movs	r2, #1
 800148e:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 8001490:	4b24      	ldr	r3, [pc, #144]	@ (8001524 <MX_ADC1_Init+0xec>)
 8001492:	2201      	movs	r2, #1
 8001494:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001496:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <MX_ADC1_Init+0xec>)
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <MX_ADC1_Init+0xec>)
 80014a0:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80014a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <MX_ADC1_Init+0xec>)
 80014a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ac:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80014ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001524 <MX_ADC1_Init+0xec>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <MX_ADC1_Init+0xec>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 80014bc:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <MX_ADC1_Init+0xec>)
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80014c4:	4817      	ldr	r0, [pc, #92]	@ (8001524 <MX_ADC1_Init+0xec>)
 80014c6:	f000 fe73 	bl	80021b0 <HAL_ADC_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC1_Init+0x9c>
		Error_Handler();
 80014d0:	f000 f920 	bl	8001714 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80014d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014dc:	4619      	mov	r1, r3
 80014de:	4811      	ldr	r0, [pc, #68]	@ (8001524 <MX_ADC1_Init+0xec>)
 80014e0:	f002 f818 	bl	8003514 <HAL_ADCEx_MultiModeConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_ADC1_Init+0xb6>
		Error_Handler();
 80014ea:	f000 f913 	bl	8001714 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <MX_ADC1_Init+0xf0>)
 80014f0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80014f2:	2306      	movs	r3, #6
 80014f4:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80014f6:	2307      	movs	r3, #7
 80014f8:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014fa:	237f      	movs	r3, #127	@ 0x7f
 80014fc:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014fe:	2304      	movs	r3, #4
 8001500:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	@ (8001524 <MX_ADC1_Init+0xec>)
 800150c:	f001 f956 	bl	80027bc <HAL_ADC_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_ADC1_Init+0xe2>
		Error_Handler();
 8001516:	f000 f8fd 	bl	8001714 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	3730      	adds	r7, #48	@ 0x30
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000056c 	.word	0x2000056c
 8001528:	04300002 	.word	0x04300002

0800152c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800154a:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <MX_TIM3_Init+0x94>)
 800154c:	4a1d      	ldr	r2, [pc, #116]	@ (80015c4 <MX_TIM3_Init+0x98>)
 800154e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001550:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <MX_TIM3_Init+0x94>)
 8001552:	2200      	movs	r2, #0
 8001554:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001556:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <MX_TIM3_Init+0x94>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 4249;
 800155c:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <MX_TIM3_Init+0x94>)
 800155e:	f241 0299 	movw	r2, #4249	@ 0x1099
 8001562:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <MX_TIM3_Init+0x94>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156a:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <MX_TIM3_Init+0x94>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001570:	4813      	ldr	r0, [pc, #76]	@ (80015c0 <MX_TIM3_Init+0x94>)
 8001572:	f003 fe65 	bl	8005240 <HAL_TIM_Base_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM3_Init+0x54>
		Error_Handler();
 800157c:	f000 f8ca 	bl	8001714 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001584:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	4619      	mov	r1, r3
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <MX_TIM3_Init+0x94>)
 800158e:	f003 fffd 	bl	800558c <HAL_TIM_ConfigClockSource>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0x70>
		Error_Handler();
 8001598:	f000 f8bc 	bl	8001714 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800159c:	2320      	movs	r3, #32
 800159e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <MX_TIM3_Init+0x94>)
 80015aa:	f004 fa87 	bl	8005abc <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80015b4:	f000 f8ae 	bl	8001714 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000638 	.word	0x20000638
 80015c4:	40000400 	.word	0x40000400

080015c8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80015cc:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <MX_USART1_UART_Init+0x90>)
 80015ce:	4a23      	ldr	r2, [pc, #140]	@ (800165c <MX_USART1_UART_Init+0x94>)
 80015d0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80015d2:	4b21      	ldr	r3, [pc, #132]	@ (8001658 <MX_USART1_UART_Init+0x90>)
 80015d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015da:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <MX_USART1_UART_Init+0x90>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <MX_USART1_UART_Init+0x90>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <MX_USART1_UART_Init+0x90>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <MX_USART1_UART_Init+0x90>)
 80015ee:	220c      	movs	r2, #12
 80015f0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f2:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <MX_USART1_UART_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f8:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <MX_USART1_UART_Init+0x90>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fe:	4b16      	ldr	r3, [pc, #88]	@ (8001658 <MX_USART1_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <MX_USART1_UART_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800160a:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <MX_USART1_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001610:	4811      	ldr	r0, [pc, #68]	@ (8001658 <MX_USART1_UART_Init+0x90>)
 8001612:	f004 fb2f 	bl	8005c74 <HAL_UART_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 800161c:	f000 f87a 	bl	8001714 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001620:	2100      	movs	r1, #0
 8001622:	480d      	ldr	r0, [pc, #52]	@ (8001658 <MX_USART1_UART_Init+0x90>)
 8001624:	f005 f958 	bl	80068d8 <HAL_UARTEx_SetTxFifoThreshold>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800162e:	f000 f871 	bl	8001714 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001632:	2100      	movs	r1, #0
 8001634:	4808      	ldr	r0, [pc, #32]	@ (8001658 <MX_USART1_UART_Init+0x90>)
 8001636:	f005 f98d 	bl	8006954 <HAL_UARTEx_SetRxFifoThreshold>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001640:	f000 f868 	bl	8001714 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001644:	4804      	ldr	r0, [pc, #16]	@ (8001658 <MX_USART1_UART_Init+0x90>)
 8001646:	f005 f90e 	bl	8006866 <HAL_UARTEx_DisableFifoMode>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8001650:	f000 f860 	bl	8001714 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000684 	.word	0x20000684
 800165c:	40013800 	.word	0x40013800

08001660 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001666:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <MX_DMA_Init+0x50>)
 8001668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800166a:	4a11      	ldr	r2, [pc, #68]	@ (80016b0 <MX_DMA_Init+0x50>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	6493      	str	r3, [r2, #72]	@ 0x48
 8001672:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <MX_DMA_Init+0x50>)
 8001674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800167e:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <MX_DMA_Init+0x50>)
 8001680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001682:	4a0b      	ldr	r2, [pc, #44]	@ (80016b0 <MX_DMA_Init+0x50>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6493      	str	r3, [r2, #72]	@ 0x48
 800168a:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <MX_DMA_Init+0x50>)
 800168c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	200b      	movs	r0, #11
 800169c:	f002 f91d 	bl	80038da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016a0:	200b      	movs	r0, #11
 80016a2:	f002 f934 	bl	800390e <HAL_NVIC_EnableIRQ>

}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000

080016b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <MX_GPIO_Init+0x5c>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	4a14      	ldr	r2, [pc, #80]	@ (8001710 <MX_GPIO_Init+0x5c>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c6:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <MX_GPIO_Init+0x5c>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <MX_GPIO_Init+0x5c>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001710 <MX_GPIO_Init+0x5c>)
 80016d8:	f043 0320 	orr.w	r3, r3, #32
 80016dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016de:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <MX_GPIO_Init+0x5c>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e2:	f003 0320 	and.w	r3, r3, #32
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <MX_GPIO_Init+0x5c>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ee:	4a08      	ldr	r2, [pc, #32]	@ (8001710 <MX_GPIO_Init+0x5c>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f6:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <MX_GPIO_Init+0x5c>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001718:	b672      	cpsid	i
}
 800171a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <Error_Handler+0x8>

08001720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <HAL_MspInit+0x44>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172a:	4a0e      	ldr	r2, [pc, #56]	@ (8001764 <HAL_MspInit+0x44>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6613      	str	r3, [r2, #96]	@ 0x60
 8001732:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <HAL_MspInit+0x44>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <HAL_MspInit+0x44>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001742:	4a08      	ldr	r2, [pc, #32]	@ (8001764 <HAL_MspInit+0x44>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001748:	6593      	str	r3, [r2, #88]	@ 0x58
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_MspInit+0x44>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001756:	f002 fde7 	bl	8004328 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000

08001768 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b09e      	sub	sp, #120	@ 0x78
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	2254      	movs	r2, #84	@ 0x54
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f005 feca 	bl	8007522 <memset>
  if(hadc->Instance==ADC1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001796:	d160      	bne.n	800185a <HAL_ADC_MspInit+0xf2>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001798:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800179c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800179e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80017a2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 fafb 	bl	8004da4 <HAL_RCCEx_PeriphCLKConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80017b4:	f7ff ffae 	bl	8001714 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001864 <HAL_ADC_MspInit+0xfc>)
 80017ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017bc:	4a29      	ldr	r2, [pc, #164]	@ (8001864 <HAL_ADC_MspInit+0xfc>)
 80017be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c4:	4b27      	ldr	r3, [pc, #156]	@ (8001864 <HAL_ADC_MspInit+0xfc>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <HAL_ADC_MspInit+0xfc>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d4:	4a23      	ldr	r2, [pc, #140]	@ (8001864 <HAL_ADC_MspInit+0xfc>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017dc:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <HAL_ADC_MspInit+0xfc>)
 80017de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017e8:	2301      	movs	r3, #1
 80017ea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ec:	2303      	movs	r3, #3
 80017ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017f8:	4619      	mov	r1, r3
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fe:	f002 fb6d 	bl	8003edc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001802:	4b19      	ldr	r3, [pc, #100]	@ (8001868 <HAL_ADC_MspInit+0x100>)
 8001804:	4a19      	ldr	r2, [pc, #100]	@ (800186c <HAL_ADC_MspInit+0x104>)
 8001806:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001808:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <HAL_ADC_MspInit+0x100>)
 800180a:	2205      	movs	r2, #5
 800180c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800180e:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <HAL_ADC_MspInit+0x100>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001814:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <HAL_ADC_MspInit+0x100>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800181a:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <HAL_ADC_MspInit+0x100>)
 800181c:	2280      	movs	r2, #128	@ 0x80
 800181e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <HAL_ADC_MspInit+0x100>)
 8001822:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001826:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001828:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <HAL_ADC_MspInit+0x100>)
 800182a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800182e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001830:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <HAL_ADC_MspInit+0x100>)
 8001832:	2220      	movs	r2, #32
 8001834:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <HAL_ADC_MspInit+0x100>)
 8001838:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800183c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800183e:	480a      	ldr	r0, [pc, #40]	@ (8001868 <HAL_ADC_MspInit+0x100>)
 8001840:	f002 f880 	bl	8003944 <HAL_DMA_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800184a:	f7ff ff63 	bl	8001714 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a05      	ldr	r2, [pc, #20]	@ (8001868 <HAL_ADC_MspInit+0x100>)
 8001852:	655a      	str	r2, [r3, #84]	@ 0x54
 8001854:	4a04      	ldr	r2, [pc, #16]	@ (8001868 <HAL_ADC_MspInit+0x100>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800185a:	bf00      	nop
 800185c:	3778      	adds	r7, #120	@ 0x78
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	200005d8 	.word	0x200005d8
 800186c:	40020008 	.word	0x40020008

08001870 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <HAL_TIM_Base_MspInit+0x44>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d113      	bne.n	80018aa <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <HAL_TIM_Base_MspInit+0x48>)
 8001884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001886:	4a0c      	ldr	r2, [pc, #48]	@ (80018b8 <HAL_TIM_Base_MspInit+0x48>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6593      	str	r3, [r2, #88]	@ 0x58
 800188e:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <HAL_TIM_Base_MspInit+0x48>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	201d      	movs	r0, #29
 80018a0:	f002 f81b 	bl	80038da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018a4:	201d      	movs	r0, #29
 80018a6:	f002 f832 	bl	800390e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40000400 	.word	0x40000400
 80018b8:	40021000 	.word	0x40021000

080018bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b09e      	sub	sp, #120	@ 0x78
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	2254      	movs	r2, #84	@ 0x54
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f005 fe20 	bl	8007522 <memset>
  if(huart->Instance==USART1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001960 <HAL_UART_MspInit+0xa4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d135      	bne.n	8001958 <HAL_UART_MspInit+0x9c>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 fa53 	bl	8004da4 <HAL_RCCEx_PeriphCLKConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001904:	f7ff ff06 	bl	8001714 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001908:	4b16      	ldr	r3, [pc, #88]	@ (8001964 <HAL_UART_MspInit+0xa8>)
 800190a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800190c:	4a15      	ldr	r2, [pc, #84]	@ (8001964 <HAL_UART_MspInit+0xa8>)
 800190e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001912:	6613      	str	r3, [r2, #96]	@ 0x60
 8001914:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <HAL_UART_MspInit+0xa8>)
 8001916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001920:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <HAL_UART_MspInit+0xa8>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001924:	4a0f      	ldr	r2, [pc, #60]	@ (8001964 <HAL_UART_MspInit+0xa8>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800192c:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <HAL_UART_MspInit+0xa8>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001938:	2330      	movs	r3, #48	@ 0x30
 800193a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001948:	2307      	movs	r3, #7
 800194a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001950:	4619      	mov	r1, r3
 8001952:	4805      	ldr	r0, [pc, #20]	@ (8001968 <HAL_UART_MspInit+0xac>)
 8001954:	f002 fac2 	bl	8003edc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001958:	bf00      	nop
 800195a:	3778      	adds	r7, #120	@ 0x78
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40013800 	.word	0x40013800
 8001964:	40021000 	.word	0x40021000
 8001968:	48000800 	.word	0x48000800

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <NMI_Handler+0x4>

08001974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <HardFault_Handler+0x4>

0800197c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <MemManage_Handler+0x4>

08001984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <UsageFault_Handler+0x4>

08001994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c2:	f000 f96b 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <DMA1_Channel1_IRQHandler+0x10>)
 80019d2:	f002 f933 	bl	8003c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200005d8 	.word	0x200005d8

080019e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019e4:	4802      	ldr	r0, [pc, #8]	@ (80019f0 <TIM3_IRQHandler+0x10>)
 80019e6:	f003 fc82 	bl	80052ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000638 	.word	0x20000638

080019f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return 1;
 80019f8:	2301      	movs	r3, #1
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <_kill>:

int _kill(int pid, int sig)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a0e:	f005 fddb 	bl	80075c8 <__errno>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2216      	movs	r2, #22
 8001a16:	601a      	str	r2, [r3, #0]
  return -1;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_exit>:

void _exit (int status)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ffe7 	bl	8001a04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a36:	bf00      	nop
 8001a38:	e7fd      	b.n	8001a36 <_exit+0x12>

08001a3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e00a      	b.n	8001a62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a4c:	f3af 8000 	nop.w
 8001a50:	4601      	mov	r1, r0
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	60ba      	str	r2, [r7, #8]
 8001a58:	b2ca      	uxtb	r2, r1
 8001a5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	dbf0      	blt.n	8001a4c <_read+0x12>
  }

  return len;
 8001a6a:	687b      	ldr	r3, [r7, #4]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e009      	b.n	8001a9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	60ba      	str	r2, [r7, #8]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	dbf1      	blt.n	8001a86 <_write+0x12>
  }
  return len;
 8001aa2:	687b      	ldr	r3, [r7, #4]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_close>:

int _close(int file)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ad4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_isatty>:

int _isatty(int file)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aec:	2301      	movs	r3, #1
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b1c:	4a14      	ldr	r2, [pc, #80]	@ (8001b70 <_sbrk+0x5c>)
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <_sbrk+0x60>)
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b28:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <_sbrk+0x64>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	@ (8001b7c <_sbrk+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d207      	bcs.n	8001b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b44:	f005 fd40 	bl	80075c8 <__errno>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	e009      	b.n	8001b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5a:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	4a05      	ldr	r2, [pc, #20]	@ (8001b78 <_sbrk+0x64>)
 8001b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b66:	68fb      	ldr	r3, [r7, #12]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20020000 	.word	0x20020000
 8001b74:	00000400 	.word	0x00000400
 8001b78:	20000718 	.word	0x20000718
 8001b7c:	20000870 	.word	0x20000870

08001b80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <SystemInit+0x20>)
 8001b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ba0 <SystemInit+0x20>)
 8001b8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ba4:	480d      	ldr	r0, [pc, #52]	@ (8001bdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ba6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba8:	f7ff ffea 	bl	8001b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	480c      	ldr	r0, [pc, #48]	@ (8001be0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bae:	490d      	ldr	r1, [pc, #52]	@ (8001be4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <LoopForever+0xe>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf0 <LoopForever+0x16>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f005 fcff 	bl	80075d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bd6:	f7ff fbbd 	bl	8001354 <main>

08001bda <LoopForever>:

LoopForever:
    b LoopForever
 8001bda:	e7fe      	b.n	8001bda <LoopForever>
  ldr   r0, =_estack
 8001bdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001be8:	0800a59c 	.word	0x0800a59c
  ldr r2, =_sbss
 8001bec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001bf0:	2000086c 	.word	0x2000086c

08001bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC1_2_IRQHandler>

08001bf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c00:	2003      	movs	r0, #3
 8001c02:	f001 fe5f 	bl	80038c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c06:	200f      	movs	r0, #15
 8001c08:	f000 f80e 	bl	8001c28 <HAL_InitTick>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	71fb      	strb	r3, [r7, #7]
 8001c16:	e001      	b.n	8001c1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c18:	f7ff fd82 	bl	8001720 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c1c:	79fb      	ldrb	r3, [r7, #7]

}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c34:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <HAL_InitTick+0x68>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d022      	beq.n	8001c82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <HAL_InitTick+0x6c>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <HAL_InitTick+0x68>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 fe6a 	bl	800392a <HAL_SYSTICK_Config>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10f      	bne.n	8001c7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b0f      	cmp	r3, #15
 8001c60:	d809      	bhi.n	8001c76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c62:	2200      	movs	r2, #0
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6a:	f001 fe36 	bl	80038da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <HAL_InitTick+0x70>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	e007      	b.n	8001c86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
 8001c7a:	e004      	b.n	8001c86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e001      	b.n	8001c86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_IncTick+0x1c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <HAL_IncTick+0x20>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a03      	ldr	r2, [pc, #12]	@ (8001cb8 <HAL_IncTick+0x1c>)
 8001cac:	6013      	str	r3, [r2, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	2000071c 	.word	0x2000071c
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	@ (8001cd4 <HAL_GetTick+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	2000071c 	.word	0x2000071c

08001cd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	609a      	str	r2, [r3, #8]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3360      	adds	r3, #96	@ 0x60
 8001d52:	461a      	mov	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <LL_ADC_SetOffset+0x44>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	03fff000 	.word	0x03fff000

08001d88 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3360      	adds	r3, #96	@ 0x60
 8001d96:	461a      	mov	r2, r3
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3360      	adds	r3, #96	@ 0x60
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dde:	bf00      	nop
 8001de0:	371c      	adds	r7, #28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b087      	sub	sp, #28
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3360      	adds	r3, #96	@ 0x60
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e14:	bf00      	nop
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3360      	adds	r3, #96	@ 0x60
 8001e30:	461a      	mov	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e4a:	bf00      	nop
 8001e4c:	371c      	adds	r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	615a      	str	r2, [r3, #20]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b087      	sub	sp, #28
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3330      	adds	r3, #48	@ 0x30
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	4413      	add	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	211f      	movs	r1, #31
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	0e9b      	lsrs	r3, r3, #26
 8001eda:	f003 011f 	and.w	r1, r3, #31
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001eee:	bf00      	nop
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b087      	sub	sp, #28
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3314      	adds	r3, #20
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	0e5b      	lsrs	r3, r3, #25
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	4413      	add	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	0d1b      	lsrs	r3, r3, #20
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	2107      	movs	r1, #7
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	401a      	ands	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	0d1b      	lsrs	r3, r3, #20
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f44:	bf00      	nop
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f003 0318 	and.w	r3, r3, #24
 8001f72:	4908      	ldr	r1, [pc, #32]	@ (8001f94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f74:	40d9      	lsrs	r1, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	400b      	ands	r3, r1
 8001f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	0007ffff 	.word	0x0007ffff

08001f98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001fc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6093      	str	r3, [r2, #8]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fe8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fec:	d101      	bne.n	8001ff2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002010:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002014:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002038:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800203c:	d101      	bne.n	8002042 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002060:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002064:	f043 0201 	orr.w	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002088:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800208c:	f043 0202 	orr.w	r2, r3, #2
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <LL_ADC_IsEnabled+0x18>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <LL_ADC_IsEnabled+0x1a>
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d101      	bne.n	80020de <LL_ADC_IsDisableOngoing+0x18>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <LL_ADC_IsDisableOngoing+0x1a>
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002100:	f043 0204 	orr.w	r2, r3, #4
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002124:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002128:	f043 0210 	orr.w	r2, r3, #16
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b04      	cmp	r3, #4
 800214e:	d101      	bne.n	8002154 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002172:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002176:	f043 0220 	orr.w	r2, r3, #32
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b08      	cmp	r3, #8
 800219c:	d101      	bne.n	80021a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b089      	sub	sp, #36	@ 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e1a9      	b.n	800251e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d109      	bne.n	80021ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff fac5 	bl	8001768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fef1 	bl	8001fd8 <LL_ADC_IsDeepPowerDownEnabled>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fed7 	bl	8001fb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff0c 	bl	8002028 <LL_ADC_IsInternalRegulatorEnabled>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d115      	bne.n	8002242 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fef0 	bl	8002000 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002220:	4b9c      	ldr	r3, [pc, #624]	@ (8002494 <HAL_ADC_Init+0x2e4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	099b      	lsrs	r3, r3, #6
 8002226:	4a9c      	ldr	r2, [pc, #624]	@ (8002498 <HAL_ADC_Init+0x2e8>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	099b      	lsrs	r3, r3, #6
 800222e:	3301      	adds	r3, #1
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002234:	e002      	b.n	800223c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3b01      	subs	r3, #1
 800223a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f9      	bne.n	8002236 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff feee 	bl	8002028 <LL_ADC_IsInternalRegulatorEnabled>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10d      	bne.n	800226e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002256:	f043 0210 	orr.w	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff62 	bl	800213c <LL_ADC_REG_IsConversionOngoing>
 8002278:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 8142 	bne.w	800250c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f040 813e 	bne.w	800250c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002294:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002298:	f043 0202 	orr.w	r2, r3, #2
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fefb 	bl	80020a0 <LL_ADC_IsEnabled>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d141      	bne.n	8002334 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022b8:	d004      	beq.n	80022c4 <HAL_ADC_Init+0x114>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a77      	ldr	r2, [pc, #476]	@ (800249c <HAL_ADC_Init+0x2ec>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d10f      	bne.n	80022e4 <HAL_ADC_Init+0x134>
 80022c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022c8:	f7ff feea 	bl	80020a0 <LL_ADC_IsEnabled>
 80022cc:	4604      	mov	r4, r0
 80022ce:	4873      	ldr	r0, [pc, #460]	@ (800249c <HAL_ADC_Init+0x2ec>)
 80022d0:	f7ff fee6 	bl	80020a0 <LL_ADC_IsEnabled>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4323      	orrs	r3, r4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	e012      	b.n	800230a <HAL_ADC_Init+0x15a>
 80022e4:	486e      	ldr	r0, [pc, #440]	@ (80024a0 <HAL_ADC_Init+0x2f0>)
 80022e6:	f7ff fedb 	bl	80020a0 <LL_ADC_IsEnabled>
 80022ea:	4604      	mov	r4, r0
 80022ec:	486d      	ldr	r0, [pc, #436]	@ (80024a4 <HAL_ADC_Init+0x2f4>)
 80022ee:	f7ff fed7 	bl	80020a0 <LL_ADC_IsEnabled>
 80022f2:	4603      	mov	r3, r0
 80022f4:	431c      	orrs	r4, r3
 80022f6:	486c      	ldr	r0, [pc, #432]	@ (80024a8 <HAL_ADC_Init+0x2f8>)
 80022f8:	f7ff fed2 	bl	80020a0 <LL_ADC_IsEnabled>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4323      	orrs	r3, r4
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d012      	beq.n	8002334 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002316:	d004      	beq.n	8002322 <HAL_ADC_Init+0x172>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a5f      	ldr	r2, [pc, #380]	@ (800249c <HAL_ADC_Init+0x2ec>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <HAL_ADC_Init+0x176>
 8002322:	4a62      	ldr	r2, [pc, #392]	@ (80024ac <HAL_ADC_Init+0x2fc>)
 8002324:	e000      	b.n	8002328 <HAL_ADC_Init+0x178>
 8002326:	4a62      	ldr	r2, [pc, #392]	@ (80024b0 <HAL_ADC_Init+0x300>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4619      	mov	r1, r3
 800232e:	4610      	mov	r0, r2
 8002330:	f7ff fcd2 	bl	8001cd8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7f5b      	ldrb	r3, [r3, #29]
 8002338:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800233e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002344:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800234a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002352:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800235e:	2b01      	cmp	r3, #1
 8002360:	d106      	bne.n	8002370 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002366:	3b01      	subs	r3, #1
 8002368:	045b      	lsls	r3, r3, #17
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002384:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	4b48      	ldr	r3, [pc, #288]	@ (80024b4 <HAL_ADC_Init+0x304>)
 8002394:	4013      	ands	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	69b9      	ldr	r1, [r7, #24]
 800239c:	430b      	orrs	r3, r1
 800239e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fee5 	bl	800218a <LL_ADC_INJ_IsConversionOngoing>
 80023c0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d17f      	bne.n	80024c8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d17c      	bne.n	80024c8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023d2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023da:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023ea:	f023 0302 	bic.w	r3, r3, #2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	69b9      	ldr	r1, [r7, #24]
 80023f4:	430b      	orrs	r3, r1
 80023f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d017      	beq.n	8002430 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800240e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002418:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800241c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6911      	ldr	r1, [r2, #16]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	430b      	orrs	r3, r1
 800242a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800242e:	e013      	b.n	8002458 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800243e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002450:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002454:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800245e:	2b01      	cmp	r3, #1
 8002460:	d12a      	bne.n	80024b8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002478:	4311      	orrs	r1, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800247e:	4311      	orrs	r1, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002484:	430a      	orrs	r2, r1
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	611a      	str	r2, [r3, #16]
 8002492:	e019      	b.n	80024c8 <HAL_ADC_Init+0x318>
 8002494:	20000000 	.word	0x20000000
 8002498:	053e2d63 	.word	0x053e2d63
 800249c:	50000100 	.word	0x50000100
 80024a0:	50000400 	.word	0x50000400
 80024a4:	50000500 	.word	0x50000500
 80024a8:	50000600 	.word	0x50000600
 80024ac:	50000300 	.word	0x50000300
 80024b0:	50000700 	.word	0x50000700
 80024b4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d10c      	bne.n	80024ea <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	f023 010f 	bic.w	r1, r3, #15
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	1e5a      	subs	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80024e8:	e007      	b.n	80024fa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 020f 	bic.w	r2, r2, #15
 80024f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fe:	f023 0303 	bic.w	r3, r3, #3
 8002502:	f043 0201 	orr.w	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	65da      	str	r2, [r3, #92]	@ 0x5c
 800250a:	e007      	b.n	800251c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002510:	f043 0210 	orr.w	r2, r3, #16
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800251c:	7ffb      	ldrb	r3, [r7, #31]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3724      	adds	r7, #36	@ 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd90      	pop	{r4, r7, pc}
 8002526:	bf00      	nop

08002528 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800253c:	d004      	beq.n	8002548 <HAL_ADC_Start_DMA+0x20>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a5a      	ldr	r2, [pc, #360]	@ (80026ac <HAL_ADC_Start_DMA+0x184>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d101      	bne.n	800254c <HAL_ADC_Start_DMA+0x24>
 8002548:	4b59      	ldr	r3, [pc, #356]	@ (80026b0 <HAL_ADC_Start_DMA+0x188>)
 800254a:	e000      	b.n	800254e <HAL_ADC_Start_DMA+0x26>
 800254c:	4b59      	ldr	r3, [pc, #356]	@ (80026b4 <HAL_ADC_Start_DMA+0x18c>)
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fd22 	bl	8001f98 <LL_ADC_GetMultimode>
 8002554:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fdee 	bl	800213c <LL_ADC_REG_IsConversionOngoing>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	f040 809b 	bne.w	800269e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_ADC_Start_DMA+0x4e>
 8002572:	2302      	movs	r3, #2
 8002574:	e096      	b.n	80026a4 <HAL_ADC_Start_DMA+0x17c>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a4d      	ldr	r2, [pc, #308]	@ (80026b8 <HAL_ADC_Start_DMA+0x190>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d008      	beq.n	800259a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b05      	cmp	r3, #5
 8002592:	d002      	beq.n	800259a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b09      	cmp	r3, #9
 8002598:	d17a      	bne.n	8002690 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fe0a 	bl	80031b4 <ADC_Enable>
 80025a0:	4603      	mov	r3, r0
 80025a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d16d      	bne.n	8002686 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a3a      	ldr	r2, [pc, #232]	@ (80026ac <HAL_ADC_Start_DMA+0x184>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d009      	beq.n	80025dc <HAL_ADC_Start_DMA+0xb4>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a3b      	ldr	r2, [pc, #236]	@ (80026bc <HAL_ADC_Start_DMA+0x194>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d002      	beq.n	80025d8 <HAL_ADC_Start_DMA+0xb0>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	e003      	b.n	80025e0 <HAL_ADC_Start_DMA+0xb8>
 80025d8:	4b39      	ldr	r3, [pc, #228]	@ (80026c0 <HAL_ADC_Start_DMA+0x198>)
 80025da:	e001      	b.n	80025e0 <HAL_ADC_Start_DMA+0xb8>
 80025dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d002      	beq.n	80025ee <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d105      	bne.n	80025fa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d006      	beq.n	8002614 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260a:	f023 0206 	bic.w	r2, r3, #6
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	661a      	str	r2, [r3, #96]	@ 0x60
 8002612:	e002      	b.n	800261a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261e:	4a29      	ldr	r2, [pc, #164]	@ (80026c4 <HAL_ADC_Start_DMA+0x19c>)
 8002620:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002626:	4a28      	ldr	r2, [pc, #160]	@ (80026c8 <HAL_ADC_Start_DMA+0x1a0>)
 8002628:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262e:	4a27      	ldr	r2, [pc, #156]	@ (80026cc <HAL_ADC_Start_DMA+0x1a4>)
 8002630:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	221c      	movs	r2, #28
 8002638:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0210 	orr.w	r2, r2, #16
 8002650:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3340      	adds	r3, #64	@ 0x40
 800266c:	4619      	mov	r1, r3
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f001 fa0f 	bl	8003a94 <HAL_DMA_Start_IT>
 8002676:	4603      	mov	r3, r0
 8002678:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fd34 	bl	80020ec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002684:	e00d      	b.n	80026a2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800268e:	e008      	b.n	80026a2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800269c:	e001      	b.n	80026a2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800269e:	2302      	movs	r3, #2
 80026a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	50000100 	.word	0x50000100
 80026b0:	50000300 	.word	0x50000300
 80026b4:	50000700 	.word	0x50000700
 80026b8:	50000600 	.word	0x50000600
 80026bc:	50000500 	.word	0x50000500
 80026c0:	50000400 	.word	0x50000400
 80026c4:	0800339f 	.word	0x0800339f
 80026c8:	08003477 	.word	0x08003477
 80026cc:	08003493 	.word	0x08003493

080026d0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_Stop_DMA+0x16>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e051      	b.n	800278a <HAL_ADC_Stop_DMA+0xba>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80026ee:	2103      	movs	r1, #3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fca3 	bl	800303c <ADC_ConversionStop>
 80026f6:	4603      	mov	r3, r0
 80026f8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d13f      	bne.n	8002780 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002714:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d10f      	bne.n	800273e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	4618      	mov	r0, r3
 8002724:	f001 fa31 	bl	8003b8a <HAL_DMA_Abort>
 8002728:	4603      	mov	r3, r0
 800272a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002736:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0210 	bic.w	r2, r2, #16
 800274c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d105      	bne.n	8002760 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fdc3 	bl	80032e0 <ADC_Disable>
 800275a:	4603      	mov	r3, r0
 800275c:	73fb      	strb	r3, [r7, #15]
 800275e:	e002      	b.n	8002766 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fdbd 	bl	80032e0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d109      	bne.n	8002780 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002770:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	f043 0201 	orr.w	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002788:	7bfb      	ldrb	r3, [r7, #15]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b0b6      	sub	sp, #216	@ 0xd8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d102      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x24>
 80027da:	2302      	movs	r3, #2
 80027dc:	f000 bc13 	b.w	8003006 <HAL_ADC_ConfigChannel+0x84a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fca5 	bl	800213c <LL_ADC_REG_IsConversionOngoing>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 83f3 	bne.w	8002fe0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6859      	ldr	r1, [r3, #4]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	f7ff fb4b 	bl	8001ea2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fc93 	bl	800213c <LL_ADC_REG_IsConversionOngoing>
 8002816:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fcb3 	bl	800218a <LL_ADC_INJ_IsConversionOngoing>
 8002824:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002828:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800282c:	2b00      	cmp	r3, #0
 800282e:	f040 81d9 	bne.w	8002be4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002832:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 81d4 	bne.w	8002be4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002844:	d10f      	bne.n	8002866 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	4619      	mov	r1, r3
 8002852:	f7ff fb52 	bl	8001efa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff faf9 	bl	8001e56 <LL_ADC_SetSamplingTimeCommonConfig>
 8002864:	e00e      	b.n	8002884 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6819      	ldr	r1, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	461a      	mov	r2, r3
 8002874:	f7ff fb41 	bl	8001efa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fae9 	bl	8001e56 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	08db      	lsrs	r3, r3, #3
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d022      	beq.n	80028ec <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6919      	ldr	r1, [r3, #16]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028b6:	f7ff fa43 	bl	8001d40 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6919      	ldr	r1, [r3, #16]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f7ff fa8f 	bl	8001dea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d102      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x126>
 80028dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028e0:	e000      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x128>
 80028e2:	2300      	movs	r3, #0
 80028e4:	461a      	mov	r2, r3
 80028e6:	f7ff fa9b 	bl	8001e20 <LL_ADC_SetOffsetSaturation>
 80028ea:	e17b      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fa48 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10a      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x15c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fa3d 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	0e9b      	lsrs	r3, r3, #26
 8002912:	f003 021f 	and.w	r2, r3, #31
 8002916:	e01e      	b.n	8002956 <HAL_ADC_ConfigChannel+0x19a>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fa32 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002924:	4603      	mov	r3, r0
 8002926:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002936:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800293a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800293e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002946:	2320      	movs	r3, #32
 8002948:	e004      	b.n	8002954 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800294a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295e:	2b00      	cmp	r3, #0
 8002960:	d105      	bne.n	800296e <HAL_ADC_ConfigChannel+0x1b2>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	0e9b      	lsrs	r3, r3, #26
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	e018      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x1e4>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002986:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800298a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002992:	2320      	movs	r3, #32
 8002994:	e004      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d106      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fa01 	bl	8001db4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2101      	movs	r1, #1
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f9e5 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <HAL_ADC_ConfigChannel+0x222>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2101      	movs	r1, #1
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff f9da 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	0e9b      	lsrs	r3, r3, #26
 80029d8:	f003 021f 	and.w	r2, r3, #31
 80029dc:	e01e      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x260>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2101      	movs	r1, #1
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff f9cf 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80029fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002a04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	e004      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002a10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d105      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x278>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	0e9b      	lsrs	r3, r3, #26
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	e018      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x2aa>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002a48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002a50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002a58:	2320      	movs	r3, #32
 8002a5a:	e004      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d106      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2101      	movs	r1, #1
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff f99e 	bl	8001db4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff f982 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10a      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x2e8>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2102      	movs	r1, #2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff f977 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	0e9b      	lsrs	r3, r3, #26
 8002a9e:	f003 021f 	and.w	r2, r3, #31
 8002aa2:	e01e      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x326>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2102      	movs	r1, #2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff f96c 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002ac2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ac6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002aca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	e004      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002ad6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d105      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x33e>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	0e9b      	lsrs	r3, r3, #26
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	e016      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x36c>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002b0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002b12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	e004      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002b1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d106      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	2102      	movs	r1, #2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff f93d 	bl	8001db4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2103      	movs	r1, #3
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff f921 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x3aa>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2103      	movs	r1, #3
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff f916 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	0e9b      	lsrs	r3, r3, #26
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	e017      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x3da>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2103      	movs	r1, #3
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff f90b 	bl	8001d88 <LL_ADC_GetOffsetChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002b7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b80:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002b82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	e003      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d105      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x3f2>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	0e9b      	lsrs	r3, r3, #26
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	e011      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x416>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	e003      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002bca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d106      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2103      	movs	r1, #3
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff f8e8 	bl	8001db4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fa59 	bl	80020a0 <LL_ADC_IsEnabled>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f040 813d 	bne.w	8002e70 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6819      	ldr	r1, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	461a      	mov	r2, r3
 8002c04:	f7ff f9a4 	bl	8001f50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4aa2      	ldr	r2, [pc, #648]	@ (8002e98 <HAL_ADC_ConfigChannel+0x6dc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	f040 812e 	bne.w	8002e70 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x480>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	0e9b      	lsrs	r3, r3, #26
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	2b09      	cmp	r3, #9
 8002c32:	bf94      	ite	ls
 8002c34:	2301      	movls	r3, #1
 8002c36:	2300      	movhi	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e019      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x4b4>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002c4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c4c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002c4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002c54:	2320      	movs	r3, #32
 8002c56:	e003      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	3301      	adds	r3, #1
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	2b09      	cmp	r3, #9
 8002c68:	bf94      	ite	ls
 8002c6a:	2301      	movls	r3, #1
 8002c6c:	2300      	movhi	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d079      	beq.n	8002d68 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d107      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x4d4>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	0e9b      	lsrs	r3, r3, #26
 8002c86:	3301      	adds	r3, #1
 8002c88:	069b      	lsls	r3, r3, #26
 8002c8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c8e:	e015      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x500>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ca0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002ca8:	2320      	movs	r3, #32
 8002caa:	e003      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	069b      	lsls	r3, r3, #26
 8002cb8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d109      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x520>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	0e9b      	lsrs	r3, r3, #26
 8002cce:	3301      	adds	r3, #1
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	e017      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x550>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e003      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	3301      	adds	r3, #1
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2101      	movs	r1, #1
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	ea42 0103 	orr.w	r1, r2, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x576>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0e9b      	lsrs	r3, r3, #26
 8002d22:	3301      	adds	r3, #1
 8002d24:	f003 021f 	and.w	r2, r3, #31
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	051b      	lsls	r3, r3, #20
 8002d30:	e018      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x5a8>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002d4a:	2320      	movs	r3, #32
 8002d4c:	e003      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d50:	fab3 f383 	clz	r3, r3
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	3301      	adds	r3, #1
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d64:	430b      	orrs	r3, r1
 8002d66:	e07e      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d107      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x5c8>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	0e9b      	lsrs	r3, r3, #26
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	069b      	lsls	r3, r3, #26
 8002d7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d82:	e015      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x5f4>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d94:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	e003      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	069b      	lsls	r3, r3, #26
 8002dac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d109      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x614>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	0e9b      	lsrs	r3, r3, #26
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f303 	lsl.w	r3, r1, r3
 8002dce:	e017      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x644>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	61fb      	str	r3, [r7, #28]
  return result;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002de8:	2320      	movs	r3, #32
 8002dea:	e003      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	3301      	adds	r3, #1
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	ea42 0103 	orr.w	r1, r2, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10d      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x670>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0e9b      	lsrs	r3, r3, #26
 8002e16:	3301      	adds	r3, #1
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	3b1e      	subs	r3, #30
 8002e24:	051b      	lsls	r3, r3, #20
 8002e26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	e01b      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x6a8>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	613b      	str	r3, [r7, #16]
  return result;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002e44:	2320      	movs	r3, #32
 8002e46:	e003      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	3301      	adds	r3, #1
 8002e52:	f003 021f 	and.w	r2, r3, #31
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3b1e      	subs	r3, #30
 8002e5e:	051b      	lsls	r3, r3, #20
 8002e60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e64:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f7ff f845 	bl	8001efa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <HAL_ADC_ConfigChannel+0x6e0>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80be 	beq.w	8002ffa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e86:	d004      	beq.n	8002e92 <HAL_ADC_ConfigChannel+0x6d6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x6e4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d10a      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x6ec>
 8002e92:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x6e8>)
 8002e94:	e009      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x6ee>
 8002e96:	bf00      	nop
 8002e98:	407f0000 	.word	0x407f0000
 8002e9c:	80080000 	.word	0x80080000
 8002ea0:	50000100 	.word	0x50000100
 8002ea4:	50000300 	.word	0x50000300
 8002ea8:	4b59      	ldr	r3, [pc, #356]	@ (8003010 <HAL_ADC_ConfigChannel+0x854>)
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe ff3a 	bl	8001d24 <LL_ADC_GetCommonPathInternalCh>
 8002eb0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a56      	ldr	r2, [pc, #344]	@ (8003014 <HAL_ADC_ConfigChannel+0x858>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_ADC_ConfigChannel+0x70c>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a55      	ldr	r2, [pc, #340]	@ (8003018 <HAL_ADC_ConfigChannel+0x85c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d13a      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ecc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d134      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002edc:	d005      	beq.n	8002eea <HAL_ADC_ConfigChannel+0x72e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a4e      	ldr	r2, [pc, #312]	@ (800301c <HAL_ADC_ConfigChannel+0x860>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	f040 8085 	bne.w	8002ff4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ef2:	d004      	beq.n	8002efe <HAL_ADC_ConfigChannel+0x742>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a49      	ldr	r2, [pc, #292]	@ (8003020 <HAL_ADC_ConfigChannel+0x864>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x746>
 8002efe:	4a49      	ldr	r2, [pc, #292]	@ (8003024 <HAL_ADC_ConfigChannel+0x868>)
 8002f00:	e000      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x748>
 8002f02:	4a43      	ldr	r2, [pc, #268]	@ (8003010 <HAL_ADC_ConfigChannel+0x854>)
 8002f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4610      	mov	r0, r2
 8002f10:	f7fe fef5 	bl	8001cfe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f14:	4b44      	ldr	r3, [pc, #272]	@ (8003028 <HAL_ADC_ConfigChannel+0x86c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	099b      	lsrs	r3, r3, #6
 8002f1a:	4a44      	ldr	r2, [pc, #272]	@ (800302c <HAL_ADC_ConfigChannel+0x870>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	099b      	lsrs	r3, r3, #6
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f2e:	e002      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f9      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f3c:	e05a      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a3b      	ldr	r2, [pc, #236]	@ (8003030 <HAL_ADC_ConfigChannel+0x874>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d125      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d11f      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a31      	ldr	r2, [pc, #196]	@ (8003020 <HAL_ADC_ConfigChannel+0x864>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d104      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x7ac>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a34      	ldr	r2, [pc, #208]	@ (8003034 <HAL_ADC_ConfigChannel+0x878>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d047      	beq.n	8002ff8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f70:	d004      	beq.n	8002f7c <HAL_ADC_ConfigChannel+0x7c0>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a2a      	ldr	r2, [pc, #168]	@ (8003020 <HAL_ADC_ConfigChannel+0x864>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x7c4>
 8002f7c:	4a29      	ldr	r2, [pc, #164]	@ (8003024 <HAL_ADC_ConfigChannel+0x868>)
 8002f7e:	e000      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x7c6>
 8002f80:	4a23      	ldr	r2, [pc, #140]	@ (8003010 <HAL_ADC_ConfigChannel+0x854>)
 8002f82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	f7fe feb6 	bl	8001cfe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f92:	e031      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a27      	ldr	r2, [pc, #156]	@ (8003038 <HAL_ADC_ConfigChannel+0x87c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d12d      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d127      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1c      	ldr	r2, [pc, #112]	@ (8003020 <HAL_ADC_ConfigChannel+0x864>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d022      	beq.n	8002ffa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fbc:	d004      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x80c>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a17      	ldr	r2, [pc, #92]	@ (8003020 <HAL_ADC_ConfigChannel+0x864>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d101      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x810>
 8002fc8:	4a16      	ldr	r2, [pc, #88]	@ (8003024 <HAL_ADC_ConfigChannel+0x868>)
 8002fca:	e000      	b.n	8002fce <HAL_ADC_ConfigChannel+0x812>
 8002fcc:	4a10      	ldr	r2, [pc, #64]	@ (8003010 <HAL_ADC_ConfigChannel+0x854>)
 8002fce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4610      	mov	r0, r2
 8002fda:	f7fe fe90 	bl	8001cfe <LL_ADC_SetCommonPathInternalCh>
 8002fde:	e00c      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002ff2:	e002      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ff4:	bf00      	nop
 8002ff6:	e000      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ff8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003002:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003006:	4618      	mov	r0, r3
 8003008:	37d8      	adds	r7, #216	@ 0xd8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	50000700 	.word	0x50000700
 8003014:	c3210000 	.word	0xc3210000
 8003018:	90c00010 	.word	0x90c00010
 800301c:	50000600 	.word	0x50000600
 8003020:	50000100 	.word	0x50000100
 8003024:	50000300 	.word	0x50000300
 8003028:	20000000 	.word	0x20000000
 800302c:	053e2d63 	.word	0x053e2d63
 8003030:	c7520000 	.word	0xc7520000
 8003034:	50000500 	.word	0x50000500
 8003038:	cb840000 	.word	0xcb840000

0800303c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff f872 	bl	800213c <LL_ADC_REG_IsConversionOngoing>
 8003058:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff f893 	bl	800218a <LL_ADC_INJ_IsConversionOngoing>
 8003064:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d103      	bne.n	8003074 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8098 	beq.w	80031a4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d02a      	beq.n	80030d8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7f5b      	ldrb	r3, [r3, #29]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d126      	bne.n	80030d8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7f1b      	ldrb	r3, [r3, #28]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d122      	bne.n	80030d8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003092:	2301      	movs	r3, #1
 8003094:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003096:	e014      	b.n	80030c2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4a45      	ldr	r2, [pc, #276]	@ (80031b0 <ADC_ConversionStop+0x174>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d90d      	bls.n	80030bc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a4:	f043 0210 	orr.w	r2, r3, #16
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b0:	f043 0201 	orr.w	r2, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e074      	b.n	80031a6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	3301      	adds	r3, #1
 80030c0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030cc:	2b40      	cmp	r3, #64	@ 0x40
 80030ce:	d1e3      	bne.n	8003098 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2240      	movs	r2, #64	@ 0x40
 80030d6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d014      	beq.n	8003108 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff f82a 	bl	800213c <LL_ADC_REG_IsConversionOngoing>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00c      	beq.n	8003108 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe ffe7 	bl	80020c6 <LL_ADC_IsDisableOngoing>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d104      	bne.n	8003108 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff f806 	bl	8002114 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d014      	beq.n	8003138 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff f839 	bl	800218a <LL_ADC_INJ_IsConversionOngoing>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00c      	beq.n	8003138 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe ffcf 	bl	80020c6 <LL_ADC_IsDisableOngoing>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d104      	bne.n	8003138 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff f815 	bl	8002162 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d005      	beq.n	800314a <ADC_ConversionStop+0x10e>
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d105      	bne.n	8003150 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003144:	230c      	movs	r3, #12
 8003146:	617b      	str	r3, [r7, #20]
        break;
 8003148:	e005      	b.n	8003156 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800314a:	2308      	movs	r3, #8
 800314c:	617b      	str	r3, [r7, #20]
        break;
 800314e:	e002      	b.n	8003156 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003150:	2304      	movs	r3, #4
 8003152:	617b      	str	r3, [r7, #20]
        break;
 8003154:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003156:	f7fe fdb3 	bl	8001cc0 <HAL_GetTick>
 800315a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800315c:	e01b      	b.n	8003196 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800315e:	f7fe fdaf 	bl	8001cc0 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b05      	cmp	r3, #5
 800316a:	d914      	bls.n	8003196 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00d      	beq.n	8003196 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317e:	f043 0210 	orr.w	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e007      	b.n	80031a6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1dc      	bne.n	800315e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	a33fffff 	.word	0xa33fffff

080031b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe ff6b 	bl	80020a0 <LL_ADC_IsEnabled>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d176      	bne.n	80032be <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	4b3c      	ldr	r3, [pc, #240]	@ (80032c8 <ADC_Enable+0x114>)
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00d      	beq.n	80031fa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e2:	f043 0210 	orr.w	r2, r3, #16
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ee:	f043 0201 	orr.w	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e062      	b.n	80032c0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe ff26 	bl	8002050 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800320c:	d004      	beq.n	8003218 <ADC_Enable+0x64>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a2e      	ldr	r2, [pc, #184]	@ (80032cc <ADC_Enable+0x118>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d101      	bne.n	800321c <ADC_Enable+0x68>
 8003218:	4b2d      	ldr	r3, [pc, #180]	@ (80032d0 <ADC_Enable+0x11c>)
 800321a:	e000      	b.n	800321e <ADC_Enable+0x6a>
 800321c:	4b2d      	ldr	r3, [pc, #180]	@ (80032d4 <ADC_Enable+0x120>)
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fd80 	bl	8001d24 <LL_ADC_GetCommonPathInternalCh>
 8003224:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003226:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800322a:	2b00      	cmp	r3, #0
 800322c:	d013      	beq.n	8003256 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800322e:	4b2a      	ldr	r3, [pc, #168]	@ (80032d8 <ADC_Enable+0x124>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	099b      	lsrs	r3, r3, #6
 8003234:	4a29      	ldr	r2, [pc, #164]	@ (80032dc <ADC_Enable+0x128>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	099b      	lsrs	r3, r3, #6
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003248:	e002      	b.n	8003250 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3b01      	subs	r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f9      	bne.n	800324a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003256:	f7fe fd33 	bl	8001cc0 <HAL_GetTick>
 800325a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800325c:	e028      	b.n	80032b0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe ff1c 	bl	80020a0 <LL_ADC_IsEnabled>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d104      	bne.n	8003278 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe feec 	bl	8002050 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003278:	f7fe fd22 	bl	8001cc0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d914      	bls.n	80032b0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d00d      	beq.n	80032b0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003298:	f043 0210 	orr.w	r2, r3, #16
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a4:	f043 0201 	orr.w	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e007      	b.n	80032c0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d1cf      	bne.n	800325e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	8000003f 	.word	0x8000003f
 80032cc:	50000100 	.word	0x50000100
 80032d0:	50000300 	.word	0x50000300
 80032d4:	50000700 	.word	0x50000700
 80032d8:	20000000 	.word	0x20000000
 80032dc:	053e2d63 	.word	0x053e2d63

080032e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe feea 	bl	80020c6 <LL_ADC_IsDisableOngoing>
 80032f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe fed1 	bl	80020a0 <LL_ADC_IsEnabled>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d047      	beq.n	8003394 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d144      	bne.n	8003394 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 030d 	and.w	r3, r3, #13
 8003314:	2b01      	cmp	r3, #1
 8003316:	d10c      	bne.n	8003332 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe feab 	bl	8002078 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2203      	movs	r2, #3
 8003328:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800332a:	f7fe fcc9 	bl	8001cc0 <HAL_GetTick>
 800332e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003330:	e029      	b.n	8003386 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003336:	f043 0210 	orr.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e023      	b.n	8003396 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800334e:	f7fe fcb7 	bl	8001cc0 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d914      	bls.n	8003386 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00d      	beq.n	8003386 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336e:	f043 0210 	orr.w	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e007      	b.n	8003396 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1dc      	bne.n	800334e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d14b      	bne.n	8003450 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d021      	beq.n	8003416 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fd50 	bl	8001e7c <LL_ADC_REG_IsTriggerSourceSWStart>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d032      	beq.n	8003448 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d12b      	bne.n	8003448 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003400:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d11f      	bne.n	8003448 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340c:	f043 0201 	orr.w	r2, r3, #1
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003414:	e018      	b.n	8003448 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d111      	bne.n	8003448 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003428:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003440:	f043 0201 	orr.w	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f7fd ff4d 	bl	80012e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800344e:	e00e      	b.n	800346e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f7ff f9a2 	bl	80027a6 <HAL_ADC_ErrorCallback>
}
 8003462:	e004      	b.n	800346e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	4798      	blx	r3
}
 800346e:	bf00      	nop
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003482:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff f984 	bl	8002792 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b0:	f043 0204 	orr.w	r2, r3, #4
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff f974 	bl	80027a6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <LL_ADC_IsEnabled>:
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <LL_ADC_IsEnabled+0x18>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <LL_ADC_IsEnabled+0x1a>
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <LL_ADC_REG_IsConversionOngoing>:
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d101      	bne.n	8003504 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b0a1      	sub	sp, #132	@ 0x84
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800352e:	2302      	movs	r3, #2
 8003530:	e0e7      	b.n	8003702 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800353a:	2300      	movs	r3, #0
 800353c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800353e:	2300      	movs	r3, #0
 8003540:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800354a:	d102      	bne.n	8003552 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800354c:	4b6f      	ldr	r3, [pc, #444]	@ (800370c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	e009      	b.n	8003566 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a6e      	ldr	r2, [pc, #440]	@ (8003710 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d102      	bne.n	8003562 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800355c:	4b6d      	ldr	r3, [pc, #436]	@ (8003714 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	e001      	b.n	8003566 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003562:	2300      	movs	r3, #0
 8003564:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10b      	bne.n	8003584 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003570:	f043 0220 	orr.w	r2, r3, #32
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0be      	b.n	8003702 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ffb0 	bl	80034ec <LL_ADC_REG_IsConversionOngoing>
 800358c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff ffaa 	bl	80034ec <LL_ADC_REG_IsConversionOngoing>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 80a0 	bne.w	80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80035a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 809c 	bne.w	80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035b0:	d004      	beq.n	80035bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a55      	ldr	r2, [pc, #340]	@ (800370c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d101      	bne.n	80035c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80035bc:	4b56      	ldr	r3, [pc, #344]	@ (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80035be:	e000      	b.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80035c0:	4b56      	ldr	r3, [pc, #344]	@ (800371c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80035c2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d04b      	beq.n	8003664 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80035cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80035de:	035b      	lsls	r3, r3, #13
 80035e0:	430b      	orrs	r3, r1
 80035e2:	431a      	orrs	r2, r3
 80035e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035f0:	d004      	beq.n	80035fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a45      	ldr	r2, [pc, #276]	@ (800370c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d10f      	bne.n	800361c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80035fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003600:	f7ff ff61 	bl	80034c6 <LL_ADC_IsEnabled>
 8003604:	4604      	mov	r4, r0
 8003606:	4841      	ldr	r0, [pc, #260]	@ (800370c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003608:	f7ff ff5d 	bl	80034c6 <LL_ADC_IsEnabled>
 800360c:	4603      	mov	r3, r0
 800360e:	4323      	orrs	r3, r4
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	e012      	b.n	8003642 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800361c:	483c      	ldr	r0, [pc, #240]	@ (8003710 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800361e:	f7ff ff52 	bl	80034c6 <LL_ADC_IsEnabled>
 8003622:	4604      	mov	r4, r0
 8003624:	483b      	ldr	r0, [pc, #236]	@ (8003714 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003626:	f7ff ff4e 	bl	80034c6 <LL_ADC_IsEnabled>
 800362a:	4603      	mov	r3, r0
 800362c:	431c      	orrs	r4, r3
 800362e:	483c      	ldr	r0, [pc, #240]	@ (8003720 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003630:	f7ff ff49 	bl	80034c6 <LL_ADC_IsEnabled>
 8003634:	4603      	mov	r3, r0
 8003636:	4323      	orrs	r3, r4
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d056      	beq.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800364e:	f023 030f 	bic.w	r3, r3, #15
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	6811      	ldr	r1, [r2, #0]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	6892      	ldr	r2, [r2, #8]
 800365a:	430a      	orrs	r2, r1
 800365c:	431a      	orrs	r2, r3
 800365e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003660:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003662:	e047      	b.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003664:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800366c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800366e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003678:	d004      	beq.n	8003684 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a23      	ldr	r2, [pc, #140]	@ (800370c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d10f      	bne.n	80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003684:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003688:	f7ff ff1d 	bl	80034c6 <LL_ADC_IsEnabled>
 800368c:	4604      	mov	r4, r0
 800368e:	481f      	ldr	r0, [pc, #124]	@ (800370c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003690:	f7ff ff19 	bl	80034c6 <LL_ADC_IsEnabled>
 8003694:	4603      	mov	r3, r0
 8003696:	4323      	orrs	r3, r4
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e012      	b.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80036a4:	481a      	ldr	r0, [pc, #104]	@ (8003710 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80036a6:	f7ff ff0e 	bl	80034c6 <LL_ADC_IsEnabled>
 80036aa:	4604      	mov	r4, r0
 80036ac:	4819      	ldr	r0, [pc, #100]	@ (8003714 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80036ae:	f7ff ff0a 	bl	80034c6 <LL_ADC_IsEnabled>
 80036b2:	4603      	mov	r3, r0
 80036b4:	431c      	orrs	r4, r3
 80036b6:	481a      	ldr	r0, [pc, #104]	@ (8003720 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80036b8:	f7ff ff05 	bl	80034c6 <LL_ADC_IsEnabled>
 80036bc:	4603      	mov	r3, r0
 80036be:	4323      	orrs	r3, r4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d012      	beq.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80036d6:	f023 030f 	bic.w	r3, r3, #15
 80036da:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80036dc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036de:	e009      	b.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80036f2:	e000      	b.n	80036f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003702:	4618      	mov	r0, r3
 8003704:	3784      	adds	r7, #132	@ 0x84
 8003706:	46bd      	mov	sp, r7
 8003708:	bd90      	pop	{r4, r7, pc}
 800370a:	bf00      	nop
 800370c:	50000100 	.word	0x50000100
 8003710:	50000400 	.word	0x50000400
 8003714:	50000500 	.word	0x50000500
 8003718:	50000300 	.word	0x50000300
 800371c:	50000700 	.word	0x50000700
 8003720:	50000600 	.word	0x50000600

08003724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003734:	4b0c      	ldr	r3, [pc, #48]	@ (8003768 <__NVIC_SetPriorityGrouping+0x44>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003740:	4013      	ands	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800374c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003756:	4a04      	ldr	r2, [pc, #16]	@ (8003768 <__NVIC_SetPriorityGrouping+0x44>)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	60d3      	str	r3, [r2, #12]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003770:	4b04      	ldr	r3, [pc, #16]	@ (8003784 <__NVIC_GetPriorityGrouping+0x18>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	f003 0307 	and.w	r3, r3, #7
}
 800377a:	4618      	mov	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	2b00      	cmp	r3, #0
 8003798:	db0b      	blt.n	80037b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	f003 021f 	and.w	r2, r3, #31
 80037a0:	4907      	ldr	r1, [pc, #28]	@ (80037c0 <__NVIC_EnableIRQ+0x38>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	2001      	movs	r0, #1
 80037aa:	fa00 f202 	lsl.w	r2, r0, r2
 80037ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	e000e100 	.word	0xe000e100

080037c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	6039      	str	r1, [r7, #0]
 80037ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	db0a      	blt.n	80037ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	490c      	ldr	r1, [pc, #48]	@ (8003810 <__NVIC_SetPriority+0x4c>)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	0112      	lsls	r2, r2, #4
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	440b      	add	r3, r1
 80037e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037ec:	e00a      	b.n	8003804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4908      	ldr	r1, [pc, #32]	@ (8003814 <__NVIC_SetPriority+0x50>)
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	3b04      	subs	r3, #4
 80037fc:	0112      	lsls	r2, r2, #4
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	440b      	add	r3, r1
 8003802:	761a      	strb	r2, [r3, #24]
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000e100 	.word	0xe000e100
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003818:	b480      	push	{r7}
 800381a:	b089      	sub	sp, #36	@ 0x24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f1c3 0307 	rsb	r3, r3, #7
 8003832:	2b04      	cmp	r3, #4
 8003834:	bf28      	it	cs
 8003836:	2304      	movcs	r3, #4
 8003838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3304      	adds	r3, #4
 800383e:	2b06      	cmp	r3, #6
 8003840:	d902      	bls.n	8003848 <NVIC_EncodePriority+0x30>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3b03      	subs	r3, #3
 8003846:	e000      	b.n	800384a <NVIC_EncodePriority+0x32>
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800384c:	f04f 32ff 	mov.w	r2, #4294967295
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43da      	mvns	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	401a      	ands	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003860:	f04f 31ff 	mov.w	r1, #4294967295
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	fa01 f303 	lsl.w	r3, r1, r3
 800386a:	43d9      	mvns	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	4313      	orrs	r3, r2
         );
}
 8003872:	4618      	mov	r0, r3
 8003874:	3724      	adds	r7, #36	@ 0x24
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3b01      	subs	r3, #1
 800388c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003890:	d301      	bcc.n	8003896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003892:	2301      	movs	r3, #1
 8003894:	e00f      	b.n	80038b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003896:	4a0a      	ldr	r2, [pc, #40]	@ (80038c0 <SysTick_Config+0x40>)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3b01      	subs	r3, #1
 800389c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800389e:	210f      	movs	r1, #15
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	f7ff ff8e 	bl	80037c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <SysTick_Config+0x40>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ae:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <SysTick_Config+0x40>)
 80038b0:	2207      	movs	r2, #7
 80038b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	e000e010 	.word	0xe000e010

080038c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff ff29 	bl	8003724 <__NVIC_SetPriorityGrouping>
}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	4603      	mov	r3, r0
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038e8:	f7ff ff40 	bl	800376c <__NVIC_GetPriorityGrouping>
 80038ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	6978      	ldr	r0, [r7, #20]
 80038f4:	f7ff ff90 	bl	8003818 <NVIC_EncodePriority>
 80038f8:	4602      	mov	r2, r0
 80038fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff5f 	bl	80037c4 <__NVIC_SetPriority>
}
 8003906:	bf00      	nop
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	4603      	mov	r3, r0
 8003916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ff33 	bl	8003788 <__NVIC_EnableIRQ>
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ffa4 	bl	8003880 <SysTick_Config>
 8003938:	4603      	mov	r3, r0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e08d      	b.n	8003a72 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	4b47      	ldr	r3, [pc, #284]	@ (8003a7c <HAL_DMA_Init+0x138>)
 800395e:	429a      	cmp	r2, r3
 8003960:	d80f      	bhi.n	8003982 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	4b45      	ldr	r3, [pc, #276]	@ (8003a80 <HAL_DMA_Init+0x13c>)
 800396a:	4413      	add	r3, r2
 800396c:	4a45      	ldr	r2, [pc, #276]	@ (8003a84 <HAL_DMA_Init+0x140>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	091b      	lsrs	r3, r3, #4
 8003974:	009a      	lsls	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a42      	ldr	r2, [pc, #264]	@ (8003a88 <HAL_DMA_Init+0x144>)
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003980:	e00e      	b.n	80039a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	4b40      	ldr	r3, [pc, #256]	@ (8003a8c <HAL_DMA_Init+0x148>)
 800398a:	4413      	add	r3, r2
 800398c:	4a3d      	ldr	r2, [pc, #244]	@ (8003a84 <HAL_DMA_Init+0x140>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	009a      	lsls	r2, r3, #2
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a90 <HAL_DMA_Init+0x14c>)
 800399e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80039b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fa10 	bl	8003e18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a00:	d102      	bne.n	8003a08 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a1c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d010      	beq.n	8003a48 <HAL_DMA_Init+0x104>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d80c      	bhi.n	8003a48 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fa30 	bl	8003e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a44:	605a      	str	r2, [r3, #4]
 8003a46:	e008      	b.n	8003a5a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40020407 	.word	0x40020407
 8003a80:	bffdfff8 	.word	0xbffdfff8
 8003a84:	cccccccd 	.word	0xcccccccd
 8003a88:	40020000 	.word	0x40020000
 8003a8c:	bffdfbf8 	.word	0xbffdfbf8
 8003a90:	40020400 	.word	0x40020400

08003a94 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_DMA_Start_IT+0x20>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e066      	b.n	8003b82 <HAL_DMA_Start_IT+0xee>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d155      	bne.n	8003b74 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f954 	bl	8003d9a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d008      	beq.n	8003b0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 020e 	orr.w	r2, r2, #14
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	e00f      	b.n	8003b2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0204 	bic.w	r2, r2, #4
 8003b1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 020a 	orr.w	r2, r2, #10
 8003b2a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b48:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b60:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	e005      	b.n	8003b80 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b085      	sub	sp, #20
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d005      	beq.n	8003bae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
 8003bac:	e037      	b.n	8003c1e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 020e 	bic.w	r2, r2, #14
 8003bbc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bcc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	f003 021f 	and.w	r2, r3, #31
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	2101      	movs	r1, #1
 8003bec:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003bfa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00c      	beq.n	8003c1e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c12:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c1c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d026      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x7a>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d021      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d107      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0204 	bic.w	r2, r2, #4
 8003c8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c94:	f003 021f 	and.w	r2, r3, #31
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9c:	2104      	movs	r1, #4
 8003c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d071      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003cb4:	e06c      	b.n	8003d90 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d02e      	beq.n	8003d28 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d029      	beq.n	8003d28 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10b      	bne.n	8003cfa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 020a 	bic.w	r2, r2, #10
 8003cf0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfe:	f003 021f 	and.w	r2, r3, #31
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	2102      	movs	r1, #2
 8003d08:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d038      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d26:	e033      	b.n	8003d90 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	2208      	movs	r2, #8
 8003d32:	409a      	lsls	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d02a      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d025      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 020e 	bic.w	r2, r2, #14
 8003d54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5a:	f003 021f 	and.w	r2, r3, #31
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	2101      	movs	r1, #1
 8003d64:	fa01 f202 	lsl.w	r2, r1, r2
 8003d68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d004      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
}
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003db0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d004      	beq.n	8003dc4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003dc2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc8:	f003 021f 	and.w	r2, r3, #31
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b10      	cmp	r3, #16
 8003de6:	d108      	bne.n	8003dfa <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003df8:	e007      	b.n	8003e0a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	60da      	str	r2, [r3, #12]
}
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	4b16      	ldr	r3, [pc, #88]	@ (8003e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d802      	bhi.n	8003e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003e2c:	4b15      	ldr	r3, [pc, #84]	@ (8003e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	e001      	b.n	8003e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003e32:	4b15      	ldr	r3, [pc, #84]	@ (8003e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e34:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	3b08      	subs	r3, #8
 8003e42:	4a12      	ldr	r2, [pc, #72]	@ (8003e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	009a      	lsls	r2, r3, #2
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a0b      	ldr	r2, [pc, #44]	@ (8003e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e72:	bf00      	nop
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40020407 	.word	0x40020407
 8003e84:	40020800 	.word	0x40020800
 8003e88:	40020820 	.word	0x40020820
 8003e8c:	cccccccd 	.word	0xcccccccd
 8003e90:	40020880 	.word	0x40020880

08003e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	461a      	mov	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a08      	ldr	r2, [pc, #32]	@ (8003ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003eb6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	1000823f 	.word	0x1000823f
 8003ed8:	40020940 	.word	0x40020940

08003edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003eea:	e15a      	b.n	80041a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 814c 	beq.w	800419c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d005      	beq.n	8003f1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d130      	bne.n	8003f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	2203      	movs	r2, #3
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4013      	ands	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f52:	2201      	movs	r2, #1
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	f003 0201 	and.w	r2, r3, #1
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d017      	beq.n	8003fba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	2203      	movs	r2, #3
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d123      	bne.n	800400e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	08da      	lsrs	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3208      	adds	r2, #8
 8003fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	220f      	movs	r2, #15
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	08da      	lsrs	r2, r3, #3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3208      	adds	r2, #8
 8004008:	6939      	ldr	r1, [r7, #16]
 800400a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	2203      	movs	r2, #3
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4013      	ands	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 0203 	and.w	r2, r3, #3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80a6 	beq.w	800419c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004050:	4b5b      	ldr	r3, [pc, #364]	@ (80041c0 <HAL_GPIO_Init+0x2e4>)
 8004052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004054:	4a5a      	ldr	r2, [pc, #360]	@ (80041c0 <HAL_GPIO_Init+0x2e4>)
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	6613      	str	r3, [r2, #96]	@ 0x60
 800405c:	4b58      	ldr	r3, [pc, #352]	@ (80041c0 <HAL_GPIO_Init+0x2e4>)
 800405e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004068:	4a56      	ldr	r2, [pc, #344]	@ (80041c4 <HAL_GPIO_Init+0x2e8>)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	089b      	lsrs	r3, r3, #2
 800406e:	3302      	adds	r3, #2
 8004070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	220f      	movs	r2, #15
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4013      	ands	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004092:	d01f      	beq.n	80040d4 <HAL_GPIO_Init+0x1f8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a4c      	ldr	r2, [pc, #304]	@ (80041c8 <HAL_GPIO_Init+0x2ec>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d019      	beq.n	80040d0 <HAL_GPIO_Init+0x1f4>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a4b      	ldr	r2, [pc, #300]	@ (80041cc <HAL_GPIO_Init+0x2f0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d013      	beq.n	80040cc <HAL_GPIO_Init+0x1f0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a4a      	ldr	r2, [pc, #296]	@ (80041d0 <HAL_GPIO_Init+0x2f4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00d      	beq.n	80040c8 <HAL_GPIO_Init+0x1ec>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a49      	ldr	r2, [pc, #292]	@ (80041d4 <HAL_GPIO_Init+0x2f8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <HAL_GPIO_Init+0x1e8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a48      	ldr	r2, [pc, #288]	@ (80041d8 <HAL_GPIO_Init+0x2fc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d101      	bne.n	80040c0 <HAL_GPIO_Init+0x1e4>
 80040bc:	2305      	movs	r3, #5
 80040be:	e00a      	b.n	80040d6 <HAL_GPIO_Init+0x1fa>
 80040c0:	2306      	movs	r3, #6
 80040c2:	e008      	b.n	80040d6 <HAL_GPIO_Init+0x1fa>
 80040c4:	2304      	movs	r3, #4
 80040c6:	e006      	b.n	80040d6 <HAL_GPIO_Init+0x1fa>
 80040c8:	2303      	movs	r3, #3
 80040ca:	e004      	b.n	80040d6 <HAL_GPIO_Init+0x1fa>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e002      	b.n	80040d6 <HAL_GPIO_Init+0x1fa>
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <HAL_GPIO_Init+0x1fa>
 80040d4:	2300      	movs	r3, #0
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	f002 0203 	and.w	r2, r2, #3
 80040dc:	0092      	lsls	r2, r2, #2
 80040de:	4093      	lsls	r3, r2
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040e6:	4937      	ldr	r1, [pc, #220]	@ (80041c4 <HAL_GPIO_Init+0x2e8>)
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	089b      	lsrs	r3, r3, #2
 80040ec:	3302      	adds	r3, #2
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040f4:	4b39      	ldr	r3, [pc, #228]	@ (80041dc <HAL_GPIO_Init+0x300>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4013      	ands	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004118:	4a30      	ldr	r2, [pc, #192]	@ (80041dc <HAL_GPIO_Init+0x300>)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800411e:	4b2f      	ldr	r3, [pc, #188]	@ (80041dc <HAL_GPIO_Init+0x300>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	43db      	mvns	r3, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004142:	4a26      	ldr	r2, [pc, #152]	@ (80041dc <HAL_GPIO_Init+0x300>)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004148:	4b24      	ldr	r3, [pc, #144]	@ (80041dc <HAL_GPIO_Init+0x300>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	43db      	mvns	r3, r3
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4013      	ands	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800416c:	4a1b      	ldr	r2, [pc, #108]	@ (80041dc <HAL_GPIO_Init+0x300>)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004172:	4b1a      	ldr	r3, [pc, #104]	@ (80041dc <HAL_GPIO_Init+0x300>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	43db      	mvns	r3, r3
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4013      	ands	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004196:	4a11      	ldr	r2, [pc, #68]	@ (80041dc <HAL_GPIO_Init+0x300>)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	3301      	adds	r3, #1
 80041a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f47f ae9d 	bne.w	8003eec <HAL_GPIO_Init+0x10>
  }
}
 80041b2:	bf00      	nop
 80041b4:	bf00      	nop
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40010000 	.word	0x40010000
 80041c8:	48000400 	.word	0x48000400
 80041cc:	48000800 	.word	0x48000800
 80041d0:	48000c00 	.word	0x48000c00
 80041d4:	48001000 	.word	0x48001000
 80041d8:	48001400 	.word	0x48001400
 80041dc:	40010400 	.word	0x40010400

080041e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d141      	bne.n	8004272 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ee:	4b4b      	ldr	r3, [pc, #300]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041fa:	d131      	bne.n	8004260 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041fc:	4b47      	ldr	r3, [pc, #284]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004202:	4a46      	ldr	r2, [pc, #280]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004208:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800420c:	4b43      	ldr	r3, [pc, #268]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004214:	4a41      	ldr	r2, [pc, #260]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800421a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800421c:	4b40      	ldr	r3, [pc, #256]	@ (8004320 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2232      	movs	r2, #50	@ 0x32
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	4a3f      	ldr	r2, [pc, #252]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004228:	fba2 2303 	umull	r2, r3, r2, r3
 800422c:	0c9b      	lsrs	r3, r3, #18
 800422e:	3301      	adds	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004232:	e002      	b.n	800423a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3b01      	subs	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800423a:	4b38      	ldr	r3, [pc, #224]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004246:	d102      	bne.n	800424e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f2      	bne.n	8004234 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800424e:	4b33      	ldr	r3, [pc, #204]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800425a:	d158      	bne.n	800430e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e057      	b.n	8004310 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004260:	4b2e      	ldr	r3, [pc, #184]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004266:	4a2d      	ldr	r2, [pc, #180]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800426c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004270:	e04d      	b.n	800430e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004278:	d141      	bne.n	80042fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800427a:	4b28      	ldr	r3, [pc, #160]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004286:	d131      	bne.n	80042ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004288:	4b24      	ldr	r3, [pc, #144]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800428a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800428e:	4a23      	ldr	r2, [pc, #140]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004294:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004298:	4b20      	ldr	r3, [pc, #128]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042a0:	4a1e      	ldr	r2, [pc, #120]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004320 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2232      	movs	r2, #50	@ 0x32
 80042ae:	fb02 f303 	mul.w	r3, r2, r3
 80042b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	0c9b      	lsrs	r3, r3, #18
 80042ba:	3301      	adds	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042be:	e002      	b.n	80042c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042c6:	4b15      	ldr	r3, [pc, #84]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042d2:	d102      	bne.n	80042da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f2      	bne.n	80042c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042da:	4b10      	ldr	r3, [pc, #64]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042e6:	d112      	bne.n	800430e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e011      	b.n	8004310 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042ec:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042f2:	4a0a      	ldr	r2, [pc, #40]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80042fc:	e007      	b.n	800430e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042fe:	4b07      	ldr	r3, [pc, #28]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004306:	4a05      	ldr	r2, [pc, #20]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004308:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800430c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	40007000 	.word	0x40007000
 8004320:	20000000 	.word	0x20000000
 8004324:	431bde83 	.word	0x431bde83

08004328 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800432c:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4a04      	ldr	r2, [pc, #16]	@ (8004344 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004332:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004336:	6093      	str	r3, [r2, #8]
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40007000 	.word	0x40007000

08004348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e2fe      	b.n	8004958 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d075      	beq.n	8004452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004366:	4b97      	ldr	r3, [pc, #604]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004370:	4b94      	ldr	r3, [pc, #592]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2b0c      	cmp	r3, #12
 800437e:	d102      	bne.n	8004386 <HAL_RCC_OscConfig+0x3e>
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2b03      	cmp	r3, #3
 8004384:	d002      	beq.n	800438c <HAL_RCC_OscConfig+0x44>
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d10b      	bne.n	80043a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438c:	4b8d      	ldr	r3, [pc, #564]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d05b      	beq.n	8004450 <HAL_RCC_OscConfig+0x108>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d157      	bne.n	8004450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e2d9      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ac:	d106      	bne.n	80043bc <HAL_RCC_OscConfig+0x74>
 80043ae:	4b85      	ldr	r3, [pc, #532]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a84      	ldr	r2, [pc, #528]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e01d      	b.n	80043f8 <HAL_RCC_OscConfig+0xb0>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCC_OscConfig+0x98>
 80043c6:	4b7f      	ldr	r3, [pc, #508]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a7e      	ldr	r2, [pc, #504]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	4b7c      	ldr	r3, [pc, #496]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a7b      	ldr	r2, [pc, #492]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	e00b      	b.n	80043f8 <HAL_RCC_OscConfig+0xb0>
 80043e0:	4b78      	ldr	r3, [pc, #480]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a77      	ldr	r2, [pc, #476]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	4b75      	ldr	r3, [pc, #468]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a74      	ldr	r2, [pc, #464]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d013      	beq.n	8004428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fd fc5e 	bl	8001cc0 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004408:	f7fd fc5a 	bl	8001cc0 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	@ 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e29e      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800441a:	4b6a      	ldr	r3, [pc, #424]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0xc0>
 8004426:	e014      	b.n	8004452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fd fc4a 	bl	8001cc0 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004430:	f7fd fc46 	bl	8001cc0 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	@ 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e28a      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004442:	4b60      	ldr	r3, [pc, #384]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0xe8>
 800444e:	e000      	b.n	8004452 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d075      	beq.n	800454a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445e:	4b59      	ldr	r3, [pc, #356]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004468:	4b56      	ldr	r3, [pc, #344]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b0c      	cmp	r3, #12
 8004476:	d102      	bne.n	800447e <HAL_RCC_OscConfig+0x136>
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d002      	beq.n	8004484 <HAL_RCC_OscConfig+0x13c>
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b04      	cmp	r3, #4
 8004482:	d11f      	bne.n	80044c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004484:	4b4f      	ldr	r3, [pc, #316]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_RCC_OscConfig+0x154>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e25d      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449c:	4b49      	ldr	r3, [pc, #292]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	061b      	lsls	r3, r3, #24
 80044aa:	4946      	ldr	r1, [pc, #280]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044b0:	4b45      	ldr	r3, [pc, #276]	@ (80045c8 <HAL_RCC_OscConfig+0x280>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fd fbb7 	bl	8001c28 <HAL_InitTick>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d043      	beq.n	8004548 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e249      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d023      	beq.n	8004514 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044cc:	4b3d      	ldr	r3, [pc, #244]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a3c      	ldr	r2, [pc, #240]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80044d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fd fbf2 	bl	8001cc0 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e0:	f7fd fbee 	bl	8001cc0 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e232      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f2:	4b34      	ldr	r3, [pc, #208]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fe:	4b31      	ldr	r3, [pc, #196]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	061b      	lsls	r3, r3, #24
 800450c:	492d      	ldr	r1, [pc, #180]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]
 8004512:	e01a      	b.n	800454a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004514:	4b2b      	ldr	r3, [pc, #172]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2a      	ldr	r2, [pc, #168]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800451a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800451e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd fbce 	bl	8001cc0 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004528:	f7fd fbca 	bl	8001cc0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e20e      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800453a:	4b22      	ldr	r3, [pc, #136]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x1e0>
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004548:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d041      	beq.n	80045da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01c      	beq.n	8004598 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800455e:	4b19      	ldr	r3, [pc, #100]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004564:	4a17      	ldr	r2, [pc, #92]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456e:	f7fd fba7 	bl	8001cc0 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004576:	f7fd fba3 	bl	8001cc0 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e1e7      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004588:	4b0e      	ldr	r3, [pc, #56]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800458a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0ef      	beq.n	8004576 <HAL_RCC_OscConfig+0x22e>
 8004596:	e020      	b.n	80045da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004598:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800459a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800459e:	4a09      	ldr	r2, [pc, #36]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fd fb8a 	bl	8001cc0 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045ae:	e00d      	b.n	80045cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b0:	f7fd fb86 	bl	8001cc0 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d906      	bls.n	80045cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e1ca      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
 80045c8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045cc:	4b8c      	ldr	r3, [pc, #560]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80045ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1ea      	bne.n	80045b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80a6 	beq.w	8004734 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e8:	2300      	movs	r3, #0
 80045ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045ec:	4b84      	ldr	r3, [pc, #528]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80045ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_OscConfig+0x2b4>
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0x2b6>
 80045fc:	2300      	movs	r3, #0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00d      	beq.n	800461e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004602:	4b7f      	ldr	r3, [pc, #508]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004606:	4a7e      	ldr	r2, [pc, #504]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800460c:	6593      	str	r3, [r2, #88]	@ 0x58
 800460e:	4b7c      	ldr	r3, [pc, #496]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800461a:	2301      	movs	r3, #1
 800461c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800461e:	4b79      	ldr	r3, [pc, #484]	@ (8004804 <HAL_RCC_OscConfig+0x4bc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d118      	bne.n	800465c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800462a:	4b76      	ldr	r3, [pc, #472]	@ (8004804 <HAL_RCC_OscConfig+0x4bc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a75      	ldr	r2, [pc, #468]	@ (8004804 <HAL_RCC_OscConfig+0x4bc>)
 8004630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004636:	f7fd fb43 	bl	8001cc0 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463e:	f7fd fb3f 	bl	8001cc0 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e183      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004650:	4b6c      	ldr	r3, [pc, #432]	@ (8004804 <HAL_RCC_OscConfig+0x4bc>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d108      	bne.n	8004676 <HAL_RCC_OscConfig+0x32e>
 8004664:	4b66      	ldr	r3, [pc, #408]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800466a:	4a65      	ldr	r2, [pc, #404]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004674:	e024      	b.n	80046c0 <HAL_RCC_OscConfig+0x378>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b05      	cmp	r3, #5
 800467c:	d110      	bne.n	80046a0 <HAL_RCC_OscConfig+0x358>
 800467e:	4b60      	ldr	r3, [pc, #384]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004684:	4a5e      	ldr	r2, [pc, #376]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004686:	f043 0304 	orr.w	r3, r3, #4
 800468a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800468e:	4b5c      	ldr	r3, [pc, #368]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004694:	4a5a      	ldr	r2, [pc, #360]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800469e:	e00f      	b.n	80046c0 <HAL_RCC_OscConfig+0x378>
 80046a0:	4b57      	ldr	r3, [pc, #348]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a6:	4a56      	ldr	r2, [pc, #344]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046b0:	4b53      	ldr	r3, [pc, #332]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b6:	4a52      	ldr	r2, [pc, #328]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80046b8:	f023 0304 	bic.w	r3, r3, #4
 80046bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d016      	beq.n	80046f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fd fafa 	bl	8001cc0 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d0:	f7fd faf6 	bl	8001cc0 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e138      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e6:	4b46      	ldr	r3, [pc, #280]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ed      	beq.n	80046d0 <HAL_RCC_OscConfig+0x388>
 80046f4:	e015      	b.n	8004722 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f6:	f7fd fae3 	bl	8001cc0 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046fc:	e00a      	b.n	8004714 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fe:	f7fd fadf 	bl	8001cc0 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800470c:	4293      	cmp	r3, r2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e121      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004714:	4b3a      	ldr	r3, [pc, #232]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1ed      	bne.n	80046fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004722:	7ffb      	ldrb	r3, [r7, #31]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d105      	bne.n	8004734 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004728:	4b35      	ldr	r3, [pc, #212]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 800472a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472c:	4a34      	ldr	r2, [pc, #208]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 800472e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004732:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	2b00      	cmp	r3, #0
 800473e:	d03c      	beq.n	80047ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01c      	beq.n	8004782 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004748:	4b2d      	ldr	r3, [pc, #180]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 800474a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800474e:	4a2c      	ldr	r2, [pc, #176]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7fd fab2 	bl	8001cc0 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004760:	f7fd faae 	bl	8001cc0 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e0f2      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004772:	4b23      	ldr	r3, [pc, #140]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004774:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0ef      	beq.n	8004760 <HAL_RCC_OscConfig+0x418>
 8004780:	e01b      	b.n	80047ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004782:	4b1f      	ldr	r3, [pc, #124]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004784:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004788:	4a1d      	ldr	r2, [pc, #116]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 800478a:	f023 0301 	bic.w	r3, r3, #1
 800478e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004792:	f7fd fa95 	bl	8001cc0 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800479a:	f7fd fa91 	bl	8001cc0 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e0d5      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047ac:	4b14      	ldr	r3, [pc, #80]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80047ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1ef      	bne.n	800479a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 80c9 	beq.w	8004956 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 030c 	and.w	r3, r3, #12
 80047cc:	2b0c      	cmp	r3, #12
 80047ce:	f000 8083 	beq.w	80048d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d15e      	bne.n	8004898 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047da:	4b09      	ldr	r3, [pc, #36]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a08      	ldr	r2, [pc, #32]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80047e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7fd fa6b 	bl	8001cc0 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ec:	e00c      	b.n	8004808 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ee:	f7fd fa67 	bl	8001cc0 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d905      	bls.n	8004808 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e0ab      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
 8004800:	40021000 	.word	0x40021000
 8004804:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004808:	4b55      	ldr	r3, [pc, #340]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1ec      	bne.n	80047ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004814:	4b52      	ldr	r3, [pc, #328]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	4b52      	ldr	r3, [pc, #328]	@ (8004964 <HAL_RCC_OscConfig+0x61c>)
 800481a:	4013      	ands	r3, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6a11      	ldr	r1, [r2, #32]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004824:	3a01      	subs	r2, #1
 8004826:	0112      	lsls	r2, r2, #4
 8004828:	4311      	orrs	r1, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800482e:	0212      	lsls	r2, r2, #8
 8004830:	4311      	orrs	r1, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004836:	0852      	lsrs	r2, r2, #1
 8004838:	3a01      	subs	r2, #1
 800483a:	0552      	lsls	r2, r2, #21
 800483c:	4311      	orrs	r1, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004842:	0852      	lsrs	r2, r2, #1
 8004844:	3a01      	subs	r2, #1
 8004846:	0652      	lsls	r2, r2, #25
 8004848:	4311      	orrs	r1, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800484e:	06d2      	lsls	r2, r2, #27
 8004850:	430a      	orrs	r2, r1
 8004852:	4943      	ldr	r1, [pc, #268]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 8004854:	4313      	orrs	r3, r2
 8004856:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004858:	4b41      	ldr	r3, [pc, #260]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a40      	ldr	r2, [pc, #256]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 800485e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004862:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004864:	4b3e      	ldr	r3, [pc, #248]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4a3d      	ldr	r2, [pc, #244]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 800486a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800486e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fd fa26 	bl	8001cc0 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004878:	f7fd fa22 	bl	8001cc0 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e066      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800488a:	4b35      	ldr	r3, [pc, #212]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x530>
 8004896:	e05e      	b.n	8004956 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004898:	4b31      	ldr	r3, [pc, #196]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a30      	ldr	r2, [pc, #192]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 800489e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a4:	f7fd fa0c 	bl	8001cc0 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ac:	f7fd fa08 	bl	8001cc0 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e04c      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048be:	4b28      	ldr	r3, [pc, #160]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80048ca:	4b25      	ldr	r3, [pc, #148]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	4924      	ldr	r1, [pc, #144]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 80048d0:	4b25      	ldr	r3, [pc, #148]	@ (8004968 <HAL_RCC_OscConfig+0x620>)
 80048d2:	4013      	ands	r3, r2
 80048d4:	60cb      	str	r3, [r1, #12]
 80048d6:	e03e      	b.n	8004956 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e039      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80048e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f003 0203 	and.w	r2, r3, #3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d12c      	bne.n	8004952 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004902:	3b01      	subs	r3, #1
 8004904:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d123      	bne.n	8004952 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004916:	429a      	cmp	r2, r3
 8004918:	d11b      	bne.n	8004952 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004926:	429a      	cmp	r2, r3
 8004928:	d113      	bne.n	8004952 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004934:	085b      	lsrs	r3, r3, #1
 8004936:	3b01      	subs	r3, #1
 8004938:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800493a:	429a      	cmp	r2, r3
 800493c:	d109      	bne.n	8004952 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	3b01      	subs	r3, #1
 800494c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d001      	beq.n	8004956 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3720      	adds	r7, #32
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40021000 	.word	0x40021000
 8004964:	019f800c 	.word	0x019f800c
 8004968:	feeefffc 	.word	0xfeeefffc

0800496c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e11e      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004984:	4b91      	ldr	r3, [pc, #580]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d910      	bls.n	80049b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b8e      	ldr	r3, [pc, #568]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 020f 	bic.w	r2, r3, #15
 800499a:	498c      	ldr	r1, [pc, #560]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	4b8a      	ldr	r3, [pc, #552]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e106      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d073      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d129      	bne.n	8004a1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c8:	4b81      	ldr	r3, [pc, #516]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0f4      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80049d8:	f000 f99e 	bl	8004d18 <RCC_GetSysClockFreqFromPLLSource>
 80049dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4a7c      	ldr	r2, [pc, #496]	@ (8004bd4 <HAL_RCC_ClockConfig+0x268>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d93f      	bls.n	8004a66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049e6:	4b7a      	ldr	r3, [pc, #488]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d033      	beq.n	8004a66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d12f      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a06:	4b72      	ldr	r3, [pc, #456]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a0e:	4a70      	ldr	r2, [pc, #448]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a16:	2380      	movs	r3, #128	@ 0x80
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	e024      	b.n	8004a66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d107      	bne.n	8004a34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a24:	4b6a      	ldr	r3, [pc, #424]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d109      	bne.n	8004a44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0c6      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a34:	4b66      	ldr	r3, [pc, #408]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0be      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a44:	f000 f8ce 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4a61      	ldr	r2, [pc, #388]	@ (8004bd4 <HAL_RCC_ClockConfig+0x268>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d909      	bls.n	8004a66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a52:	4b5f      	ldr	r3, [pc, #380]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a5a:	4a5d      	ldr	r2, [pc, #372]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a62:	2380      	movs	r3, #128	@ 0x80
 8004a64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a66:	4b5a      	ldr	r3, [pc, #360]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f023 0203 	bic.w	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4957      	ldr	r1, [pc, #348]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a78:	f7fd f922 	bl	8001cc0 <HAL_GetTick>
 8004a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a80:	f7fd f91e 	bl	8001cc0 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e095      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a96:	4b4e      	ldr	r3, [pc, #312]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 020c 	and.w	r2, r3, #12
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d1eb      	bne.n	8004a80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d023      	beq.n	8004afc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ac0:	4b43      	ldr	r3, [pc, #268]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	4a42      	ldr	r2, [pc, #264]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004ac6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004aca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004ad8:	4b3d      	ldr	r3, [pc, #244]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ae0:	4a3b      	ldr	r2, [pc, #236]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004ae2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ae6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae8:	4b39      	ldr	r3, [pc, #228]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4936      	ldr	r1, [pc, #216]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2b80      	cmp	r3, #128	@ 0x80
 8004b00:	d105      	bne.n	8004b0e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b02:	4b33      	ldr	r3, [pc, #204]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	4a32      	ldr	r2, [pc, #200]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004b08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b0c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d21d      	bcs.n	8004b58 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f023 020f 	bic.w	r2, r3, #15
 8004b24:	4929      	ldr	r1, [pc, #164]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b2c:	f7fd f8c8 	bl	8001cc0 <HAL_GetTick>
 8004b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b34:	f7fd f8c4 	bl	8001cc0 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e03b      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b20      	ldr	r3, [pc, #128]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d1ed      	bne.n	8004b34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b64:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4917      	ldr	r1, [pc, #92]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b82:	4b13      	ldr	r3, [pc, #76]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	490f      	ldr	r1, [pc, #60]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b96:	f000 f825 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	490c      	ldr	r1, [pc, #48]	@ (8004bd8 <HAL_RCC_ClockConfig+0x26c>)
 8004ba8:	5ccb      	ldrb	r3, [r1, r3]
 8004baa:	f003 031f 	and.w	r3, r3, #31
 8004bae:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004bdc <HAL_RCC_ClockConfig+0x270>)
 8004bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004be0 <HAL_RCC_ClockConfig+0x274>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fd f834 	bl	8001c28 <HAL_InitTick>
 8004bc0:	4603      	mov	r3, r0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40022000 	.word	0x40022000
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	04c4b400 	.word	0x04c4b400
 8004bd8:	08009e04 	.word	0x08009e04
 8004bdc:	20000000 	.word	0x20000000
 8004be0:	20000004 	.word	0x20000004

08004be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004bea:	4b2c      	ldr	r3, [pc, #176]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d102      	bne.n	8004bfc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	e047      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004bfc:	4b27      	ldr	r3, [pc, #156]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 030c 	and.w	r3, r3, #12
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d102      	bne.n	8004c0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c08:	4b26      	ldr	r3, [pc, #152]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	e03e      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c0e:	4b23      	ldr	r3, [pc, #140]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	d136      	bne.n	8004c88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c1a:	4b20      	ldr	r3, [pc, #128]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c24:	4b1d      	ldr	r3, [pc, #116]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	091b      	lsrs	r3, r3, #4
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	3301      	adds	r3, #1
 8004c30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d10c      	bne.n	8004c52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c38:	4a1a      	ldr	r2, [pc, #104]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	4a16      	ldr	r2, [pc, #88]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c42:	68d2      	ldr	r2, [r2, #12]
 8004c44:	0a12      	lsrs	r2, r2, #8
 8004c46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	617b      	str	r3, [r7, #20]
      break;
 8004c50:	e00c      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c52:	4a13      	ldr	r2, [pc, #76]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5a:	4a10      	ldr	r2, [pc, #64]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c5c:	68d2      	ldr	r2, [r2, #12]
 8004c5e:	0a12      	lsrs	r2, r2, #8
 8004c60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c64:	fb02 f303 	mul.w	r3, r2, r3
 8004c68:	617b      	str	r3, [r7, #20]
      break;
 8004c6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	0e5b      	lsrs	r3, r3, #25
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	3301      	adds	r3, #1
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	e001      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c8c:	693b      	ldr	r3, [r7, #16]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	00f42400 	.word	0x00f42400
 8004ca4:	007a1200 	.word	0x007a1200

08004ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cac:	4b03      	ldr	r3, [pc, #12]	@ (8004cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cae:	681b      	ldr	r3, [r3, #0]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000000 	.word	0x20000000

08004cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004cc4:	f7ff fff0 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	4b06      	ldr	r3, [pc, #24]	@ (8004ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	0a1b      	lsrs	r3, r3, #8
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	4904      	ldr	r1, [pc, #16]	@ (8004ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cd6:	5ccb      	ldrb	r3, [r1, r3]
 8004cd8:	f003 031f 	and.w	r3, r3, #31
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	08009e14 	.word	0x08009e14

08004cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cf0:	f7ff ffda 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	0adb      	lsrs	r3, r3, #11
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	4904      	ldr	r1, [pc, #16]	@ (8004d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d02:	5ccb      	ldrb	r3, [r1, r3]
 8004d04:	f003 031f 	and.w	r3, r3, #31
 8004d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40021000 	.word	0x40021000
 8004d14:	08009e14 	.word	0x08009e14

08004d18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d28:	4b1b      	ldr	r3, [pc, #108]	@ (8004d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	091b      	lsrs	r3, r3, #4
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	3301      	adds	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d10c      	bne.n	8004d56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d3c:	4a17      	ldr	r2, [pc, #92]	@ (8004d9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	4a14      	ldr	r2, [pc, #80]	@ (8004d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d46:	68d2      	ldr	r2, [r2, #12]
 8004d48:	0a12      	lsrs	r2, r2, #8
 8004d4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	617b      	str	r3, [r7, #20]
    break;
 8004d54:	e00c      	b.n	8004d70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d56:	4a12      	ldr	r2, [pc, #72]	@ (8004da0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d60:	68d2      	ldr	r2, [r2, #12]
 8004d62:	0a12      	lsrs	r2, r2, #8
 8004d64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d68:	fb02 f303 	mul.w	r3, r2, r3
 8004d6c:	617b      	str	r3, [r7, #20]
    break;
 8004d6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d70:	4b09      	ldr	r3, [pc, #36]	@ (8004d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	0e5b      	lsrs	r3, r3, #25
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004d8a:	687b      	ldr	r3, [r7, #4]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	007a1200 	.word	0x007a1200
 8004da0:	00f42400 	.word	0x00f42400

08004da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dac:	2300      	movs	r3, #0
 8004dae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004db0:	2300      	movs	r3, #0
 8004db2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8098 	beq.w	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dc6:	4b43      	ldr	r3, [pc, #268]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10d      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd2:	4b40      	ldr	r3, [pc, #256]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd6:	4a3f      	ldr	r2, [pc, #252]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ddc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dde:	4b3d      	ldr	r3, [pc, #244]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de6:	60bb      	str	r3, [r7, #8]
 8004de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dea:	2301      	movs	r3, #1
 8004dec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dee:	4b3a      	ldr	r3, [pc, #232]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a39      	ldr	r2, [pc, #228]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dfa:	f7fc ff61 	bl	8001cc0 <HAL_GetTick>
 8004dfe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e00:	e009      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e02:	f7fc ff5d 	bl	8001cc0 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d902      	bls.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	74fb      	strb	r3, [r7, #19]
        break;
 8004e14:	e005      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e16:	4b30      	ldr	r3, [pc, #192]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0ef      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e22:	7cfb      	ldrb	r3, [r7, #19]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d159      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e28:	4b2a      	ldr	r3, [pc, #168]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01e      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d019      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e44:	4b23      	ldr	r3, [pc, #140]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e50:	4b20      	ldr	r3, [pc, #128]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e56:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e60:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e66:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e70:	4a18      	ldr	r2, [pc, #96]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d016      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e82:	f7fc ff1d 	bl	8001cc0 <HAL_GetTick>
 8004e86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e88:	e00b      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8a:	f7fc ff19 	bl	8001cc0 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d902      	bls.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	74fb      	strb	r3, [r7, #19]
            break;
 8004ea0:	e006      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0ec      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10b      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eb6:	4b07      	ldr	r3, [pc, #28]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec4:	4903      	ldr	r1, [pc, #12]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ece:	7cfb      	ldrb	r3, [r7, #19]
 8004ed0:	74bb      	strb	r3, [r7, #18]
 8004ed2:	e005      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ee0:	7c7b      	ldrb	r3, [r7, #17]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d105      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee6:	4ba7      	ldr	r3, [pc, #668]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eea:	4aa6      	ldr	r2, [pc, #664]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ef0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004efe:	4ba1      	ldr	r3, [pc, #644]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f04:	f023 0203 	bic.w	r2, r3, #3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	499d      	ldr	r1, [pc, #628]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f20:	4b98      	ldr	r3, [pc, #608]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f26:	f023 020c 	bic.w	r2, r3, #12
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	4995      	ldr	r1, [pc, #596]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f42:	4b90      	ldr	r3, [pc, #576]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f48:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	498c      	ldr	r1, [pc, #560]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f64:	4b87      	ldr	r3, [pc, #540]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	4984      	ldr	r1, [pc, #528]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f86:	4b7f      	ldr	r3, [pc, #508]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	497b      	ldr	r1, [pc, #492]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fa8:	4b76      	ldr	r3, [pc, #472]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	4973      	ldr	r1, [pc, #460]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fca:	4b6e      	ldr	r3, [pc, #440]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	496a      	ldr	r1, [pc, #424]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fec:	4b65      	ldr	r3, [pc, #404]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	4962      	ldr	r1, [pc, #392]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800500e:	4b5d      	ldr	r3, [pc, #372]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005014:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501c:	4959      	ldr	r1, [pc, #356]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005030:	4b54      	ldr	r3, [pc, #336]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005032:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005036:	f023 0203 	bic.w	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503e:	4951      	ldr	r1, [pc, #324]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005052:	4b4c      	ldr	r3, [pc, #304]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005058:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005060:	4948      	ldr	r1, [pc, #288]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005070:	2b00      	cmp	r3, #0
 8005072:	d015      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005074:	4b43      	ldr	r3, [pc, #268]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005082:	4940      	ldr	r1, [pc, #256]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005092:	d105      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005094:	4b3b      	ldr	r3, [pc, #236]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4a3a      	ldr	r2, [pc, #232]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800509a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800509e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d015      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050ac:	4b35      	ldr	r3, [pc, #212]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ba:	4932      	ldr	r1, [pc, #200]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050ca:	d105      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4a2c      	ldr	r2, [pc, #176]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050d6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d015      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050e4:	4b27      	ldr	r3, [pc, #156]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f2:	4924      	ldr	r1, [pc, #144]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005102:	d105      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005104:	4b1f      	ldr	r3, [pc, #124]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4a1e      	ldr	r2, [pc, #120]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800510e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d015      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800511c:	4b19      	ldr	r3, [pc, #100]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005122:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512a:	4916      	ldr	r1, [pc, #88]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005136:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800513a:	d105      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800513c:	4b11      	ldr	r3, [pc, #68]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	4a10      	ldr	r2, [pc, #64]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005146:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d019      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005154:	4b0b      	ldr	r3, [pc, #44]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005162:	4908      	ldr	r1, [pc, #32]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005172:	d109      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005174:	4b03      	ldr	r3, [pc, #12]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	4a02      	ldr	r2, [pc, #8]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800517a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800517e:	60d3      	str	r3, [r2, #12]
 8005180:	e002      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005182:	bf00      	nop
 8005184:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d015      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005194:	4b29      	ldr	r3, [pc, #164]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a2:	4926      	ldr	r1, [pc, #152]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051b2:	d105      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051b4:	4b21      	ldr	r3, [pc, #132]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4a20      	ldr	r2, [pc, #128]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d015      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80051cc:	4b1b      	ldr	r3, [pc, #108]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051da:	4918      	ldr	r1, [pc, #96]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ea:	d105      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051ec:	4b13      	ldr	r3, [pc, #76]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	4a12      	ldr	r2, [pc, #72]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d015      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005204:	4b0d      	ldr	r3, [pc, #52]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005206:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800520a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005212:	490a      	ldr	r1, [pc, #40]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800521e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005222:	d105      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005224:	4b05      	ldr	r3, [pc, #20]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4a04      	ldr	r2, [pc, #16]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800522a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800522e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005230:	7cbb      	ldrb	r3, [r7, #18]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40021000 	.word	0x40021000

08005240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e049      	b.n	80052e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fc fb02 	bl	8001870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3304      	adds	r3, #4
 800527c:	4619      	mov	r1, r3
 800527e:	4610      	mov	r0, r2
 8005280:	f000 facc 	bl	800581c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d020      	beq.n	8005352 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01b      	beq.n	8005352 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f06f 0202 	mvn.w	r2, #2
 8005322:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f003 0303 	and.w	r3, r3, #3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fa51 	bl	80057e0 <HAL_TIM_IC_CaptureCallback>
 800533e:	e005      	b.n	800534c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fa43 	bl	80057cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fa54 	bl	80057f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d020      	beq.n	800539e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	d01b      	beq.n	800539e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f06f 0204 	mvn.w	r2, #4
 800536e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fa2b 	bl	80057e0 <HAL_TIM_IC_CaptureCallback>
 800538a:	e005      	b.n	8005398 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fa1d 	bl	80057cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fa2e 	bl	80057f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d020      	beq.n	80053ea <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01b      	beq.n	80053ea <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f06f 0208 	mvn.w	r2, #8
 80053ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2204      	movs	r2, #4
 80053c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fa05 	bl	80057e0 <HAL_TIM_IC_CaptureCallback>
 80053d6:	e005      	b.n	80053e4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f9f7 	bl	80057cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fa08 	bl	80057f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d020      	beq.n	8005436 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01b      	beq.n	8005436 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f06f 0210 	mvn.w	r2, #16
 8005406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2208      	movs	r2, #8
 800540c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f9df 	bl	80057e0 <HAL_TIM_IC_CaptureCallback>
 8005422:	e005      	b.n	8005430 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f9d1 	bl	80057cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f9e2 	bl	80057f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00c      	beq.n	800545a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f06f 0201 	mvn.w	r2, #1
 8005452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f9af 	bl	80057b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005460:	2b00      	cmp	r3, #0
 8005462:	d104      	bne.n	800546e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00c      	beq.n	8005488 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fbba 	bl	8005bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00c      	beq.n	80054ac <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fbb2 	bl	8005c10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00c      	beq.n	80054d0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f99c 	bl	8005808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00c      	beq.n	80054f4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d007      	beq.n	80054f4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0220 	mvn.w	r2, #32
 80054ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fb7a 	bl	8005be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00c      	beq.n	8005518 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d007      	beq.n	8005518 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fb86 	bl	8005c24 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00c      	beq.n	800553c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d007      	beq.n	800553c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fb7e 	bl	8005c38 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00c      	beq.n	8005560 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d007      	beq.n	8005560 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fb76 	bl	8005c4c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00c      	beq.n	8005584 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d007      	beq.n	8005584 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800557c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fb6e 	bl	8005c60 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005584:	bf00      	nop
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_TIM_ConfigClockSource+0x1c>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e0f6      	b.n	8005796 <HAL_TIM_ConfigClockSource+0x20a>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80055c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a6f      	ldr	r2, [pc, #444]	@ (80057a0 <HAL_TIM_ConfigClockSource+0x214>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	f000 80c1 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 80055e8:	4a6d      	ldr	r2, [pc, #436]	@ (80057a0 <HAL_TIM_ConfigClockSource+0x214>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	f200 80c6 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 80055f0:	4a6c      	ldr	r2, [pc, #432]	@ (80057a4 <HAL_TIM_ConfigClockSource+0x218>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	f000 80b9 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 80055f8:	4a6a      	ldr	r2, [pc, #424]	@ (80057a4 <HAL_TIM_ConfigClockSource+0x218>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	f200 80be 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005600:	4a69      	ldr	r2, [pc, #420]	@ (80057a8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	f000 80b1 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 8005608:	4a67      	ldr	r2, [pc, #412]	@ (80057a8 <HAL_TIM_ConfigClockSource+0x21c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	f200 80b6 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005610:	4a66      	ldr	r2, [pc, #408]	@ (80057ac <HAL_TIM_ConfigClockSource+0x220>)
 8005612:	4293      	cmp	r3, r2
 8005614:	f000 80a9 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 8005618:	4a64      	ldr	r2, [pc, #400]	@ (80057ac <HAL_TIM_ConfigClockSource+0x220>)
 800561a:	4293      	cmp	r3, r2
 800561c:	f200 80ae 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005620:	4a63      	ldr	r2, [pc, #396]	@ (80057b0 <HAL_TIM_ConfigClockSource+0x224>)
 8005622:	4293      	cmp	r3, r2
 8005624:	f000 80a1 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 8005628:	4a61      	ldr	r2, [pc, #388]	@ (80057b0 <HAL_TIM_ConfigClockSource+0x224>)
 800562a:	4293      	cmp	r3, r2
 800562c:	f200 80a6 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005630:	4a60      	ldr	r2, [pc, #384]	@ (80057b4 <HAL_TIM_ConfigClockSource+0x228>)
 8005632:	4293      	cmp	r3, r2
 8005634:	f000 8099 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 8005638:	4a5e      	ldr	r2, [pc, #376]	@ (80057b4 <HAL_TIM_ConfigClockSource+0x228>)
 800563a:	4293      	cmp	r3, r2
 800563c:	f200 809e 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005640:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005644:	f000 8091 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 8005648:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800564c:	f200 8096 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005650:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005654:	f000 8089 	beq.w	800576a <HAL_TIM_ConfigClockSource+0x1de>
 8005658:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800565c:	f200 808e 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005664:	d03e      	beq.n	80056e4 <HAL_TIM_ConfigClockSource+0x158>
 8005666:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800566a:	f200 8087 	bhi.w	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 800566e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005672:	f000 8086 	beq.w	8005782 <HAL_TIM_ConfigClockSource+0x1f6>
 8005676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800567a:	d87f      	bhi.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 800567c:	2b70      	cmp	r3, #112	@ 0x70
 800567e:	d01a      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0x12a>
 8005680:	2b70      	cmp	r3, #112	@ 0x70
 8005682:	d87b      	bhi.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005684:	2b60      	cmp	r3, #96	@ 0x60
 8005686:	d050      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x19e>
 8005688:	2b60      	cmp	r3, #96	@ 0x60
 800568a:	d877      	bhi.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 800568c:	2b50      	cmp	r3, #80	@ 0x50
 800568e:	d03c      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x17e>
 8005690:	2b50      	cmp	r3, #80	@ 0x50
 8005692:	d873      	bhi.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 8005694:	2b40      	cmp	r3, #64	@ 0x40
 8005696:	d058      	beq.n	800574a <HAL_TIM_ConfigClockSource+0x1be>
 8005698:	2b40      	cmp	r3, #64	@ 0x40
 800569a:	d86f      	bhi.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 800569c:	2b30      	cmp	r3, #48	@ 0x30
 800569e:	d064      	beq.n	800576a <HAL_TIM_ConfigClockSource+0x1de>
 80056a0:	2b30      	cmp	r3, #48	@ 0x30
 80056a2:	d86b      	bhi.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d060      	beq.n	800576a <HAL_TIM_ConfigClockSource+0x1de>
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d867      	bhi.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d05c      	beq.n	800576a <HAL_TIM_ConfigClockSource+0x1de>
 80056b0:	2b10      	cmp	r3, #16
 80056b2:	d05a      	beq.n	800576a <HAL_TIM_ConfigClockSource+0x1de>
 80056b4:	e062      	b.n	800577c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056c6:	f000 f9d9 	bl	8005a7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	609a      	str	r2, [r3, #8]
      break;
 80056e2:	e04f      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056f4:	f000 f9c2 	bl	8005a7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005706:	609a      	str	r2, [r3, #8]
      break;
 8005708:	e03c      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005716:	461a      	mov	r2, r3
 8005718:	f000 f934 	bl	8005984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2150      	movs	r1, #80	@ 0x50
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f98d 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 8005728:	e02c      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005736:	461a      	mov	r2, r3
 8005738:	f000 f953 	bl	80059e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2160      	movs	r1, #96	@ 0x60
 8005742:	4618      	mov	r0, r3
 8005744:	f000 f97d 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 8005748:	e01c      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005756:	461a      	mov	r2, r3
 8005758:	f000 f914 	bl	8005984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2140      	movs	r1, #64	@ 0x40
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f96d 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 8005768:	e00c      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4619      	mov	r1, r3
 8005774:	4610      	mov	r0, r2
 8005776:	f000 f964 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 800577a:	e003      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	73fb      	strb	r3, [r7, #15]
      break;
 8005780:	e000      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005782:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005794:	7bfb      	ldrb	r3, [r7, #15]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	00100070 	.word	0x00100070
 80057a4:	00100060 	.word	0x00100060
 80057a8:	00100050 	.word	0x00100050
 80057ac:	00100040 	.word	0x00100040
 80057b0:	00100030 	.word	0x00100030
 80057b4:	00100020 	.word	0x00100020

080057b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a4c      	ldr	r2, [pc, #304]	@ (8005960 <TIM_Base_SetConfig+0x144>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d017      	beq.n	8005864 <TIM_Base_SetConfig+0x48>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583a:	d013      	beq.n	8005864 <TIM_Base_SetConfig+0x48>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a49      	ldr	r2, [pc, #292]	@ (8005964 <TIM_Base_SetConfig+0x148>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00f      	beq.n	8005864 <TIM_Base_SetConfig+0x48>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a48      	ldr	r2, [pc, #288]	@ (8005968 <TIM_Base_SetConfig+0x14c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00b      	beq.n	8005864 <TIM_Base_SetConfig+0x48>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a47      	ldr	r2, [pc, #284]	@ (800596c <TIM_Base_SetConfig+0x150>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d007      	beq.n	8005864 <TIM_Base_SetConfig+0x48>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a46      	ldr	r2, [pc, #280]	@ (8005970 <TIM_Base_SetConfig+0x154>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d003      	beq.n	8005864 <TIM_Base_SetConfig+0x48>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a45      	ldr	r2, [pc, #276]	@ (8005974 <TIM_Base_SetConfig+0x158>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d108      	bne.n	8005876 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800586a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a39      	ldr	r2, [pc, #228]	@ (8005960 <TIM_Base_SetConfig+0x144>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d023      	beq.n	80058c6 <TIM_Base_SetConfig+0xaa>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005884:	d01f      	beq.n	80058c6 <TIM_Base_SetConfig+0xaa>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a36      	ldr	r2, [pc, #216]	@ (8005964 <TIM_Base_SetConfig+0x148>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01b      	beq.n	80058c6 <TIM_Base_SetConfig+0xaa>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a35      	ldr	r2, [pc, #212]	@ (8005968 <TIM_Base_SetConfig+0x14c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d017      	beq.n	80058c6 <TIM_Base_SetConfig+0xaa>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a34      	ldr	r2, [pc, #208]	@ (800596c <TIM_Base_SetConfig+0x150>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d013      	beq.n	80058c6 <TIM_Base_SetConfig+0xaa>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a33      	ldr	r2, [pc, #204]	@ (8005970 <TIM_Base_SetConfig+0x154>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00f      	beq.n	80058c6 <TIM_Base_SetConfig+0xaa>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a33      	ldr	r2, [pc, #204]	@ (8005978 <TIM_Base_SetConfig+0x15c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00b      	beq.n	80058c6 <TIM_Base_SetConfig+0xaa>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a32      	ldr	r2, [pc, #200]	@ (800597c <TIM_Base_SetConfig+0x160>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d007      	beq.n	80058c6 <TIM_Base_SetConfig+0xaa>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a31      	ldr	r2, [pc, #196]	@ (8005980 <TIM_Base_SetConfig+0x164>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d003      	beq.n	80058c6 <TIM_Base_SetConfig+0xaa>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005974 <TIM_Base_SetConfig+0x158>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d108      	bne.n	80058d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a18      	ldr	r2, [pc, #96]	@ (8005960 <TIM_Base_SetConfig+0x144>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d013      	beq.n	800592c <TIM_Base_SetConfig+0x110>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a1a      	ldr	r2, [pc, #104]	@ (8005970 <TIM_Base_SetConfig+0x154>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00f      	beq.n	800592c <TIM_Base_SetConfig+0x110>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a1a      	ldr	r2, [pc, #104]	@ (8005978 <TIM_Base_SetConfig+0x15c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00b      	beq.n	800592c <TIM_Base_SetConfig+0x110>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a19      	ldr	r2, [pc, #100]	@ (800597c <TIM_Base_SetConfig+0x160>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d007      	beq.n	800592c <TIM_Base_SetConfig+0x110>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a18      	ldr	r2, [pc, #96]	@ (8005980 <TIM_Base_SetConfig+0x164>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_Base_SetConfig+0x110>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a13      	ldr	r2, [pc, #76]	@ (8005974 <TIM_Base_SetConfig+0x158>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d103      	bne.n	8005934 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b01      	cmp	r3, #1
 8005944:	d105      	bne.n	8005952 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f023 0201 	bic.w	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	611a      	str	r2, [r3, #16]
  }
}
 8005952:	bf00      	nop
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40012c00 	.word	0x40012c00
 8005964:	40000400 	.word	0x40000400
 8005968:	40000800 	.word	0x40000800
 800596c:	40000c00 	.word	0x40000c00
 8005970:	40013400 	.word	0x40013400
 8005974:	40015000 	.word	0x40015000
 8005978:	40014000 	.word	0x40014000
 800597c:	40014400 	.word	0x40014400
 8005980:	40014800 	.word	0x40014800

08005984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f023 0201 	bic.w	r2, r3, #1
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f023 030a 	bic.w	r3, r3, #10
 80059c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	621a      	str	r2, [r3, #32]
}
 80059d6:	bf00      	nop
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b087      	sub	sp, #28
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f023 0210 	bic.w	r2, r3, #16
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	031b      	lsls	r3, r3, #12
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f043 0307 	orr.w	r3, r3, #7
 8005a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	609a      	str	r2, [r3, #8]
}
 8005a70:	bf00      	nop
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	021a      	lsls	r2, r3, #8
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	609a      	str	r2, [r3, #8]
}
 8005ab0:	bf00      	nop
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e074      	b.n	8005bbe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a34      	ldr	r2, [pc, #208]	@ (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d009      	beq.n	8005b12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a33      	ldr	r2, [pc, #204]	@ (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d004      	beq.n	8005b12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a31      	ldr	r2, [pc, #196]	@ (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d108      	bne.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a21      	ldr	r2, [pc, #132]	@ (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d022      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b54:	d01d      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d018      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1d      	ldr	r2, [pc, #116]	@ (8005bdc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d013      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00e      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a15      	ldr	r2, [pc, #84]	@ (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d009      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a18      	ldr	r2, [pc, #96]	@ (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d004      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a11      	ldr	r2, [pc, #68]	@ (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d10c      	bne.n	8005bac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40012c00 	.word	0x40012c00
 8005bd0:	40013400 	.word	0x40013400
 8005bd4:	40015000 	.word	0x40015000
 8005bd8:	40000400 	.word	0x40000400
 8005bdc:	40000800 	.word	0x40000800
 8005be0:	40000c00 	.word	0x40000c00
 8005be4:	40014000 	.word	0x40014000

08005be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e042      	b.n	8005d0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d106      	bne.n	8005c9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7fb fe0f 	bl	80018bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2224      	movs	r2, #36	@ 0x24
 8005ca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fbb2 	bl	8006428 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f8b3 	bl	8005e30 <UART_SetConfig>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e01b      	b.n	8005d0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fc31 	bl	800656c <UART_CheckIdleState>
 8005d0a:	4603      	mov	r3, r0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08a      	sub	sp, #40	@ 0x28
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	603b      	str	r3, [r7, #0]
 8005d20:	4613      	mov	r3, r2
 8005d22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	d17b      	bne.n	8005e26 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <HAL_UART_Transmit+0x26>
 8005d34:	88fb      	ldrh	r3, [r7, #6]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e074      	b.n	8005e28 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2221      	movs	r2, #33	@ 0x21
 8005d4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d4e:	f7fb ffb7 	bl	8001cc0 <HAL_GetTick>
 8005d52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	88fa      	ldrh	r2, [r7, #6]
 8005d58:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	88fa      	ldrh	r2, [r7, #6]
 8005d60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d6c:	d108      	bne.n	8005d80 <HAL_UART_Transmit+0x6c>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d104      	bne.n	8005d80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	e003      	b.n	8005d88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d88:	e030      	b.n	8005dec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2200      	movs	r2, #0
 8005d92:	2180      	movs	r1, #128	@ 0x80
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 fc93 	bl	80066c0 <UART_WaitOnFlagUntilTimeout>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e03d      	b.n	8005e28 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10b      	bne.n	8005dca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	3302      	adds	r3, #2
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	e007      	b.n	8005dda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	781a      	ldrb	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1c8      	bne.n	8005d8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2140      	movs	r1, #64	@ 0x40
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fc5c 	bl	80066c0 <UART_WaitOnFlagUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e006      	b.n	8005e28 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e000      	b.n	8005e28 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005e26:	2302      	movs	r3, #2
  }
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e34:	b08c      	sub	sp, #48	@ 0x30
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	4baa      	ldr	r3, [pc, #680]	@ (8006108 <UART_SetConfig+0x2d8>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a9f      	ldr	r2, [pc, #636]	@ (800610c <UART_SetConfig+0x2dc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d004      	beq.n	8005e9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005ea6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eba:	f023 010f 	bic.w	r1, r3, #15
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a90      	ldr	r2, [pc, #576]	@ (8006110 <UART_SetConfig+0x2e0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d125      	bne.n	8005f20 <UART_SetConfig+0xf0>
 8005ed4:	4b8f      	ldr	r3, [pc, #572]	@ (8006114 <UART_SetConfig+0x2e4>)
 8005ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d81a      	bhi.n	8005f18 <UART_SetConfig+0xe8>
 8005ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee8 <UART_SetConfig+0xb8>)
 8005ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee8:	08005ef9 	.word	0x08005ef9
 8005eec:	08005f09 	.word	0x08005f09
 8005ef0:	08005f01 	.word	0x08005f01
 8005ef4:	08005f11 	.word	0x08005f11
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005efe:	e116      	b.n	800612e <UART_SetConfig+0x2fe>
 8005f00:	2302      	movs	r3, #2
 8005f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f06:	e112      	b.n	800612e <UART_SetConfig+0x2fe>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f0e:	e10e      	b.n	800612e <UART_SetConfig+0x2fe>
 8005f10:	2308      	movs	r3, #8
 8005f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f16:	e10a      	b.n	800612e <UART_SetConfig+0x2fe>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f1e:	e106      	b.n	800612e <UART_SetConfig+0x2fe>
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a7c      	ldr	r2, [pc, #496]	@ (8006118 <UART_SetConfig+0x2e8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d138      	bne.n	8005f9c <UART_SetConfig+0x16c>
 8005f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8006114 <UART_SetConfig+0x2e4>)
 8005f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f30:	f003 030c 	and.w	r3, r3, #12
 8005f34:	2b0c      	cmp	r3, #12
 8005f36:	d82d      	bhi.n	8005f94 <UART_SetConfig+0x164>
 8005f38:	a201      	add	r2, pc, #4	@ (adr r2, 8005f40 <UART_SetConfig+0x110>)
 8005f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3e:	bf00      	nop
 8005f40:	08005f75 	.word	0x08005f75
 8005f44:	08005f95 	.word	0x08005f95
 8005f48:	08005f95 	.word	0x08005f95
 8005f4c:	08005f95 	.word	0x08005f95
 8005f50:	08005f85 	.word	0x08005f85
 8005f54:	08005f95 	.word	0x08005f95
 8005f58:	08005f95 	.word	0x08005f95
 8005f5c:	08005f95 	.word	0x08005f95
 8005f60:	08005f7d 	.word	0x08005f7d
 8005f64:	08005f95 	.word	0x08005f95
 8005f68:	08005f95 	.word	0x08005f95
 8005f6c:	08005f95 	.word	0x08005f95
 8005f70:	08005f8d 	.word	0x08005f8d
 8005f74:	2300      	movs	r3, #0
 8005f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f7a:	e0d8      	b.n	800612e <UART_SetConfig+0x2fe>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f82:	e0d4      	b.n	800612e <UART_SetConfig+0x2fe>
 8005f84:	2304      	movs	r3, #4
 8005f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f8a:	e0d0      	b.n	800612e <UART_SetConfig+0x2fe>
 8005f8c:	2308      	movs	r3, #8
 8005f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f92:	e0cc      	b.n	800612e <UART_SetConfig+0x2fe>
 8005f94:	2310      	movs	r3, #16
 8005f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f9a:	e0c8      	b.n	800612e <UART_SetConfig+0x2fe>
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a5e      	ldr	r2, [pc, #376]	@ (800611c <UART_SetConfig+0x2ec>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d125      	bne.n	8005ff2 <UART_SetConfig+0x1c2>
 8005fa6:	4b5b      	ldr	r3, [pc, #364]	@ (8006114 <UART_SetConfig+0x2e4>)
 8005fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005fb0:	2b30      	cmp	r3, #48	@ 0x30
 8005fb2:	d016      	beq.n	8005fe2 <UART_SetConfig+0x1b2>
 8005fb4:	2b30      	cmp	r3, #48	@ 0x30
 8005fb6:	d818      	bhi.n	8005fea <UART_SetConfig+0x1ba>
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d00a      	beq.n	8005fd2 <UART_SetConfig+0x1a2>
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d814      	bhi.n	8005fea <UART_SetConfig+0x1ba>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <UART_SetConfig+0x19a>
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d008      	beq.n	8005fda <UART_SetConfig+0x1aa>
 8005fc8:	e00f      	b.n	8005fea <UART_SetConfig+0x1ba>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fd0:	e0ad      	b.n	800612e <UART_SetConfig+0x2fe>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fd8:	e0a9      	b.n	800612e <UART_SetConfig+0x2fe>
 8005fda:	2304      	movs	r3, #4
 8005fdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fe0:	e0a5      	b.n	800612e <UART_SetConfig+0x2fe>
 8005fe2:	2308      	movs	r3, #8
 8005fe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fe8:	e0a1      	b.n	800612e <UART_SetConfig+0x2fe>
 8005fea:	2310      	movs	r3, #16
 8005fec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ff0:	e09d      	b.n	800612e <UART_SetConfig+0x2fe>
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a4a      	ldr	r2, [pc, #296]	@ (8006120 <UART_SetConfig+0x2f0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d125      	bne.n	8006048 <UART_SetConfig+0x218>
 8005ffc:	4b45      	ldr	r3, [pc, #276]	@ (8006114 <UART_SetConfig+0x2e4>)
 8005ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006002:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006006:	2bc0      	cmp	r3, #192	@ 0xc0
 8006008:	d016      	beq.n	8006038 <UART_SetConfig+0x208>
 800600a:	2bc0      	cmp	r3, #192	@ 0xc0
 800600c:	d818      	bhi.n	8006040 <UART_SetConfig+0x210>
 800600e:	2b80      	cmp	r3, #128	@ 0x80
 8006010:	d00a      	beq.n	8006028 <UART_SetConfig+0x1f8>
 8006012:	2b80      	cmp	r3, #128	@ 0x80
 8006014:	d814      	bhi.n	8006040 <UART_SetConfig+0x210>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <UART_SetConfig+0x1f0>
 800601a:	2b40      	cmp	r3, #64	@ 0x40
 800601c:	d008      	beq.n	8006030 <UART_SetConfig+0x200>
 800601e:	e00f      	b.n	8006040 <UART_SetConfig+0x210>
 8006020:	2300      	movs	r3, #0
 8006022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006026:	e082      	b.n	800612e <UART_SetConfig+0x2fe>
 8006028:	2302      	movs	r3, #2
 800602a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800602e:	e07e      	b.n	800612e <UART_SetConfig+0x2fe>
 8006030:	2304      	movs	r3, #4
 8006032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006036:	e07a      	b.n	800612e <UART_SetConfig+0x2fe>
 8006038:	2308      	movs	r3, #8
 800603a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800603e:	e076      	b.n	800612e <UART_SetConfig+0x2fe>
 8006040:	2310      	movs	r3, #16
 8006042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006046:	e072      	b.n	800612e <UART_SetConfig+0x2fe>
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a35      	ldr	r2, [pc, #212]	@ (8006124 <UART_SetConfig+0x2f4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d12a      	bne.n	80060a8 <UART_SetConfig+0x278>
 8006052:	4b30      	ldr	r3, [pc, #192]	@ (8006114 <UART_SetConfig+0x2e4>)
 8006054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006058:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800605c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006060:	d01a      	beq.n	8006098 <UART_SetConfig+0x268>
 8006062:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006066:	d81b      	bhi.n	80060a0 <UART_SetConfig+0x270>
 8006068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800606c:	d00c      	beq.n	8006088 <UART_SetConfig+0x258>
 800606e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006072:	d815      	bhi.n	80060a0 <UART_SetConfig+0x270>
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <UART_SetConfig+0x250>
 8006078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800607c:	d008      	beq.n	8006090 <UART_SetConfig+0x260>
 800607e:	e00f      	b.n	80060a0 <UART_SetConfig+0x270>
 8006080:	2300      	movs	r3, #0
 8006082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006086:	e052      	b.n	800612e <UART_SetConfig+0x2fe>
 8006088:	2302      	movs	r3, #2
 800608a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800608e:	e04e      	b.n	800612e <UART_SetConfig+0x2fe>
 8006090:	2304      	movs	r3, #4
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006096:	e04a      	b.n	800612e <UART_SetConfig+0x2fe>
 8006098:	2308      	movs	r3, #8
 800609a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800609e:	e046      	b.n	800612e <UART_SetConfig+0x2fe>
 80060a0:	2310      	movs	r3, #16
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060a6:	e042      	b.n	800612e <UART_SetConfig+0x2fe>
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a17      	ldr	r2, [pc, #92]	@ (800610c <UART_SetConfig+0x2dc>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d13a      	bne.n	8006128 <UART_SetConfig+0x2f8>
 80060b2:	4b18      	ldr	r3, [pc, #96]	@ (8006114 <UART_SetConfig+0x2e4>)
 80060b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80060bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060c0:	d01a      	beq.n	80060f8 <UART_SetConfig+0x2c8>
 80060c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060c6:	d81b      	bhi.n	8006100 <UART_SetConfig+0x2d0>
 80060c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060cc:	d00c      	beq.n	80060e8 <UART_SetConfig+0x2b8>
 80060ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060d2:	d815      	bhi.n	8006100 <UART_SetConfig+0x2d0>
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <UART_SetConfig+0x2b0>
 80060d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060dc:	d008      	beq.n	80060f0 <UART_SetConfig+0x2c0>
 80060de:	e00f      	b.n	8006100 <UART_SetConfig+0x2d0>
 80060e0:	2300      	movs	r3, #0
 80060e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060e6:	e022      	b.n	800612e <UART_SetConfig+0x2fe>
 80060e8:	2302      	movs	r3, #2
 80060ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ee:	e01e      	b.n	800612e <UART_SetConfig+0x2fe>
 80060f0:	2304      	movs	r3, #4
 80060f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060f6:	e01a      	b.n	800612e <UART_SetConfig+0x2fe>
 80060f8:	2308      	movs	r3, #8
 80060fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060fe:	e016      	b.n	800612e <UART_SetConfig+0x2fe>
 8006100:	2310      	movs	r3, #16
 8006102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006106:	e012      	b.n	800612e <UART_SetConfig+0x2fe>
 8006108:	cfff69f3 	.word	0xcfff69f3
 800610c:	40008000 	.word	0x40008000
 8006110:	40013800 	.word	0x40013800
 8006114:	40021000 	.word	0x40021000
 8006118:	40004400 	.word	0x40004400
 800611c:	40004800 	.word	0x40004800
 8006120:	40004c00 	.word	0x40004c00
 8006124:	40005000 	.word	0x40005000
 8006128:	2310      	movs	r3, #16
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4aae      	ldr	r2, [pc, #696]	@ (80063ec <UART_SetConfig+0x5bc>)
 8006134:	4293      	cmp	r3, r2
 8006136:	f040 8097 	bne.w	8006268 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800613a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800613e:	2b08      	cmp	r3, #8
 8006140:	d823      	bhi.n	800618a <UART_SetConfig+0x35a>
 8006142:	a201      	add	r2, pc, #4	@ (adr r2, 8006148 <UART_SetConfig+0x318>)
 8006144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006148:	0800616d 	.word	0x0800616d
 800614c:	0800618b 	.word	0x0800618b
 8006150:	08006175 	.word	0x08006175
 8006154:	0800618b 	.word	0x0800618b
 8006158:	0800617b 	.word	0x0800617b
 800615c:	0800618b 	.word	0x0800618b
 8006160:	0800618b 	.word	0x0800618b
 8006164:	0800618b 	.word	0x0800618b
 8006168:	08006183 	.word	0x08006183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800616c:	f7fe fda8 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 8006170:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006172:	e010      	b.n	8006196 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006174:	4b9e      	ldr	r3, [pc, #632]	@ (80063f0 <UART_SetConfig+0x5c0>)
 8006176:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006178:	e00d      	b.n	8006196 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800617a:	f7fe fd33 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 800617e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006180:	e009      	b.n	8006196 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006186:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006188:	e005      	b.n	8006196 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006194:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 8130 	beq.w	80063fe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a2:	4a94      	ldr	r2, [pc, #592]	@ (80063f4 <UART_SetConfig+0x5c4>)
 80061a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061a8:	461a      	mov	r2, r3
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	4413      	add	r3, r2
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d305      	bcc.n	80061ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d903      	bls.n	80061d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061d4:	e113      	b.n	80063fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	2200      	movs	r2, #0
 80061da:	60bb      	str	r3, [r7, #8]
 80061dc:	60fa      	str	r2, [r7, #12]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e2:	4a84      	ldr	r2, [pc, #528]	@ (80063f4 <UART_SetConfig+0x5c4>)
 80061e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2200      	movs	r2, #0
 80061ec:	603b      	str	r3, [r7, #0]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061f8:	f7fa fd4e 	bl	8000c98 <__aeabi_uldivmod>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4610      	mov	r0, r2
 8006202:	4619      	mov	r1, r3
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	020b      	lsls	r3, r1, #8
 800620e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006212:	0202      	lsls	r2, r0, #8
 8006214:	6979      	ldr	r1, [r7, #20]
 8006216:	6849      	ldr	r1, [r1, #4]
 8006218:	0849      	lsrs	r1, r1, #1
 800621a:	2000      	movs	r0, #0
 800621c:	460c      	mov	r4, r1
 800621e:	4605      	mov	r5, r0
 8006220:	eb12 0804 	adds.w	r8, r2, r4
 8006224:	eb43 0905 	adc.w	r9, r3, r5
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	469a      	mov	sl, r3
 8006230:	4693      	mov	fp, r2
 8006232:	4652      	mov	r2, sl
 8006234:	465b      	mov	r3, fp
 8006236:	4640      	mov	r0, r8
 8006238:	4649      	mov	r1, r9
 800623a:	f7fa fd2d 	bl	8000c98 <__aeabi_uldivmod>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4613      	mov	r3, r2
 8006244:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800624c:	d308      	bcc.n	8006260 <UART_SetConfig+0x430>
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006254:	d204      	bcs.n	8006260 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6a3a      	ldr	r2, [r7, #32]
 800625c:	60da      	str	r2, [r3, #12]
 800625e:	e0ce      	b.n	80063fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006266:	e0ca      	b.n	80063fe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006270:	d166      	bne.n	8006340 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006272:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006276:	2b08      	cmp	r3, #8
 8006278:	d827      	bhi.n	80062ca <UART_SetConfig+0x49a>
 800627a:	a201      	add	r2, pc, #4	@ (adr r2, 8006280 <UART_SetConfig+0x450>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	080062a5 	.word	0x080062a5
 8006284:	080062ad 	.word	0x080062ad
 8006288:	080062b5 	.word	0x080062b5
 800628c:	080062cb 	.word	0x080062cb
 8006290:	080062bb 	.word	0x080062bb
 8006294:	080062cb 	.word	0x080062cb
 8006298:	080062cb 	.word	0x080062cb
 800629c:	080062cb 	.word	0x080062cb
 80062a0:	080062c3 	.word	0x080062c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a4:	f7fe fd0c 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 80062a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062aa:	e014      	b.n	80062d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062ac:	f7fe fd1e 	bl	8004cec <HAL_RCC_GetPCLK2Freq>
 80062b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062b2:	e010      	b.n	80062d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b4:	4b4e      	ldr	r3, [pc, #312]	@ (80063f0 <UART_SetConfig+0x5c0>)
 80062b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062b8:	e00d      	b.n	80062d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ba:	f7fe fc93 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 80062be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062c0:	e009      	b.n	80062d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062c8:	e005      	b.n	80062d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 8090 	beq.w	80063fe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e2:	4a44      	ldr	r2, [pc, #272]	@ (80063f4 <UART_SetConfig+0x5c4>)
 80062e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062e8:	461a      	mov	r2, r3
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80062f0:	005a      	lsls	r2, r3, #1
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	441a      	add	r2, r3
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006302:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	2b0f      	cmp	r3, #15
 8006308:	d916      	bls.n	8006338 <UART_SetConfig+0x508>
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006310:	d212      	bcs.n	8006338 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f023 030f 	bic.w	r3, r3, #15
 800631a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	b29b      	uxth	r3, r3
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	b29a      	uxth	r2, r3
 8006328:	8bfb      	ldrh	r3, [r7, #30]
 800632a:	4313      	orrs	r3, r2
 800632c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	8bfa      	ldrh	r2, [r7, #30]
 8006334:	60da      	str	r2, [r3, #12]
 8006336:	e062      	b.n	80063fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800633e:	e05e      	b.n	80063fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006340:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006344:	2b08      	cmp	r3, #8
 8006346:	d828      	bhi.n	800639a <UART_SetConfig+0x56a>
 8006348:	a201      	add	r2, pc, #4	@ (adr r2, 8006350 <UART_SetConfig+0x520>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	08006375 	.word	0x08006375
 8006354:	0800637d 	.word	0x0800637d
 8006358:	08006385 	.word	0x08006385
 800635c:	0800639b 	.word	0x0800639b
 8006360:	0800638b 	.word	0x0800638b
 8006364:	0800639b 	.word	0x0800639b
 8006368:	0800639b 	.word	0x0800639b
 800636c:	0800639b 	.word	0x0800639b
 8006370:	08006393 	.word	0x08006393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006374:	f7fe fca4 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 8006378:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800637a:	e014      	b.n	80063a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800637c:	f7fe fcb6 	bl	8004cec <HAL_RCC_GetPCLK2Freq>
 8006380:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006382:	e010      	b.n	80063a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006384:	4b1a      	ldr	r3, [pc, #104]	@ (80063f0 <UART_SetConfig+0x5c0>)
 8006386:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006388:	e00d      	b.n	80063a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800638a:	f7fe fc2b 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 800638e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006390:	e009      	b.n	80063a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006396:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006398:	e005      	b.n	80063a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80063a4:	bf00      	nop
    }

    if (pclk != 0U)
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d028      	beq.n	80063fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b0:	4a10      	ldr	r2, [pc, #64]	@ (80063f4 <UART_SetConfig+0x5c4>)
 80063b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063b6:	461a      	mov	r2, r3
 80063b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	085b      	lsrs	r3, r3, #1
 80063c4:	441a      	add	r2, r3
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	2b0f      	cmp	r3, #15
 80063d4:	d910      	bls.n	80063f8 <UART_SetConfig+0x5c8>
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063dc:	d20c      	bcs.n	80063f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	60da      	str	r2, [r3, #12]
 80063e8:	e009      	b.n	80063fe <UART_SetConfig+0x5ce>
 80063ea:	bf00      	nop
 80063ec:	40008000 	.word	0x40008000
 80063f0:	00f42400 	.word	0x00f42400
 80063f4:	08009e1c 	.word	0x08009e1c
      }
      else
      {
        ret = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2201      	movs	r2, #1
 8006402:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2201      	movs	r2, #1
 800640a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2200      	movs	r2, #0
 8006412:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2200      	movs	r2, #0
 8006418:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800641a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800641e:	4618      	mov	r0, r3
 8006420:	3730      	adds	r7, #48	@ 0x30
 8006422:	46bd      	mov	sp, r7
 8006424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006434:	f003 0308 	and.w	r3, r3, #8
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00a      	beq.n	8006496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649a:	f003 0304 	and.w	r3, r3, #4
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064bc:	f003 0310 	and.w	r3, r3, #16
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	d01a      	beq.n	800653e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006526:	d10a      	bne.n	800653e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	605a      	str	r2, [r3, #4]
  }
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b098      	sub	sp, #96	@ 0x60
 8006570:	af02      	add	r7, sp, #8
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800657c:	f7fb fba0 	bl	8001cc0 <HAL_GetTick>
 8006580:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0308 	and.w	r3, r3, #8
 800658c:	2b08      	cmp	r3, #8
 800658e:	d12f      	bne.n	80065f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006590:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006598:	2200      	movs	r2, #0
 800659a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f88e 	bl	80066c0 <UART_WaitOnFlagUntilTimeout>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d022      	beq.n	80065f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065be:	653b      	str	r3, [r7, #80]	@ 0x50
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e6      	bne.n	80065aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e063      	b.n	80066b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d149      	bne.n	8006692 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006606:	2200      	movs	r2, #0
 8006608:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f857 	bl	80066c0 <UART_WaitOnFlagUntilTimeout>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d03c      	beq.n	8006692 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	623b      	str	r3, [r7, #32]
   return(result);
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800662c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006636:	633b      	str	r3, [r7, #48]	@ 0x30
 8006638:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800663c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e6      	bne.n	8006618 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3308      	adds	r3, #8
 8006650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	60fb      	str	r3, [r7, #12]
   return(result);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800666a:	61fa      	str	r2, [r7, #28]
 800666c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	69b9      	ldr	r1, [r7, #24]
 8006670:	69fa      	ldr	r2, [r7, #28]
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	617b      	str	r3, [r7, #20]
   return(result);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e5      	bne.n	800664a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2220      	movs	r2, #32
 8006682:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e012      	b.n	80066b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3758      	adds	r7, #88	@ 0x58
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	4613      	mov	r3, r2
 80066ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d0:	e04f      	b.n	8006772 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d8:	d04b      	beq.n	8006772 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066da:	f7fb faf1 	bl	8001cc0 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d302      	bcc.n	80066f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e04e      	b.n	8006792 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0304 	and.w	r3, r3, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d037      	beq.n	8006772 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b80      	cmp	r3, #128	@ 0x80
 8006706:	d034      	beq.n	8006772 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2b40      	cmp	r3, #64	@ 0x40
 800670c:	d031      	beq.n	8006772 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	f003 0308 	and.w	r3, r3, #8
 8006718:	2b08      	cmp	r3, #8
 800671a:	d110      	bne.n	800673e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2208      	movs	r2, #8
 8006722:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 f838 	bl	800679a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2208      	movs	r2, #8
 800672e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e029      	b.n	8006792 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006748:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800674c:	d111      	bne.n	8006772 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006756:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 f81e 	bl	800679a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2220      	movs	r2, #32
 8006762:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e00f      	b.n	8006792 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69da      	ldr	r2, [r3, #28]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	4013      	ands	r3, r2
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	429a      	cmp	r2, r3
 8006780:	bf0c      	ite	eq
 8006782:	2301      	moveq	r3, #1
 8006784:	2300      	movne	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	461a      	mov	r2, r3
 800678a:	79fb      	ldrb	r3, [r7, #7]
 800678c:	429a      	cmp	r2, r3
 800678e:	d0a0      	beq.n	80066d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800679a:	b480      	push	{r7}
 800679c:	b095      	sub	sp, #84	@ 0x54
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067aa:	e853 3f00 	ldrex	r3, [r3]
 80067ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	461a      	mov	r2, r3
 80067be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80067c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067c8:	e841 2300 	strex	r3, r2, [r1]
 80067cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e6      	bne.n	80067a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3308      	adds	r3, #8
 80067da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	e853 3f00 	ldrex	r3, [r3]
 80067e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3308      	adds	r3, #8
 80067f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e3      	bne.n	80067d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006810:	2b01      	cmp	r3, #1
 8006812:	d118      	bne.n	8006846 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	60bb      	str	r3, [r7, #8]
   return(result);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f023 0310 	bic.w	r3, r3, #16
 8006828:	647b      	str	r3, [r7, #68]	@ 0x44
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006832:	61bb      	str	r3, [r7, #24]
 8006834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6979      	ldr	r1, [r7, #20]
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	613b      	str	r3, [r7, #16]
   return(result);
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e6      	bne.n	8006814 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800685a:	bf00      	nop
 800685c:	3754      	adds	r7, #84	@ 0x54
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006874:	2b01      	cmp	r3, #1
 8006876:	d101      	bne.n	800687c <HAL_UARTEx_DisableFifoMode+0x16>
 8006878:	2302      	movs	r3, #2
 800687a:	e027      	b.n	80068cc <HAL_UARTEx_DisableFifoMode+0x66>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2224      	movs	r2, #36	@ 0x24
 8006888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0201 	bic.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80068aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e02d      	b.n	800694c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2224      	movs	r2, #36	@ 0x24
 80068fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0201 	bic.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f84f 	bl	80069d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006964:	2b01      	cmp	r3, #1
 8006966:	d101      	bne.n	800696c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006968:	2302      	movs	r3, #2
 800696a:	e02d      	b.n	80069c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2224      	movs	r2, #36	@ 0x24
 8006978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0201 	bic.w	r2, r2, #1
 8006992:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f811 	bl	80069d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d108      	bne.n	80069f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069f0:	e031      	b.n	8006a56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069f2:	2308      	movs	r3, #8
 80069f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069f6:	2308      	movs	r3, #8
 80069f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	0e5b      	lsrs	r3, r3, #25
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	0f5b      	lsrs	r3, r3, #29
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	f003 0307 	and.w	r3, r3, #7
 8006a18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	7b3a      	ldrb	r2, [r7, #12]
 8006a1e:	4911      	ldr	r1, [pc, #68]	@ (8006a64 <UARTEx_SetNbDataToProcess+0x94>)
 8006a20:	5c8a      	ldrb	r2, [r1, r2]
 8006a22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a26:	7b3a      	ldrb	r2, [r7, #12]
 8006a28:	490f      	ldr	r1, [pc, #60]	@ (8006a68 <UARTEx_SetNbDataToProcess+0x98>)
 8006a2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
 8006a3a:	7b7a      	ldrb	r2, [r7, #13]
 8006a3c:	4909      	ldr	r1, [pc, #36]	@ (8006a64 <UARTEx_SetNbDataToProcess+0x94>)
 8006a3e:	5c8a      	ldrb	r2, [r1, r2]
 8006a40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a44:	7b7a      	ldrb	r2, [r7, #13]
 8006a46:	4908      	ldr	r1, [pc, #32]	@ (8006a68 <UARTEx_SetNbDataToProcess+0x98>)
 8006a48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006a56:	bf00      	nop
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	08009e34 	.word	0x08009e34
 8006a68:	08009e3c 	.word	0x08009e3c

08006a6c <__cvt>:
 8006a6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a70:	ec57 6b10 	vmov	r6, r7, d0
 8006a74:	2f00      	cmp	r7, #0
 8006a76:	460c      	mov	r4, r1
 8006a78:	4619      	mov	r1, r3
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	bfbb      	ittet	lt
 8006a7e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006a82:	461f      	movlt	r7, r3
 8006a84:	2300      	movge	r3, #0
 8006a86:	232d      	movlt	r3, #45	@ 0x2d
 8006a88:	700b      	strb	r3, [r1, #0]
 8006a8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a8c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006a90:	4691      	mov	r9, r2
 8006a92:	f023 0820 	bic.w	r8, r3, #32
 8006a96:	bfbc      	itt	lt
 8006a98:	4632      	movlt	r2, r6
 8006a9a:	4616      	movlt	r6, r2
 8006a9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006aa0:	d005      	beq.n	8006aae <__cvt+0x42>
 8006aa2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006aa6:	d100      	bne.n	8006aaa <__cvt+0x3e>
 8006aa8:	3401      	adds	r4, #1
 8006aaa:	2102      	movs	r1, #2
 8006aac:	e000      	b.n	8006ab0 <__cvt+0x44>
 8006aae:	2103      	movs	r1, #3
 8006ab0:	ab03      	add	r3, sp, #12
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	ab02      	add	r3, sp, #8
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	ec47 6b10 	vmov	d0, r6, r7
 8006abc:	4653      	mov	r3, sl
 8006abe:	4622      	mov	r2, r4
 8006ac0:	f000 fe3a 	bl	8007738 <_dtoa_r>
 8006ac4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006ac8:	4605      	mov	r5, r0
 8006aca:	d119      	bne.n	8006b00 <__cvt+0x94>
 8006acc:	f019 0f01 	tst.w	r9, #1
 8006ad0:	d00e      	beq.n	8006af0 <__cvt+0x84>
 8006ad2:	eb00 0904 	add.w	r9, r0, r4
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2300      	movs	r3, #0
 8006ada:	4630      	mov	r0, r6
 8006adc:	4639      	mov	r1, r7
 8006ade:	f7fa f81b 	bl	8000b18 <__aeabi_dcmpeq>
 8006ae2:	b108      	cbz	r0, 8006ae8 <__cvt+0x7c>
 8006ae4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ae8:	2230      	movs	r2, #48	@ 0x30
 8006aea:	9b03      	ldr	r3, [sp, #12]
 8006aec:	454b      	cmp	r3, r9
 8006aee:	d31e      	bcc.n	8006b2e <__cvt+0xc2>
 8006af0:	9b03      	ldr	r3, [sp, #12]
 8006af2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006af4:	1b5b      	subs	r3, r3, r5
 8006af6:	4628      	mov	r0, r5
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	b004      	add	sp, #16
 8006afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b04:	eb00 0904 	add.w	r9, r0, r4
 8006b08:	d1e5      	bne.n	8006ad6 <__cvt+0x6a>
 8006b0a:	7803      	ldrb	r3, [r0, #0]
 8006b0c:	2b30      	cmp	r3, #48	@ 0x30
 8006b0e:	d10a      	bne.n	8006b26 <__cvt+0xba>
 8006b10:	2200      	movs	r2, #0
 8006b12:	2300      	movs	r3, #0
 8006b14:	4630      	mov	r0, r6
 8006b16:	4639      	mov	r1, r7
 8006b18:	f7f9 fffe 	bl	8000b18 <__aeabi_dcmpeq>
 8006b1c:	b918      	cbnz	r0, 8006b26 <__cvt+0xba>
 8006b1e:	f1c4 0401 	rsb	r4, r4, #1
 8006b22:	f8ca 4000 	str.w	r4, [sl]
 8006b26:	f8da 3000 	ldr.w	r3, [sl]
 8006b2a:	4499      	add	r9, r3
 8006b2c:	e7d3      	b.n	8006ad6 <__cvt+0x6a>
 8006b2e:	1c59      	adds	r1, r3, #1
 8006b30:	9103      	str	r1, [sp, #12]
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	e7d9      	b.n	8006aea <__cvt+0x7e>

08006b36 <__exponent>:
 8006b36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b38:	2900      	cmp	r1, #0
 8006b3a:	bfba      	itte	lt
 8006b3c:	4249      	neglt	r1, r1
 8006b3e:	232d      	movlt	r3, #45	@ 0x2d
 8006b40:	232b      	movge	r3, #43	@ 0x2b
 8006b42:	2909      	cmp	r1, #9
 8006b44:	7002      	strb	r2, [r0, #0]
 8006b46:	7043      	strb	r3, [r0, #1]
 8006b48:	dd29      	ble.n	8006b9e <__exponent+0x68>
 8006b4a:	f10d 0307 	add.w	r3, sp, #7
 8006b4e:	461d      	mov	r5, r3
 8006b50:	270a      	movs	r7, #10
 8006b52:	461a      	mov	r2, r3
 8006b54:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b58:	fb07 1416 	mls	r4, r7, r6, r1
 8006b5c:	3430      	adds	r4, #48	@ 0x30
 8006b5e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b62:	460c      	mov	r4, r1
 8006b64:	2c63      	cmp	r4, #99	@ 0x63
 8006b66:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	dcf1      	bgt.n	8006b52 <__exponent+0x1c>
 8006b6e:	3130      	adds	r1, #48	@ 0x30
 8006b70:	1e94      	subs	r4, r2, #2
 8006b72:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b76:	1c41      	adds	r1, r0, #1
 8006b78:	4623      	mov	r3, r4
 8006b7a:	42ab      	cmp	r3, r5
 8006b7c:	d30a      	bcc.n	8006b94 <__exponent+0x5e>
 8006b7e:	f10d 0309 	add.w	r3, sp, #9
 8006b82:	1a9b      	subs	r3, r3, r2
 8006b84:	42ac      	cmp	r4, r5
 8006b86:	bf88      	it	hi
 8006b88:	2300      	movhi	r3, #0
 8006b8a:	3302      	adds	r3, #2
 8006b8c:	4403      	add	r3, r0
 8006b8e:	1a18      	subs	r0, r3, r0
 8006b90:	b003      	add	sp, #12
 8006b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b94:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b98:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b9c:	e7ed      	b.n	8006b7a <__exponent+0x44>
 8006b9e:	2330      	movs	r3, #48	@ 0x30
 8006ba0:	3130      	adds	r1, #48	@ 0x30
 8006ba2:	7083      	strb	r3, [r0, #2]
 8006ba4:	70c1      	strb	r1, [r0, #3]
 8006ba6:	1d03      	adds	r3, r0, #4
 8006ba8:	e7f1      	b.n	8006b8e <__exponent+0x58>
	...

08006bac <_printf_float>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	b08d      	sub	sp, #52	@ 0x34
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006bb8:	4616      	mov	r6, r2
 8006bba:	461f      	mov	r7, r3
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	f000 fcb9 	bl	8007534 <_localeconv_r>
 8006bc2:	6803      	ldr	r3, [r0, #0]
 8006bc4:	9304      	str	r3, [sp, #16]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7f9 fb7a 	bl	80002c0 <strlen>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8006bd4:	9005      	str	r0, [sp, #20]
 8006bd6:	3307      	adds	r3, #7
 8006bd8:	f023 0307 	bic.w	r3, r3, #7
 8006bdc:	f103 0208 	add.w	r2, r3, #8
 8006be0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006be4:	f8d4 b000 	ldr.w	fp, [r4]
 8006be8:	f8c8 2000 	str.w	r2, [r8]
 8006bec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bf0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006bf4:	9307      	str	r3, [sp, #28]
 8006bf6:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bfa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006bfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c02:	4b9c      	ldr	r3, [pc, #624]	@ (8006e74 <_printf_float+0x2c8>)
 8006c04:	f04f 32ff 	mov.w	r2, #4294967295
 8006c08:	f7f9 ffb8 	bl	8000b7c <__aeabi_dcmpun>
 8006c0c:	bb70      	cbnz	r0, 8006c6c <_printf_float+0xc0>
 8006c0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c12:	4b98      	ldr	r3, [pc, #608]	@ (8006e74 <_printf_float+0x2c8>)
 8006c14:	f04f 32ff 	mov.w	r2, #4294967295
 8006c18:	f7f9 ff92 	bl	8000b40 <__aeabi_dcmple>
 8006c1c:	bb30      	cbnz	r0, 8006c6c <_printf_float+0xc0>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2300      	movs	r3, #0
 8006c22:	4640      	mov	r0, r8
 8006c24:	4649      	mov	r1, r9
 8006c26:	f7f9 ff81 	bl	8000b2c <__aeabi_dcmplt>
 8006c2a:	b110      	cbz	r0, 8006c32 <_printf_float+0x86>
 8006c2c:	232d      	movs	r3, #45	@ 0x2d
 8006c2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c32:	4a91      	ldr	r2, [pc, #580]	@ (8006e78 <_printf_float+0x2cc>)
 8006c34:	4b91      	ldr	r3, [pc, #580]	@ (8006e7c <_printf_float+0x2d0>)
 8006c36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c3a:	bf8c      	ite	hi
 8006c3c:	4690      	movhi	r8, r2
 8006c3e:	4698      	movls	r8, r3
 8006c40:	2303      	movs	r3, #3
 8006c42:	6123      	str	r3, [r4, #16]
 8006c44:	f02b 0304 	bic.w	r3, fp, #4
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	f04f 0900 	mov.w	r9, #0
 8006c4e:	9700      	str	r7, [sp, #0]
 8006c50:	4633      	mov	r3, r6
 8006c52:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c54:	4621      	mov	r1, r4
 8006c56:	4628      	mov	r0, r5
 8006c58:	f000 f9d2 	bl	8007000 <_printf_common>
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	f040 808d 	bne.w	8006d7c <_printf_float+0x1d0>
 8006c62:	f04f 30ff 	mov.w	r0, #4294967295
 8006c66:	b00d      	add	sp, #52	@ 0x34
 8006c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	464b      	mov	r3, r9
 8006c70:	4640      	mov	r0, r8
 8006c72:	4649      	mov	r1, r9
 8006c74:	f7f9 ff82 	bl	8000b7c <__aeabi_dcmpun>
 8006c78:	b140      	cbz	r0, 8006c8c <_printf_float+0xe0>
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bfbc      	itt	lt
 8006c80:	232d      	movlt	r3, #45	@ 0x2d
 8006c82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c86:	4a7e      	ldr	r2, [pc, #504]	@ (8006e80 <_printf_float+0x2d4>)
 8006c88:	4b7e      	ldr	r3, [pc, #504]	@ (8006e84 <_printf_float+0x2d8>)
 8006c8a:	e7d4      	b.n	8006c36 <_printf_float+0x8a>
 8006c8c:	6863      	ldr	r3, [r4, #4]
 8006c8e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006c92:	9206      	str	r2, [sp, #24]
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	d13b      	bne.n	8006d10 <_printf_float+0x164>
 8006c98:	2306      	movs	r3, #6
 8006c9a:	6063      	str	r3, [r4, #4]
 8006c9c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	6022      	str	r2, [r4, #0]
 8006ca4:	9303      	str	r3, [sp, #12]
 8006ca6:	ab0a      	add	r3, sp, #40	@ 0x28
 8006ca8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006cac:	ab09      	add	r3, sp, #36	@ 0x24
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	6861      	ldr	r1, [r4, #4]
 8006cb2:	ec49 8b10 	vmov	d0, r8, r9
 8006cb6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f7ff fed6 	bl	8006a6c <__cvt>
 8006cc0:	9b06      	ldr	r3, [sp, #24]
 8006cc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006cc4:	2b47      	cmp	r3, #71	@ 0x47
 8006cc6:	4680      	mov	r8, r0
 8006cc8:	d129      	bne.n	8006d1e <_printf_float+0x172>
 8006cca:	1cc8      	adds	r0, r1, #3
 8006ccc:	db02      	blt.n	8006cd4 <_printf_float+0x128>
 8006cce:	6863      	ldr	r3, [r4, #4]
 8006cd0:	4299      	cmp	r1, r3
 8006cd2:	dd41      	ble.n	8006d58 <_printf_float+0x1ac>
 8006cd4:	f1aa 0a02 	sub.w	sl, sl, #2
 8006cd8:	fa5f fa8a 	uxtb.w	sl, sl
 8006cdc:	3901      	subs	r1, #1
 8006cde:	4652      	mov	r2, sl
 8006ce0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006ce4:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ce6:	f7ff ff26 	bl	8006b36 <__exponent>
 8006cea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cec:	1813      	adds	r3, r2, r0
 8006cee:	2a01      	cmp	r2, #1
 8006cf0:	4681      	mov	r9, r0
 8006cf2:	6123      	str	r3, [r4, #16]
 8006cf4:	dc02      	bgt.n	8006cfc <_printf_float+0x150>
 8006cf6:	6822      	ldr	r2, [r4, #0]
 8006cf8:	07d2      	lsls	r2, r2, #31
 8006cfa:	d501      	bpl.n	8006d00 <_printf_float+0x154>
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	6123      	str	r3, [r4, #16]
 8006d00:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0a2      	beq.n	8006c4e <_printf_float+0xa2>
 8006d08:	232d      	movs	r3, #45	@ 0x2d
 8006d0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d0e:	e79e      	b.n	8006c4e <_printf_float+0xa2>
 8006d10:	9a06      	ldr	r2, [sp, #24]
 8006d12:	2a47      	cmp	r2, #71	@ 0x47
 8006d14:	d1c2      	bne.n	8006c9c <_printf_float+0xf0>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1c0      	bne.n	8006c9c <_printf_float+0xf0>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e7bd      	b.n	8006c9a <_printf_float+0xee>
 8006d1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d22:	d9db      	bls.n	8006cdc <_printf_float+0x130>
 8006d24:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d28:	d118      	bne.n	8006d5c <_printf_float+0x1b0>
 8006d2a:	2900      	cmp	r1, #0
 8006d2c:	6863      	ldr	r3, [r4, #4]
 8006d2e:	dd0b      	ble.n	8006d48 <_printf_float+0x19c>
 8006d30:	6121      	str	r1, [r4, #16]
 8006d32:	b913      	cbnz	r3, 8006d3a <_printf_float+0x18e>
 8006d34:	6822      	ldr	r2, [r4, #0]
 8006d36:	07d0      	lsls	r0, r2, #31
 8006d38:	d502      	bpl.n	8006d40 <_printf_float+0x194>
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	440b      	add	r3, r1
 8006d3e:	6123      	str	r3, [r4, #16]
 8006d40:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d42:	f04f 0900 	mov.w	r9, #0
 8006d46:	e7db      	b.n	8006d00 <_printf_float+0x154>
 8006d48:	b913      	cbnz	r3, 8006d50 <_printf_float+0x1a4>
 8006d4a:	6822      	ldr	r2, [r4, #0]
 8006d4c:	07d2      	lsls	r2, r2, #31
 8006d4e:	d501      	bpl.n	8006d54 <_printf_float+0x1a8>
 8006d50:	3302      	adds	r3, #2
 8006d52:	e7f4      	b.n	8006d3e <_printf_float+0x192>
 8006d54:	2301      	movs	r3, #1
 8006d56:	e7f2      	b.n	8006d3e <_printf_float+0x192>
 8006d58:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d5e:	4299      	cmp	r1, r3
 8006d60:	db05      	blt.n	8006d6e <_printf_float+0x1c2>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	6121      	str	r1, [r4, #16]
 8006d66:	07d8      	lsls	r0, r3, #31
 8006d68:	d5ea      	bpl.n	8006d40 <_printf_float+0x194>
 8006d6a:	1c4b      	adds	r3, r1, #1
 8006d6c:	e7e7      	b.n	8006d3e <_printf_float+0x192>
 8006d6e:	2900      	cmp	r1, #0
 8006d70:	bfd4      	ite	le
 8006d72:	f1c1 0202 	rsble	r2, r1, #2
 8006d76:	2201      	movgt	r2, #1
 8006d78:	4413      	add	r3, r2
 8006d7a:	e7e0      	b.n	8006d3e <_printf_float+0x192>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	055a      	lsls	r2, r3, #21
 8006d80:	d407      	bmi.n	8006d92 <_printf_float+0x1e6>
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	4642      	mov	r2, r8
 8006d86:	4631      	mov	r1, r6
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b8      	blx	r7
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	d12b      	bne.n	8006de8 <_printf_float+0x23c>
 8006d90:	e767      	b.n	8006c62 <_printf_float+0xb6>
 8006d92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d96:	f240 80dd 	bls.w	8006f54 <_printf_float+0x3a8>
 8006d9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d9e:	2200      	movs	r2, #0
 8006da0:	2300      	movs	r3, #0
 8006da2:	f7f9 feb9 	bl	8000b18 <__aeabi_dcmpeq>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d033      	beq.n	8006e12 <_printf_float+0x266>
 8006daa:	4a37      	ldr	r2, [pc, #220]	@ (8006e88 <_printf_float+0x2dc>)
 8006dac:	2301      	movs	r3, #1
 8006dae:	4631      	mov	r1, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b8      	blx	r7
 8006db4:	3001      	adds	r0, #1
 8006db6:	f43f af54 	beq.w	8006c62 <_printf_float+0xb6>
 8006dba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006dbe:	4543      	cmp	r3, r8
 8006dc0:	db02      	blt.n	8006dc8 <_printf_float+0x21c>
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	07d8      	lsls	r0, r3, #31
 8006dc6:	d50f      	bpl.n	8006de8 <_printf_float+0x23c>
 8006dc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dcc:	4631      	mov	r1, r6
 8006dce:	4628      	mov	r0, r5
 8006dd0:	47b8      	blx	r7
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	f43f af45 	beq.w	8006c62 <_printf_float+0xb6>
 8006dd8:	f04f 0900 	mov.w	r9, #0
 8006ddc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006de0:	f104 0a1a 	add.w	sl, r4, #26
 8006de4:	45c8      	cmp	r8, r9
 8006de6:	dc09      	bgt.n	8006dfc <_printf_float+0x250>
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	079b      	lsls	r3, r3, #30
 8006dec:	f100 8103 	bmi.w	8006ff6 <_printf_float+0x44a>
 8006df0:	68e0      	ldr	r0, [r4, #12]
 8006df2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006df4:	4298      	cmp	r0, r3
 8006df6:	bfb8      	it	lt
 8006df8:	4618      	movlt	r0, r3
 8006dfa:	e734      	b.n	8006c66 <_printf_float+0xba>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	4652      	mov	r2, sl
 8006e00:	4631      	mov	r1, r6
 8006e02:	4628      	mov	r0, r5
 8006e04:	47b8      	blx	r7
 8006e06:	3001      	adds	r0, #1
 8006e08:	f43f af2b 	beq.w	8006c62 <_printf_float+0xb6>
 8006e0c:	f109 0901 	add.w	r9, r9, #1
 8006e10:	e7e8      	b.n	8006de4 <_printf_float+0x238>
 8006e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	dc39      	bgt.n	8006e8c <_printf_float+0x2e0>
 8006e18:	4a1b      	ldr	r2, [pc, #108]	@ (8006e88 <_printf_float+0x2dc>)
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	4628      	mov	r0, r5
 8006e20:	47b8      	blx	r7
 8006e22:	3001      	adds	r0, #1
 8006e24:	f43f af1d 	beq.w	8006c62 <_printf_float+0xb6>
 8006e28:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e2c:	ea59 0303 	orrs.w	r3, r9, r3
 8006e30:	d102      	bne.n	8006e38 <_printf_float+0x28c>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	07d9      	lsls	r1, r3, #31
 8006e36:	d5d7      	bpl.n	8006de8 <_printf_float+0x23c>
 8006e38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	f43f af0d 	beq.w	8006c62 <_printf_float+0xb6>
 8006e48:	f04f 0a00 	mov.w	sl, #0
 8006e4c:	f104 0b1a 	add.w	fp, r4, #26
 8006e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e52:	425b      	negs	r3, r3
 8006e54:	4553      	cmp	r3, sl
 8006e56:	dc01      	bgt.n	8006e5c <_printf_float+0x2b0>
 8006e58:	464b      	mov	r3, r9
 8006e5a:	e793      	b.n	8006d84 <_printf_float+0x1d8>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	465a      	mov	r2, fp
 8006e60:	4631      	mov	r1, r6
 8006e62:	4628      	mov	r0, r5
 8006e64:	47b8      	blx	r7
 8006e66:	3001      	adds	r0, #1
 8006e68:	f43f aefb 	beq.w	8006c62 <_printf_float+0xb6>
 8006e6c:	f10a 0a01 	add.w	sl, sl, #1
 8006e70:	e7ee      	b.n	8006e50 <_printf_float+0x2a4>
 8006e72:	bf00      	nop
 8006e74:	7fefffff 	.word	0x7fefffff
 8006e78:	08009e48 	.word	0x08009e48
 8006e7c:	08009e44 	.word	0x08009e44
 8006e80:	08009e50 	.word	0x08009e50
 8006e84:	08009e4c 	.word	0x08009e4c
 8006e88:	08009e54 	.word	0x08009e54
 8006e8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e8e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e92:	4553      	cmp	r3, sl
 8006e94:	bfa8      	it	ge
 8006e96:	4653      	movge	r3, sl
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	4699      	mov	r9, r3
 8006e9c:	dc36      	bgt.n	8006f0c <_printf_float+0x360>
 8006e9e:	f04f 0b00 	mov.w	fp, #0
 8006ea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ea6:	f104 021a 	add.w	r2, r4, #26
 8006eaa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006eac:	9306      	str	r3, [sp, #24]
 8006eae:	eba3 0309 	sub.w	r3, r3, r9
 8006eb2:	455b      	cmp	r3, fp
 8006eb4:	dc31      	bgt.n	8006f1a <_printf_float+0x36e>
 8006eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb8:	459a      	cmp	sl, r3
 8006eba:	dc3a      	bgt.n	8006f32 <_printf_float+0x386>
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	07da      	lsls	r2, r3, #31
 8006ec0:	d437      	bmi.n	8006f32 <_printf_float+0x386>
 8006ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec4:	ebaa 0903 	sub.w	r9, sl, r3
 8006ec8:	9b06      	ldr	r3, [sp, #24]
 8006eca:	ebaa 0303 	sub.w	r3, sl, r3
 8006ece:	4599      	cmp	r9, r3
 8006ed0:	bfa8      	it	ge
 8006ed2:	4699      	movge	r9, r3
 8006ed4:	f1b9 0f00 	cmp.w	r9, #0
 8006ed8:	dc33      	bgt.n	8006f42 <_printf_float+0x396>
 8006eda:	f04f 0800 	mov.w	r8, #0
 8006ede:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ee2:	f104 0b1a 	add.w	fp, r4, #26
 8006ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee8:	ebaa 0303 	sub.w	r3, sl, r3
 8006eec:	eba3 0309 	sub.w	r3, r3, r9
 8006ef0:	4543      	cmp	r3, r8
 8006ef2:	f77f af79 	ble.w	8006de8 <_printf_float+0x23c>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	465a      	mov	r2, fp
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	47b8      	blx	r7
 8006f00:	3001      	adds	r0, #1
 8006f02:	f43f aeae 	beq.w	8006c62 <_printf_float+0xb6>
 8006f06:	f108 0801 	add.w	r8, r8, #1
 8006f0a:	e7ec      	b.n	8006ee6 <_printf_float+0x33a>
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b8      	blx	r7
 8006f14:	3001      	adds	r0, #1
 8006f16:	d1c2      	bne.n	8006e9e <_printf_float+0x2f2>
 8006f18:	e6a3      	b.n	8006c62 <_printf_float+0xb6>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4628      	mov	r0, r5
 8006f20:	9206      	str	r2, [sp, #24]
 8006f22:	47b8      	blx	r7
 8006f24:	3001      	adds	r0, #1
 8006f26:	f43f ae9c 	beq.w	8006c62 <_printf_float+0xb6>
 8006f2a:	9a06      	ldr	r2, [sp, #24]
 8006f2c:	f10b 0b01 	add.w	fp, fp, #1
 8006f30:	e7bb      	b.n	8006eaa <_printf_float+0x2fe>
 8006f32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f36:	4631      	mov	r1, r6
 8006f38:	4628      	mov	r0, r5
 8006f3a:	47b8      	blx	r7
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	d1c0      	bne.n	8006ec2 <_printf_float+0x316>
 8006f40:	e68f      	b.n	8006c62 <_printf_float+0xb6>
 8006f42:	9a06      	ldr	r2, [sp, #24]
 8006f44:	464b      	mov	r3, r9
 8006f46:	4442      	add	r2, r8
 8006f48:	4631      	mov	r1, r6
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	47b8      	blx	r7
 8006f4e:	3001      	adds	r0, #1
 8006f50:	d1c3      	bne.n	8006eda <_printf_float+0x32e>
 8006f52:	e686      	b.n	8006c62 <_printf_float+0xb6>
 8006f54:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f58:	f1ba 0f01 	cmp.w	sl, #1
 8006f5c:	dc01      	bgt.n	8006f62 <_printf_float+0x3b6>
 8006f5e:	07db      	lsls	r3, r3, #31
 8006f60:	d536      	bpl.n	8006fd0 <_printf_float+0x424>
 8006f62:	2301      	movs	r3, #1
 8006f64:	4642      	mov	r2, r8
 8006f66:	4631      	mov	r1, r6
 8006f68:	4628      	mov	r0, r5
 8006f6a:	47b8      	blx	r7
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	f43f ae78 	beq.w	8006c62 <_printf_float+0xb6>
 8006f72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f76:	4631      	mov	r1, r6
 8006f78:	4628      	mov	r0, r5
 8006f7a:	47b8      	blx	r7
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	f43f ae70 	beq.w	8006c62 <_printf_float+0xb6>
 8006f82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f86:	2200      	movs	r2, #0
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f8e:	f7f9 fdc3 	bl	8000b18 <__aeabi_dcmpeq>
 8006f92:	b9c0      	cbnz	r0, 8006fc6 <_printf_float+0x41a>
 8006f94:	4653      	mov	r3, sl
 8006f96:	f108 0201 	add.w	r2, r8, #1
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	47b8      	blx	r7
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d10c      	bne.n	8006fbe <_printf_float+0x412>
 8006fa4:	e65d      	b.n	8006c62 <_printf_float+0xb6>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	465a      	mov	r2, fp
 8006faa:	4631      	mov	r1, r6
 8006fac:	4628      	mov	r0, r5
 8006fae:	47b8      	blx	r7
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	f43f ae56 	beq.w	8006c62 <_printf_float+0xb6>
 8006fb6:	f108 0801 	add.w	r8, r8, #1
 8006fba:	45d0      	cmp	r8, sl
 8006fbc:	dbf3      	blt.n	8006fa6 <_printf_float+0x3fa>
 8006fbe:	464b      	mov	r3, r9
 8006fc0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006fc4:	e6df      	b.n	8006d86 <_printf_float+0x1da>
 8006fc6:	f04f 0800 	mov.w	r8, #0
 8006fca:	f104 0b1a 	add.w	fp, r4, #26
 8006fce:	e7f4      	b.n	8006fba <_printf_float+0x40e>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	4642      	mov	r2, r8
 8006fd4:	e7e1      	b.n	8006f9a <_printf_float+0x3ee>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	464a      	mov	r2, r9
 8006fda:	4631      	mov	r1, r6
 8006fdc:	4628      	mov	r0, r5
 8006fde:	47b8      	blx	r7
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	f43f ae3e 	beq.w	8006c62 <_printf_float+0xb6>
 8006fe6:	f108 0801 	add.w	r8, r8, #1
 8006fea:	68e3      	ldr	r3, [r4, #12]
 8006fec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fee:	1a5b      	subs	r3, r3, r1
 8006ff0:	4543      	cmp	r3, r8
 8006ff2:	dcf0      	bgt.n	8006fd6 <_printf_float+0x42a>
 8006ff4:	e6fc      	b.n	8006df0 <_printf_float+0x244>
 8006ff6:	f04f 0800 	mov.w	r8, #0
 8006ffa:	f104 0919 	add.w	r9, r4, #25
 8006ffe:	e7f4      	b.n	8006fea <_printf_float+0x43e>

08007000 <_printf_common>:
 8007000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007004:	4616      	mov	r6, r2
 8007006:	4698      	mov	r8, r3
 8007008:	688a      	ldr	r2, [r1, #8]
 800700a:	690b      	ldr	r3, [r1, #16]
 800700c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007010:	4293      	cmp	r3, r2
 8007012:	bfb8      	it	lt
 8007014:	4613      	movlt	r3, r2
 8007016:	6033      	str	r3, [r6, #0]
 8007018:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800701c:	4607      	mov	r7, r0
 800701e:	460c      	mov	r4, r1
 8007020:	b10a      	cbz	r2, 8007026 <_printf_common+0x26>
 8007022:	3301      	adds	r3, #1
 8007024:	6033      	str	r3, [r6, #0]
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	0699      	lsls	r1, r3, #26
 800702a:	bf42      	ittt	mi
 800702c:	6833      	ldrmi	r3, [r6, #0]
 800702e:	3302      	addmi	r3, #2
 8007030:	6033      	strmi	r3, [r6, #0]
 8007032:	6825      	ldr	r5, [r4, #0]
 8007034:	f015 0506 	ands.w	r5, r5, #6
 8007038:	d106      	bne.n	8007048 <_printf_common+0x48>
 800703a:	f104 0a19 	add.w	sl, r4, #25
 800703e:	68e3      	ldr	r3, [r4, #12]
 8007040:	6832      	ldr	r2, [r6, #0]
 8007042:	1a9b      	subs	r3, r3, r2
 8007044:	42ab      	cmp	r3, r5
 8007046:	dc26      	bgt.n	8007096 <_printf_common+0x96>
 8007048:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800704c:	6822      	ldr	r2, [r4, #0]
 800704e:	3b00      	subs	r3, #0
 8007050:	bf18      	it	ne
 8007052:	2301      	movne	r3, #1
 8007054:	0692      	lsls	r2, r2, #26
 8007056:	d42b      	bmi.n	80070b0 <_printf_common+0xb0>
 8007058:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800705c:	4641      	mov	r1, r8
 800705e:	4638      	mov	r0, r7
 8007060:	47c8      	blx	r9
 8007062:	3001      	adds	r0, #1
 8007064:	d01e      	beq.n	80070a4 <_printf_common+0xa4>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	6922      	ldr	r2, [r4, #16]
 800706a:	f003 0306 	and.w	r3, r3, #6
 800706e:	2b04      	cmp	r3, #4
 8007070:	bf02      	ittt	eq
 8007072:	68e5      	ldreq	r5, [r4, #12]
 8007074:	6833      	ldreq	r3, [r6, #0]
 8007076:	1aed      	subeq	r5, r5, r3
 8007078:	68a3      	ldr	r3, [r4, #8]
 800707a:	bf0c      	ite	eq
 800707c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007080:	2500      	movne	r5, #0
 8007082:	4293      	cmp	r3, r2
 8007084:	bfc4      	itt	gt
 8007086:	1a9b      	subgt	r3, r3, r2
 8007088:	18ed      	addgt	r5, r5, r3
 800708a:	2600      	movs	r6, #0
 800708c:	341a      	adds	r4, #26
 800708e:	42b5      	cmp	r5, r6
 8007090:	d11a      	bne.n	80070c8 <_printf_common+0xc8>
 8007092:	2000      	movs	r0, #0
 8007094:	e008      	b.n	80070a8 <_printf_common+0xa8>
 8007096:	2301      	movs	r3, #1
 8007098:	4652      	mov	r2, sl
 800709a:	4641      	mov	r1, r8
 800709c:	4638      	mov	r0, r7
 800709e:	47c8      	blx	r9
 80070a0:	3001      	adds	r0, #1
 80070a2:	d103      	bne.n	80070ac <_printf_common+0xac>
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295
 80070a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ac:	3501      	adds	r5, #1
 80070ae:	e7c6      	b.n	800703e <_printf_common+0x3e>
 80070b0:	18e1      	adds	r1, r4, r3
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	2030      	movs	r0, #48	@ 0x30
 80070b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070ba:	4422      	add	r2, r4
 80070bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070c4:	3302      	adds	r3, #2
 80070c6:	e7c7      	b.n	8007058 <_printf_common+0x58>
 80070c8:	2301      	movs	r3, #1
 80070ca:	4622      	mov	r2, r4
 80070cc:	4641      	mov	r1, r8
 80070ce:	4638      	mov	r0, r7
 80070d0:	47c8      	blx	r9
 80070d2:	3001      	adds	r0, #1
 80070d4:	d0e6      	beq.n	80070a4 <_printf_common+0xa4>
 80070d6:	3601      	adds	r6, #1
 80070d8:	e7d9      	b.n	800708e <_printf_common+0x8e>
	...

080070dc <_printf_i>:
 80070dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070e0:	7e0f      	ldrb	r7, [r1, #24]
 80070e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070e4:	2f78      	cmp	r7, #120	@ 0x78
 80070e6:	4691      	mov	r9, r2
 80070e8:	4680      	mov	r8, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	469a      	mov	sl, r3
 80070ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070f2:	d807      	bhi.n	8007104 <_printf_i+0x28>
 80070f4:	2f62      	cmp	r7, #98	@ 0x62
 80070f6:	d80a      	bhi.n	800710e <_printf_i+0x32>
 80070f8:	2f00      	cmp	r7, #0
 80070fa:	f000 80d1 	beq.w	80072a0 <_printf_i+0x1c4>
 80070fe:	2f58      	cmp	r7, #88	@ 0x58
 8007100:	f000 80b8 	beq.w	8007274 <_printf_i+0x198>
 8007104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007108:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800710c:	e03a      	b.n	8007184 <_printf_i+0xa8>
 800710e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007112:	2b15      	cmp	r3, #21
 8007114:	d8f6      	bhi.n	8007104 <_printf_i+0x28>
 8007116:	a101      	add	r1, pc, #4	@ (adr r1, 800711c <_printf_i+0x40>)
 8007118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800711c:	08007175 	.word	0x08007175
 8007120:	08007189 	.word	0x08007189
 8007124:	08007105 	.word	0x08007105
 8007128:	08007105 	.word	0x08007105
 800712c:	08007105 	.word	0x08007105
 8007130:	08007105 	.word	0x08007105
 8007134:	08007189 	.word	0x08007189
 8007138:	08007105 	.word	0x08007105
 800713c:	08007105 	.word	0x08007105
 8007140:	08007105 	.word	0x08007105
 8007144:	08007105 	.word	0x08007105
 8007148:	08007287 	.word	0x08007287
 800714c:	080071b3 	.word	0x080071b3
 8007150:	08007241 	.word	0x08007241
 8007154:	08007105 	.word	0x08007105
 8007158:	08007105 	.word	0x08007105
 800715c:	080072a9 	.word	0x080072a9
 8007160:	08007105 	.word	0x08007105
 8007164:	080071b3 	.word	0x080071b3
 8007168:	08007105 	.word	0x08007105
 800716c:	08007105 	.word	0x08007105
 8007170:	08007249 	.word	0x08007249
 8007174:	6833      	ldr	r3, [r6, #0]
 8007176:	1d1a      	adds	r2, r3, #4
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6032      	str	r2, [r6, #0]
 800717c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007180:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007184:	2301      	movs	r3, #1
 8007186:	e09c      	b.n	80072c2 <_printf_i+0x1e6>
 8007188:	6833      	ldr	r3, [r6, #0]
 800718a:	6820      	ldr	r0, [r4, #0]
 800718c:	1d19      	adds	r1, r3, #4
 800718e:	6031      	str	r1, [r6, #0]
 8007190:	0606      	lsls	r6, r0, #24
 8007192:	d501      	bpl.n	8007198 <_printf_i+0xbc>
 8007194:	681d      	ldr	r5, [r3, #0]
 8007196:	e003      	b.n	80071a0 <_printf_i+0xc4>
 8007198:	0645      	lsls	r5, r0, #25
 800719a:	d5fb      	bpl.n	8007194 <_printf_i+0xb8>
 800719c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071a0:	2d00      	cmp	r5, #0
 80071a2:	da03      	bge.n	80071ac <_printf_i+0xd0>
 80071a4:	232d      	movs	r3, #45	@ 0x2d
 80071a6:	426d      	negs	r5, r5
 80071a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071ac:	4858      	ldr	r0, [pc, #352]	@ (8007310 <_printf_i+0x234>)
 80071ae:	230a      	movs	r3, #10
 80071b0:	e011      	b.n	80071d6 <_printf_i+0xfa>
 80071b2:	6821      	ldr	r1, [r4, #0]
 80071b4:	6833      	ldr	r3, [r6, #0]
 80071b6:	0608      	lsls	r0, r1, #24
 80071b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80071bc:	d402      	bmi.n	80071c4 <_printf_i+0xe8>
 80071be:	0649      	lsls	r1, r1, #25
 80071c0:	bf48      	it	mi
 80071c2:	b2ad      	uxthmi	r5, r5
 80071c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80071c6:	4852      	ldr	r0, [pc, #328]	@ (8007310 <_printf_i+0x234>)
 80071c8:	6033      	str	r3, [r6, #0]
 80071ca:	bf14      	ite	ne
 80071cc:	230a      	movne	r3, #10
 80071ce:	2308      	moveq	r3, #8
 80071d0:	2100      	movs	r1, #0
 80071d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071d6:	6866      	ldr	r6, [r4, #4]
 80071d8:	60a6      	str	r6, [r4, #8]
 80071da:	2e00      	cmp	r6, #0
 80071dc:	db05      	blt.n	80071ea <_printf_i+0x10e>
 80071de:	6821      	ldr	r1, [r4, #0]
 80071e0:	432e      	orrs	r6, r5
 80071e2:	f021 0104 	bic.w	r1, r1, #4
 80071e6:	6021      	str	r1, [r4, #0]
 80071e8:	d04b      	beq.n	8007282 <_printf_i+0x1a6>
 80071ea:	4616      	mov	r6, r2
 80071ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80071f0:	fb03 5711 	mls	r7, r3, r1, r5
 80071f4:	5dc7      	ldrb	r7, [r0, r7]
 80071f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071fa:	462f      	mov	r7, r5
 80071fc:	42bb      	cmp	r3, r7
 80071fe:	460d      	mov	r5, r1
 8007200:	d9f4      	bls.n	80071ec <_printf_i+0x110>
 8007202:	2b08      	cmp	r3, #8
 8007204:	d10b      	bne.n	800721e <_printf_i+0x142>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	07df      	lsls	r7, r3, #31
 800720a:	d508      	bpl.n	800721e <_printf_i+0x142>
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	6861      	ldr	r1, [r4, #4]
 8007210:	4299      	cmp	r1, r3
 8007212:	bfde      	ittt	le
 8007214:	2330      	movle	r3, #48	@ 0x30
 8007216:	f806 3c01 	strble.w	r3, [r6, #-1]
 800721a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800721e:	1b92      	subs	r2, r2, r6
 8007220:	6122      	str	r2, [r4, #16]
 8007222:	f8cd a000 	str.w	sl, [sp]
 8007226:	464b      	mov	r3, r9
 8007228:	aa03      	add	r2, sp, #12
 800722a:	4621      	mov	r1, r4
 800722c:	4640      	mov	r0, r8
 800722e:	f7ff fee7 	bl	8007000 <_printf_common>
 8007232:	3001      	adds	r0, #1
 8007234:	d14a      	bne.n	80072cc <_printf_i+0x1f0>
 8007236:	f04f 30ff 	mov.w	r0, #4294967295
 800723a:	b004      	add	sp, #16
 800723c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	f043 0320 	orr.w	r3, r3, #32
 8007246:	6023      	str	r3, [r4, #0]
 8007248:	4832      	ldr	r0, [pc, #200]	@ (8007314 <_printf_i+0x238>)
 800724a:	2778      	movs	r7, #120	@ 0x78
 800724c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	6831      	ldr	r1, [r6, #0]
 8007254:	061f      	lsls	r7, r3, #24
 8007256:	f851 5b04 	ldr.w	r5, [r1], #4
 800725a:	d402      	bmi.n	8007262 <_printf_i+0x186>
 800725c:	065f      	lsls	r7, r3, #25
 800725e:	bf48      	it	mi
 8007260:	b2ad      	uxthmi	r5, r5
 8007262:	6031      	str	r1, [r6, #0]
 8007264:	07d9      	lsls	r1, r3, #31
 8007266:	bf44      	itt	mi
 8007268:	f043 0320 	orrmi.w	r3, r3, #32
 800726c:	6023      	strmi	r3, [r4, #0]
 800726e:	b11d      	cbz	r5, 8007278 <_printf_i+0x19c>
 8007270:	2310      	movs	r3, #16
 8007272:	e7ad      	b.n	80071d0 <_printf_i+0xf4>
 8007274:	4826      	ldr	r0, [pc, #152]	@ (8007310 <_printf_i+0x234>)
 8007276:	e7e9      	b.n	800724c <_printf_i+0x170>
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	f023 0320 	bic.w	r3, r3, #32
 800727e:	6023      	str	r3, [r4, #0]
 8007280:	e7f6      	b.n	8007270 <_printf_i+0x194>
 8007282:	4616      	mov	r6, r2
 8007284:	e7bd      	b.n	8007202 <_printf_i+0x126>
 8007286:	6833      	ldr	r3, [r6, #0]
 8007288:	6825      	ldr	r5, [r4, #0]
 800728a:	6961      	ldr	r1, [r4, #20]
 800728c:	1d18      	adds	r0, r3, #4
 800728e:	6030      	str	r0, [r6, #0]
 8007290:	062e      	lsls	r6, r5, #24
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	d501      	bpl.n	800729a <_printf_i+0x1be>
 8007296:	6019      	str	r1, [r3, #0]
 8007298:	e002      	b.n	80072a0 <_printf_i+0x1c4>
 800729a:	0668      	lsls	r0, r5, #25
 800729c:	d5fb      	bpl.n	8007296 <_printf_i+0x1ba>
 800729e:	8019      	strh	r1, [r3, #0]
 80072a0:	2300      	movs	r3, #0
 80072a2:	6123      	str	r3, [r4, #16]
 80072a4:	4616      	mov	r6, r2
 80072a6:	e7bc      	b.n	8007222 <_printf_i+0x146>
 80072a8:	6833      	ldr	r3, [r6, #0]
 80072aa:	1d1a      	adds	r2, r3, #4
 80072ac:	6032      	str	r2, [r6, #0]
 80072ae:	681e      	ldr	r6, [r3, #0]
 80072b0:	6862      	ldr	r2, [r4, #4]
 80072b2:	2100      	movs	r1, #0
 80072b4:	4630      	mov	r0, r6
 80072b6:	f7f8 ffb3 	bl	8000220 <memchr>
 80072ba:	b108      	cbz	r0, 80072c0 <_printf_i+0x1e4>
 80072bc:	1b80      	subs	r0, r0, r6
 80072be:	6060      	str	r0, [r4, #4]
 80072c0:	6863      	ldr	r3, [r4, #4]
 80072c2:	6123      	str	r3, [r4, #16]
 80072c4:	2300      	movs	r3, #0
 80072c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072ca:	e7aa      	b.n	8007222 <_printf_i+0x146>
 80072cc:	6923      	ldr	r3, [r4, #16]
 80072ce:	4632      	mov	r2, r6
 80072d0:	4649      	mov	r1, r9
 80072d2:	4640      	mov	r0, r8
 80072d4:	47d0      	blx	sl
 80072d6:	3001      	adds	r0, #1
 80072d8:	d0ad      	beq.n	8007236 <_printf_i+0x15a>
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	079b      	lsls	r3, r3, #30
 80072de:	d413      	bmi.n	8007308 <_printf_i+0x22c>
 80072e0:	68e0      	ldr	r0, [r4, #12]
 80072e2:	9b03      	ldr	r3, [sp, #12]
 80072e4:	4298      	cmp	r0, r3
 80072e6:	bfb8      	it	lt
 80072e8:	4618      	movlt	r0, r3
 80072ea:	e7a6      	b.n	800723a <_printf_i+0x15e>
 80072ec:	2301      	movs	r3, #1
 80072ee:	4632      	mov	r2, r6
 80072f0:	4649      	mov	r1, r9
 80072f2:	4640      	mov	r0, r8
 80072f4:	47d0      	blx	sl
 80072f6:	3001      	adds	r0, #1
 80072f8:	d09d      	beq.n	8007236 <_printf_i+0x15a>
 80072fa:	3501      	adds	r5, #1
 80072fc:	68e3      	ldr	r3, [r4, #12]
 80072fe:	9903      	ldr	r1, [sp, #12]
 8007300:	1a5b      	subs	r3, r3, r1
 8007302:	42ab      	cmp	r3, r5
 8007304:	dcf2      	bgt.n	80072ec <_printf_i+0x210>
 8007306:	e7eb      	b.n	80072e0 <_printf_i+0x204>
 8007308:	2500      	movs	r5, #0
 800730a:	f104 0619 	add.w	r6, r4, #25
 800730e:	e7f5      	b.n	80072fc <_printf_i+0x220>
 8007310:	08009e56 	.word	0x08009e56
 8007314:	08009e67 	.word	0x08009e67

08007318 <std>:
 8007318:	2300      	movs	r3, #0
 800731a:	b510      	push	{r4, lr}
 800731c:	4604      	mov	r4, r0
 800731e:	e9c0 3300 	strd	r3, r3, [r0]
 8007322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007326:	6083      	str	r3, [r0, #8]
 8007328:	8181      	strh	r1, [r0, #12]
 800732a:	6643      	str	r3, [r0, #100]	@ 0x64
 800732c:	81c2      	strh	r2, [r0, #14]
 800732e:	6183      	str	r3, [r0, #24]
 8007330:	4619      	mov	r1, r3
 8007332:	2208      	movs	r2, #8
 8007334:	305c      	adds	r0, #92	@ 0x5c
 8007336:	f000 f8f4 	bl	8007522 <memset>
 800733a:	4b0d      	ldr	r3, [pc, #52]	@ (8007370 <std+0x58>)
 800733c:	6263      	str	r3, [r4, #36]	@ 0x24
 800733e:	4b0d      	ldr	r3, [pc, #52]	@ (8007374 <std+0x5c>)
 8007340:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007342:	4b0d      	ldr	r3, [pc, #52]	@ (8007378 <std+0x60>)
 8007344:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007346:	4b0d      	ldr	r3, [pc, #52]	@ (800737c <std+0x64>)
 8007348:	6323      	str	r3, [r4, #48]	@ 0x30
 800734a:	4b0d      	ldr	r3, [pc, #52]	@ (8007380 <std+0x68>)
 800734c:	6224      	str	r4, [r4, #32]
 800734e:	429c      	cmp	r4, r3
 8007350:	d006      	beq.n	8007360 <std+0x48>
 8007352:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007356:	4294      	cmp	r4, r2
 8007358:	d002      	beq.n	8007360 <std+0x48>
 800735a:	33d0      	adds	r3, #208	@ 0xd0
 800735c:	429c      	cmp	r4, r3
 800735e:	d105      	bne.n	800736c <std+0x54>
 8007360:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007368:	f000 b958 	b.w	800761c <__retarget_lock_init_recursive>
 800736c:	bd10      	pop	{r4, pc}
 800736e:	bf00      	nop
 8007370:	0800749d 	.word	0x0800749d
 8007374:	080074bf 	.word	0x080074bf
 8007378:	080074f7 	.word	0x080074f7
 800737c:	0800751b 	.word	0x0800751b
 8007380:	20000720 	.word	0x20000720

08007384 <stdio_exit_handler>:
 8007384:	4a02      	ldr	r2, [pc, #8]	@ (8007390 <stdio_exit_handler+0xc>)
 8007386:	4903      	ldr	r1, [pc, #12]	@ (8007394 <stdio_exit_handler+0x10>)
 8007388:	4803      	ldr	r0, [pc, #12]	@ (8007398 <stdio_exit_handler+0x14>)
 800738a:	f000 b869 	b.w	8007460 <_fwalk_sglue>
 800738e:	bf00      	nop
 8007390:	2000000c 	.word	0x2000000c
 8007394:	08008cd5 	.word	0x08008cd5
 8007398:	2000001c 	.word	0x2000001c

0800739c <cleanup_stdio>:
 800739c:	6841      	ldr	r1, [r0, #4]
 800739e:	4b0c      	ldr	r3, [pc, #48]	@ (80073d0 <cleanup_stdio+0x34>)
 80073a0:	4299      	cmp	r1, r3
 80073a2:	b510      	push	{r4, lr}
 80073a4:	4604      	mov	r4, r0
 80073a6:	d001      	beq.n	80073ac <cleanup_stdio+0x10>
 80073a8:	f001 fc94 	bl	8008cd4 <_fflush_r>
 80073ac:	68a1      	ldr	r1, [r4, #8]
 80073ae:	4b09      	ldr	r3, [pc, #36]	@ (80073d4 <cleanup_stdio+0x38>)
 80073b0:	4299      	cmp	r1, r3
 80073b2:	d002      	beq.n	80073ba <cleanup_stdio+0x1e>
 80073b4:	4620      	mov	r0, r4
 80073b6:	f001 fc8d 	bl	8008cd4 <_fflush_r>
 80073ba:	68e1      	ldr	r1, [r4, #12]
 80073bc:	4b06      	ldr	r3, [pc, #24]	@ (80073d8 <cleanup_stdio+0x3c>)
 80073be:	4299      	cmp	r1, r3
 80073c0:	d004      	beq.n	80073cc <cleanup_stdio+0x30>
 80073c2:	4620      	mov	r0, r4
 80073c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c8:	f001 bc84 	b.w	8008cd4 <_fflush_r>
 80073cc:	bd10      	pop	{r4, pc}
 80073ce:	bf00      	nop
 80073d0:	20000720 	.word	0x20000720
 80073d4:	20000788 	.word	0x20000788
 80073d8:	200007f0 	.word	0x200007f0

080073dc <global_stdio_init.part.0>:
 80073dc:	b510      	push	{r4, lr}
 80073de:	4b0b      	ldr	r3, [pc, #44]	@ (800740c <global_stdio_init.part.0+0x30>)
 80073e0:	4c0b      	ldr	r4, [pc, #44]	@ (8007410 <global_stdio_init.part.0+0x34>)
 80073e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007414 <global_stdio_init.part.0+0x38>)
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	4620      	mov	r0, r4
 80073e8:	2200      	movs	r2, #0
 80073ea:	2104      	movs	r1, #4
 80073ec:	f7ff ff94 	bl	8007318 <std>
 80073f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073f4:	2201      	movs	r2, #1
 80073f6:	2109      	movs	r1, #9
 80073f8:	f7ff ff8e 	bl	8007318 <std>
 80073fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007400:	2202      	movs	r2, #2
 8007402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007406:	2112      	movs	r1, #18
 8007408:	f7ff bf86 	b.w	8007318 <std>
 800740c:	20000858 	.word	0x20000858
 8007410:	20000720 	.word	0x20000720
 8007414:	08007385 	.word	0x08007385

08007418 <__sfp_lock_acquire>:
 8007418:	4801      	ldr	r0, [pc, #4]	@ (8007420 <__sfp_lock_acquire+0x8>)
 800741a:	f000 b900 	b.w	800761e <__retarget_lock_acquire_recursive>
 800741e:	bf00      	nop
 8007420:	20000861 	.word	0x20000861

08007424 <__sfp_lock_release>:
 8007424:	4801      	ldr	r0, [pc, #4]	@ (800742c <__sfp_lock_release+0x8>)
 8007426:	f000 b8fb 	b.w	8007620 <__retarget_lock_release_recursive>
 800742a:	bf00      	nop
 800742c:	20000861 	.word	0x20000861

08007430 <__sinit>:
 8007430:	b510      	push	{r4, lr}
 8007432:	4604      	mov	r4, r0
 8007434:	f7ff fff0 	bl	8007418 <__sfp_lock_acquire>
 8007438:	6a23      	ldr	r3, [r4, #32]
 800743a:	b11b      	cbz	r3, 8007444 <__sinit+0x14>
 800743c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007440:	f7ff bff0 	b.w	8007424 <__sfp_lock_release>
 8007444:	4b04      	ldr	r3, [pc, #16]	@ (8007458 <__sinit+0x28>)
 8007446:	6223      	str	r3, [r4, #32]
 8007448:	4b04      	ldr	r3, [pc, #16]	@ (800745c <__sinit+0x2c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1f5      	bne.n	800743c <__sinit+0xc>
 8007450:	f7ff ffc4 	bl	80073dc <global_stdio_init.part.0>
 8007454:	e7f2      	b.n	800743c <__sinit+0xc>
 8007456:	bf00      	nop
 8007458:	0800739d 	.word	0x0800739d
 800745c:	20000858 	.word	0x20000858

08007460 <_fwalk_sglue>:
 8007460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007464:	4607      	mov	r7, r0
 8007466:	4688      	mov	r8, r1
 8007468:	4614      	mov	r4, r2
 800746a:	2600      	movs	r6, #0
 800746c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007470:	f1b9 0901 	subs.w	r9, r9, #1
 8007474:	d505      	bpl.n	8007482 <_fwalk_sglue+0x22>
 8007476:	6824      	ldr	r4, [r4, #0]
 8007478:	2c00      	cmp	r4, #0
 800747a:	d1f7      	bne.n	800746c <_fwalk_sglue+0xc>
 800747c:	4630      	mov	r0, r6
 800747e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007482:	89ab      	ldrh	r3, [r5, #12]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d907      	bls.n	8007498 <_fwalk_sglue+0x38>
 8007488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800748c:	3301      	adds	r3, #1
 800748e:	d003      	beq.n	8007498 <_fwalk_sglue+0x38>
 8007490:	4629      	mov	r1, r5
 8007492:	4638      	mov	r0, r7
 8007494:	47c0      	blx	r8
 8007496:	4306      	orrs	r6, r0
 8007498:	3568      	adds	r5, #104	@ 0x68
 800749a:	e7e9      	b.n	8007470 <_fwalk_sglue+0x10>

0800749c <__sread>:
 800749c:	b510      	push	{r4, lr}
 800749e:	460c      	mov	r4, r1
 80074a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a4:	f000 f86c 	bl	8007580 <_read_r>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	bfab      	itete	ge
 80074ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074ae:	89a3      	ldrhlt	r3, [r4, #12]
 80074b0:	181b      	addge	r3, r3, r0
 80074b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074b6:	bfac      	ite	ge
 80074b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074ba:	81a3      	strhlt	r3, [r4, #12]
 80074bc:	bd10      	pop	{r4, pc}

080074be <__swrite>:
 80074be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c2:	461f      	mov	r7, r3
 80074c4:	898b      	ldrh	r3, [r1, #12]
 80074c6:	05db      	lsls	r3, r3, #23
 80074c8:	4605      	mov	r5, r0
 80074ca:	460c      	mov	r4, r1
 80074cc:	4616      	mov	r6, r2
 80074ce:	d505      	bpl.n	80074dc <__swrite+0x1e>
 80074d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d4:	2302      	movs	r3, #2
 80074d6:	2200      	movs	r2, #0
 80074d8:	f000 f840 	bl	800755c <_lseek_r>
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	4632      	mov	r2, r6
 80074ea:	463b      	mov	r3, r7
 80074ec:	4628      	mov	r0, r5
 80074ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074f2:	f000 b857 	b.w	80075a4 <_write_r>

080074f6 <__sseek>:
 80074f6:	b510      	push	{r4, lr}
 80074f8:	460c      	mov	r4, r1
 80074fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074fe:	f000 f82d 	bl	800755c <_lseek_r>
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	bf15      	itete	ne
 8007508:	6560      	strne	r0, [r4, #84]	@ 0x54
 800750a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800750e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007512:	81a3      	strheq	r3, [r4, #12]
 8007514:	bf18      	it	ne
 8007516:	81a3      	strhne	r3, [r4, #12]
 8007518:	bd10      	pop	{r4, pc}

0800751a <__sclose>:
 800751a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800751e:	f000 b80d 	b.w	800753c <_close_r>

08007522 <memset>:
 8007522:	4402      	add	r2, r0
 8007524:	4603      	mov	r3, r0
 8007526:	4293      	cmp	r3, r2
 8007528:	d100      	bne.n	800752c <memset+0xa>
 800752a:	4770      	bx	lr
 800752c:	f803 1b01 	strb.w	r1, [r3], #1
 8007530:	e7f9      	b.n	8007526 <memset+0x4>
	...

08007534 <_localeconv_r>:
 8007534:	4800      	ldr	r0, [pc, #0]	@ (8007538 <_localeconv_r+0x4>)
 8007536:	4770      	bx	lr
 8007538:	20000158 	.word	0x20000158

0800753c <_close_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4d06      	ldr	r5, [pc, #24]	@ (8007558 <_close_r+0x1c>)
 8007540:	2300      	movs	r3, #0
 8007542:	4604      	mov	r4, r0
 8007544:	4608      	mov	r0, r1
 8007546:	602b      	str	r3, [r5, #0]
 8007548:	f7fa fab0 	bl	8001aac <_close>
 800754c:	1c43      	adds	r3, r0, #1
 800754e:	d102      	bne.n	8007556 <_close_r+0x1a>
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	b103      	cbz	r3, 8007556 <_close_r+0x1a>
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	bd38      	pop	{r3, r4, r5, pc}
 8007558:	2000085c 	.word	0x2000085c

0800755c <_lseek_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4d07      	ldr	r5, [pc, #28]	@ (800757c <_lseek_r+0x20>)
 8007560:	4604      	mov	r4, r0
 8007562:	4608      	mov	r0, r1
 8007564:	4611      	mov	r1, r2
 8007566:	2200      	movs	r2, #0
 8007568:	602a      	str	r2, [r5, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	f7fa fac5 	bl	8001afa <_lseek>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d102      	bne.n	800757a <_lseek_r+0x1e>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	b103      	cbz	r3, 800757a <_lseek_r+0x1e>
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	2000085c 	.word	0x2000085c

08007580 <_read_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4d07      	ldr	r5, [pc, #28]	@ (80075a0 <_read_r+0x20>)
 8007584:	4604      	mov	r4, r0
 8007586:	4608      	mov	r0, r1
 8007588:	4611      	mov	r1, r2
 800758a:	2200      	movs	r2, #0
 800758c:	602a      	str	r2, [r5, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	f7fa fa53 	bl	8001a3a <_read>
 8007594:	1c43      	adds	r3, r0, #1
 8007596:	d102      	bne.n	800759e <_read_r+0x1e>
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	b103      	cbz	r3, 800759e <_read_r+0x1e>
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	bd38      	pop	{r3, r4, r5, pc}
 80075a0:	2000085c 	.word	0x2000085c

080075a4 <_write_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	4d07      	ldr	r5, [pc, #28]	@ (80075c4 <_write_r+0x20>)
 80075a8:	4604      	mov	r4, r0
 80075aa:	4608      	mov	r0, r1
 80075ac:	4611      	mov	r1, r2
 80075ae:	2200      	movs	r2, #0
 80075b0:	602a      	str	r2, [r5, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	f7fa fa5e 	bl	8001a74 <_write>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d102      	bne.n	80075c2 <_write_r+0x1e>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	b103      	cbz	r3, 80075c2 <_write_r+0x1e>
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	2000085c 	.word	0x2000085c

080075c8 <__errno>:
 80075c8:	4b01      	ldr	r3, [pc, #4]	@ (80075d0 <__errno+0x8>)
 80075ca:	6818      	ldr	r0, [r3, #0]
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	20000018 	.word	0x20000018

080075d4 <__libc_init_array>:
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	4d0d      	ldr	r5, [pc, #52]	@ (800760c <__libc_init_array+0x38>)
 80075d8:	4c0d      	ldr	r4, [pc, #52]	@ (8007610 <__libc_init_array+0x3c>)
 80075da:	1b64      	subs	r4, r4, r5
 80075dc:	10a4      	asrs	r4, r4, #2
 80075de:	2600      	movs	r6, #0
 80075e0:	42a6      	cmp	r6, r4
 80075e2:	d109      	bne.n	80075f8 <__libc_init_array+0x24>
 80075e4:	4d0b      	ldr	r5, [pc, #44]	@ (8007614 <__libc_init_array+0x40>)
 80075e6:	4c0c      	ldr	r4, [pc, #48]	@ (8007618 <__libc_init_array+0x44>)
 80075e8:	f002 fbf0 	bl	8009dcc <_init>
 80075ec:	1b64      	subs	r4, r4, r5
 80075ee:	10a4      	asrs	r4, r4, #2
 80075f0:	2600      	movs	r6, #0
 80075f2:	42a6      	cmp	r6, r4
 80075f4:	d105      	bne.n	8007602 <__libc_init_array+0x2e>
 80075f6:	bd70      	pop	{r4, r5, r6, pc}
 80075f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80075fc:	4798      	blx	r3
 80075fe:	3601      	adds	r6, #1
 8007600:	e7ee      	b.n	80075e0 <__libc_init_array+0xc>
 8007602:	f855 3b04 	ldr.w	r3, [r5], #4
 8007606:	4798      	blx	r3
 8007608:	3601      	adds	r6, #1
 800760a:	e7f2      	b.n	80075f2 <__libc_init_array+0x1e>
 800760c:	0800a594 	.word	0x0800a594
 8007610:	0800a594 	.word	0x0800a594
 8007614:	0800a594 	.word	0x0800a594
 8007618:	0800a598 	.word	0x0800a598

0800761c <__retarget_lock_init_recursive>:
 800761c:	4770      	bx	lr

0800761e <__retarget_lock_acquire_recursive>:
 800761e:	4770      	bx	lr

08007620 <__retarget_lock_release_recursive>:
 8007620:	4770      	bx	lr

08007622 <quorem>:
 8007622:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007626:	6903      	ldr	r3, [r0, #16]
 8007628:	690c      	ldr	r4, [r1, #16]
 800762a:	42a3      	cmp	r3, r4
 800762c:	4607      	mov	r7, r0
 800762e:	db7e      	blt.n	800772e <quorem+0x10c>
 8007630:	3c01      	subs	r4, #1
 8007632:	f101 0814 	add.w	r8, r1, #20
 8007636:	00a3      	lsls	r3, r4, #2
 8007638:	f100 0514 	add.w	r5, r0, #20
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007642:	9301      	str	r3, [sp, #4]
 8007644:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007648:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800764c:	3301      	adds	r3, #1
 800764e:	429a      	cmp	r2, r3
 8007650:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007654:	fbb2 f6f3 	udiv	r6, r2, r3
 8007658:	d32e      	bcc.n	80076b8 <quorem+0x96>
 800765a:	f04f 0a00 	mov.w	sl, #0
 800765e:	46c4      	mov	ip, r8
 8007660:	46ae      	mov	lr, r5
 8007662:	46d3      	mov	fp, sl
 8007664:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007668:	b298      	uxth	r0, r3
 800766a:	fb06 a000 	mla	r0, r6, r0, sl
 800766e:	0c02      	lsrs	r2, r0, #16
 8007670:	0c1b      	lsrs	r3, r3, #16
 8007672:	fb06 2303 	mla	r3, r6, r3, r2
 8007676:	f8de 2000 	ldr.w	r2, [lr]
 800767a:	b280      	uxth	r0, r0
 800767c:	b292      	uxth	r2, r2
 800767e:	1a12      	subs	r2, r2, r0
 8007680:	445a      	add	r2, fp
 8007682:	f8de 0000 	ldr.w	r0, [lr]
 8007686:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800768a:	b29b      	uxth	r3, r3
 800768c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007690:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007694:	b292      	uxth	r2, r2
 8007696:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800769a:	45e1      	cmp	r9, ip
 800769c:	f84e 2b04 	str.w	r2, [lr], #4
 80076a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80076a4:	d2de      	bcs.n	8007664 <quorem+0x42>
 80076a6:	9b00      	ldr	r3, [sp, #0]
 80076a8:	58eb      	ldr	r3, [r5, r3]
 80076aa:	b92b      	cbnz	r3, 80076b8 <quorem+0x96>
 80076ac:	9b01      	ldr	r3, [sp, #4]
 80076ae:	3b04      	subs	r3, #4
 80076b0:	429d      	cmp	r5, r3
 80076b2:	461a      	mov	r2, r3
 80076b4:	d32f      	bcc.n	8007716 <quorem+0xf4>
 80076b6:	613c      	str	r4, [r7, #16]
 80076b8:	4638      	mov	r0, r7
 80076ba:	f001 f97f 	bl	80089bc <__mcmp>
 80076be:	2800      	cmp	r0, #0
 80076c0:	db25      	blt.n	800770e <quorem+0xec>
 80076c2:	4629      	mov	r1, r5
 80076c4:	2000      	movs	r0, #0
 80076c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80076ca:	f8d1 c000 	ldr.w	ip, [r1]
 80076ce:	fa1f fe82 	uxth.w	lr, r2
 80076d2:	fa1f f38c 	uxth.w	r3, ip
 80076d6:	eba3 030e 	sub.w	r3, r3, lr
 80076da:	4403      	add	r3, r0
 80076dc:	0c12      	lsrs	r2, r2, #16
 80076de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076ec:	45c1      	cmp	r9, r8
 80076ee:	f841 3b04 	str.w	r3, [r1], #4
 80076f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076f6:	d2e6      	bcs.n	80076c6 <quorem+0xa4>
 80076f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007700:	b922      	cbnz	r2, 800770c <quorem+0xea>
 8007702:	3b04      	subs	r3, #4
 8007704:	429d      	cmp	r5, r3
 8007706:	461a      	mov	r2, r3
 8007708:	d30b      	bcc.n	8007722 <quorem+0x100>
 800770a:	613c      	str	r4, [r7, #16]
 800770c:	3601      	adds	r6, #1
 800770e:	4630      	mov	r0, r6
 8007710:	b003      	add	sp, #12
 8007712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007716:	6812      	ldr	r2, [r2, #0]
 8007718:	3b04      	subs	r3, #4
 800771a:	2a00      	cmp	r2, #0
 800771c:	d1cb      	bne.n	80076b6 <quorem+0x94>
 800771e:	3c01      	subs	r4, #1
 8007720:	e7c6      	b.n	80076b0 <quorem+0x8e>
 8007722:	6812      	ldr	r2, [r2, #0]
 8007724:	3b04      	subs	r3, #4
 8007726:	2a00      	cmp	r2, #0
 8007728:	d1ef      	bne.n	800770a <quorem+0xe8>
 800772a:	3c01      	subs	r4, #1
 800772c:	e7ea      	b.n	8007704 <quorem+0xe2>
 800772e:	2000      	movs	r0, #0
 8007730:	e7ee      	b.n	8007710 <quorem+0xee>
 8007732:	0000      	movs	r0, r0
 8007734:	0000      	movs	r0, r0
	...

08007738 <_dtoa_r>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	69c7      	ldr	r7, [r0, #28]
 800773e:	b097      	sub	sp, #92	@ 0x5c
 8007740:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007744:	ec55 4b10 	vmov	r4, r5, d0
 8007748:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800774a:	9107      	str	r1, [sp, #28]
 800774c:	4681      	mov	r9, r0
 800774e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007750:	9311      	str	r3, [sp, #68]	@ 0x44
 8007752:	b97f      	cbnz	r7, 8007774 <_dtoa_r+0x3c>
 8007754:	2010      	movs	r0, #16
 8007756:	f000 fe09 	bl	800836c <malloc>
 800775a:	4602      	mov	r2, r0
 800775c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007760:	b920      	cbnz	r0, 800776c <_dtoa_r+0x34>
 8007762:	4ba9      	ldr	r3, [pc, #676]	@ (8007a08 <_dtoa_r+0x2d0>)
 8007764:	21ef      	movs	r1, #239	@ 0xef
 8007766:	48a9      	ldr	r0, [pc, #676]	@ (8007a0c <_dtoa_r+0x2d4>)
 8007768:	f001 fafa 	bl	8008d60 <__assert_func>
 800776c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007770:	6007      	str	r7, [r0, #0]
 8007772:	60c7      	str	r7, [r0, #12]
 8007774:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007778:	6819      	ldr	r1, [r3, #0]
 800777a:	b159      	cbz	r1, 8007794 <_dtoa_r+0x5c>
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	604a      	str	r2, [r1, #4]
 8007780:	2301      	movs	r3, #1
 8007782:	4093      	lsls	r3, r2
 8007784:	608b      	str	r3, [r1, #8]
 8007786:	4648      	mov	r0, r9
 8007788:	f000 fee6 	bl	8008558 <_Bfree>
 800778c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007790:	2200      	movs	r2, #0
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	1e2b      	subs	r3, r5, #0
 8007796:	bfb9      	ittee	lt
 8007798:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800779c:	9305      	strlt	r3, [sp, #20]
 800779e:	2300      	movge	r3, #0
 80077a0:	6033      	strge	r3, [r6, #0]
 80077a2:	9f05      	ldr	r7, [sp, #20]
 80077a4:	4b9a      	ldr	r3, [pc, #616]	@ (8007a10 <_dtoa_r+0x2d8>)
 80077a6:	bfbc      	itt	lt
 80077a8:	2201      	movlt	r2, #1
 80077aa:	6032      	strlt	r2, [r6, #0]
 80077ac:	43bb      	bics	r3, r7
 80077ae:	d112      	bne.n	80077d6 <_dtoa_r+0x9e>
 80077b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80077b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077bc:	4323      	orrs	r3, r4
 80077be:	f000 855a 	beq.w	8008276 <_dtoa_r+0xb3e>
 80077c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007a24 <_dtoa_r+0x2ec>
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 855c 	beq.w	8008286 <_dtoa_r+0xb4e>
 80077ce:	f10a 0303 	add.w	r3, sl, #3
 80077d2:	f000 bd56 	b.w	8008282 <_dtoa_r+0xb4a>
 80077d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80077da:	2200      	movs	r2, #0
 80077dc:	ec51 0b17 	vmov	r0, r1, d7
 80077e0:	2300      	movs	r3, #0
 80077e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80077e6:	f7f9 f997 	bl	8000b18 <__aeabi_dcmpeq>
 80077ea:	4680      	mov	r8, r0
 80077ec:	b158      	cbz	r0, 8007806 <_dtoa_r+0xce>
 80077ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80077f0:	2301      	movs	r3, #1
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077f6:	b113      	cbz	r3, 80077fe <_dtoa_r+0xc6>
 80077f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80077fa:	4b86      	ldr	r3, [pc, #536]	@ (8007a14 <_dtoa_r+0x2dc>)
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007a28 <_dtoa_r+0x2f0>
 8007802:	f000 bd40 	b.w	8008286 <_dtoa_r+0xb4e>
 8007806:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800780a:	aa14      	add	r2, sp, #80	@ 0x50
 800780c:	a915      	add	r1, sp, #84	@ 0x54
 800780e:	4648      	mov	r0, r9
 8007810:	f001 f984 	bl	8008b1c <__d2b>
 8007814:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007818:	9002      	str	r0, [sp, #8]
 800781a:	2e00      	cmp	r6, #0
 800781c:	d078      	beq.n	8007910 <_dtoa_r+0x1d8>
 800781e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007820:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007828:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800782c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007830:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007834:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007838:	4619      	mov	r1, r3
 800783a:	2200      	movs	r2, #0
 800783c:	4b76      	ldr	r3, [pc, #472]	@ (8007a18 <_dtoa_r+0x2e0>)
 800783e:	f7f8 fd4b 	bl	80002d8 <__aeabi_dsub>
 8007842:	a36b      	add	r3, pc, #428	@ (adr r3, 80079f0 <_dtoa_r+0x2b8>)
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f7f8 fefe 	bl	8000648 <__aeabi_dmul>
 800784c:	a36a      	add	r3, pc, #424	@ (adr r3, 80079f8 <_dtoa_r+0x2c0>)
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f7f8 fd43 	bl	80002dc <__adddf3>
 8007856:	4604      	mov	r4, r0
 8007858:	4630      	mov	r0, r6
 800785a:	460d      	mov	r5, r1
 800785c:	f7f8 fe8a 	bl	8000574 <__aeabi_i2d>
 8007860:	a367      	add	r3, pc, #412	@ (adr r3, 8007a00 <_dtoa_r+0x2c8>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f7f8 feef 	bl	8000648 <__aeabi_dmul>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4620      	mov	r0, r4
 8007870:	4629      	mov	r1, r5
 8007872:	f7f8 fd33 	bl	80002dc <__adddf3>
 8007876:	4604      	mov	r4, r0
 8007878:	460d      	mov	r5, r1
 800787a:	f7f9 f995 	bl	8000ba8 <__aeabi_d2iz>
 800787e:	2200      	movs	r2, #0
 8007880:	4607      	mov	r7, r0
 8007882:	2300      	movs	r3, #0
 8007884:	4620      	mov	r0, r4
 8007886:	4629      	mov	r1, r5
 8007888:	f7f9 f950 	bl	8000b2c <__aeabi_dcmplt>
 800788c:	b140      	cbz	r0, 80078a0 <_dtoa_r+0x168>
 800788e:	4638      	mov	r0, r7
 8007890:	f7f8 fe70 	bl	8000574 <__aeabi_i2d>
 8007894:	4622      	mov	r2, r4
 8007896:	462b      	mov	r3, r5
 8007898:	f7f9 f93e 	bl	8000b18 <__aeabi_dcmpeq>
 800789c:	b900      	cbnz	r0, 80078a0 <_dtoa_r+0x168>
 800789e:	3f01      	subs	r7, #1
 80078a0:	2f16      	cmp	r7, #22
 80078a2:	d852      	bhi.n	800794a <_dtoa_r+0x212>
 80078a4:	4b5d      	ldr	r3, [pc, #372]	@ (8007a1c <_dtoa_r+0x2e4>)
 80078a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80078b2:	f7f9 f93b 	bl	8000b2c <__aeabi_dcmplt>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d049      	beq.n	800794e <_dtoa_r+0x216>
 80078ba:	3f01      	subs	r7, #1
 80078bc:	2300      	movs	r3, #0
 80078be:	9310      	str	r3, [sp, #64]	@ 0x40
 80078c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078c2:	1b9b      	subs	r3, r3, r6
 80078c4:	1e5a      	subs	r2, r3, #1
 80078c6:	bf45      	ittet	mi
 80078c8:	f1c3 0301 	rsbmi	r3, r3, #1
 80078cc:	9300      	strmi	r3, [sp, #0]
 80078ce:	2300      	movpl	r3, #0
 80078d0:	2300      	movmi	r3, #0
 80078d2:	9206      	str	r2, [sp, #24]
 80078d4:	bf54      	ite	pl
 80078d6:	9300      	strpl	r3, [sp, #0]
 80078d8:	9306      	strmi	r3, [sp, #24]
 80078da:	2f00      	cmp	r7, #0
 80078dc:	db39      	blt.n	8007952 <_dtoa_r+0x21a>
 80078de:	9b06      	ldr	r3, [sp, #24]
 80078e0:	970d      	str	r7, [sp, #52]	@ 0x34
 80078e2:	443b      	add	r3, r7
 80078e4:	9306      	str	r3, [sp, #24]
 80078e6:	2300      	movs	r3, #0
 80078e8:	9308      	str	r3, [sp, #32]
 80078ea:	9b07      	ldr	r3, [sp, #28]
 80078ec:	2b09      	cmp	r3, #9
 80078ee:	d863      	bhi.n	80079b8 <_dtoa_r+0x280>
 80078f0:	2b05      	cmp	r3, #5
 80078f2:	bfc4      	itt	gt
 80078f4:	3b04      	subgt	r3, #4
 80078f6:	9307      	strgt	r3, [sp, #28]
 80078f8:	9b07      	ldr	r3, [sp, #28]
 80078fa:	f1a3 0302 	sub.w	r3, r3, #2
 80078fe:	bfcc      	ite	gt
 8007900:	2400      	movgt	r4, #0
 8007902:	2401      	movle	r4, #1
 8007904:	2b03      	cmp	r3, #3
 8007906:	d863      	bhi.n	80079d0 <_dtoa_r+0x298>
 8007908:	e8df f003 	tbb	[pc, r3]
 800790c:	2b375452 	.word	0x2b375452
 8007910:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007914:	441e      	add	r6, r3
 8007916:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800791a:	2b20      	cmp	r3, #32
 800791c:	bfc1      	itttt	gt
 800791e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007922:	409f      	lslgt	r7, r3
 8007924:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007928:	fa24 f303 	lsrgt.w	r3, r4, r3
 800792c:	bfd6      	itet	le
 800792e:	f1c3 0320 	rsble	r3, r3, #32
 8007932:	ea47 0003 	orrgt.w	r0, r7, r3
 8007936:	fa04 f003 	lslle.w	r0, r4, r3
 800793a:	f7f8 fe0b 	bl	8000554 <__aeabi_ui2d>
 800793e:	2201      	movs	r2, #1
 8007940:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007944:	3e01      	subs	r6, #1
 8007946:	9212      	str	r2, [sp, #72]	@ 0x48
 8007948:	e776      	b.n	8007838 <_dtoa_r+0x100>
 800794a:	2301      	movs	r3, #1
 800794c:	e7b7      	b.n	80078be <_dtoa_r+0x186>
 800794e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007950:	e7b6      	b.n	80078c0 <_dtoa_r+0x188>
 8007952:	9b00      	ldr	r3, [sp, #0]
 8007954:	1bdb      	subs	r3, r3, r7
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	427b      	negs	r3, r7
 800795a:	9308      	str	r3, [sp, #32]
 800795c:	2300      	movs	r3, #0
 800795e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007960:	e7c3      	b.n	80078ea <_dtoa_r+0x1b2>
 8007962:	2301      	movs	r3, #1
 8007964:	9309      	str	r3, [sp, #36]	@ 0x24
 8007966:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007968:	eb07 0b03 	add.w	fp, r7, r3
 800796c:	f10b 0301 	add.w	r3, fp, #1
 8007970:	2b01      	cmp	r3, #1
 8007972:	9303      	str	r3, [sp, #12]
 8007974:	bfb8      	it	lt
 8007976:	2301      	movlt	r3, #1
 8007978:	e006      	b.n	8007988 <_dtoa_r+0x250>
 800797a:	2301      	movs	r3, #1
 800797c:	9309      	str	r3, [sp, #36]	@ 0x24
 800797e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007980:	2b00      	cmp	r3, #0
 8007982:	dd28      	ble.n	80079d6 <_dtoa_r+0x29e>
 8007984:	469b      	mov	fp, r3
 8007986:	9303      	str	r3, [sp, #12]
 8007988:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800798c:	2100      	movs	r1, #0
 800798e:	2204      	movs	r2, #4
 8007990:	f102 0514 	add.w	r5, r2, #20
 8007994:	429d      	cmp	r5, r3
 8007996:	d926      	bls.n	80079e6 <_dtoa_r+0x2ae>
 8007998:	6041      	str	r1, [r0, #4]
 800799a:	4648      	mov	r0, r9
 800799c:	f000 fd9c 	bl	80084d8 <_Balloc>
 80079a0:	4682      	mov	sl, r0
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d142      	bne.n	8007a2c <_dtoa_r+0x2f4>
 80079a6:	4b1e      	ldr	r3, [pc, #120]	@ (8007a20 <_dtoa_r+0x2e8>)
 80079a8:	4602      	mov	r2, r0
 80079aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80079ae:	e6da      	b.n	8007766 <_dtoa_r+0x2e>
 80079b0:	2300      	movs	r3, #0
 80079b2:	e7e3      	b.n	800797c <_dtoa_r+0x244>
 80079b4:	2300      	movs	r3, #0
 80079b6:	e7d5      	b.n	8007964 <_dtoa_r+0x22c>
 80079b8:	2401      	movs	r4, #1
 80079ba:	2300      	movs	r3, #0
 80079bc:	9307      	str	r3, [sp, #28]
 80079be:	9409      	str	r4, [sp, #36]	@ 0x24
 80079c0:	f04f 3bff 	mov.w	fp, #4294967295
 80079c4:	2200      	movs	r2, #0
 80079c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80079ca:	2312      	movs	r3, #18
 80079cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80079ce:	e7db      	b.n	8007988 <_dtoa_r+0x250>
 80079d0:	2301      	movs	r3, #1
 80079d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80079d4:	e7f4      	b.n	80079c0 <_dtoa_r+0x288>
 80079d6:	f04f 0b01 	mov.w	fp, #1
 80079da:	f8cd b00c 	str.w	fp, [sp, #12]
 80079de:	465b      	mov	r3, fp
 80079e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80079e4:	e7d0      	b.n	8007988 <_dtoa_r+0x250>
 80079e6:	3101      	adds	r1, #1
 80079e8:	0052      	lsls	r2, r2, #1
 80079ea:	e7d1      	b.n	8007990 <_dtoa_r+0x258>
 80079ec:	f3af 8000 	nop.w
 80079f0:	636f4361 	.word	0x636f4361
 80079f4:	3fd287a7 	.word	0x3fd287a7
 80079f8:	8b60c8b3 	.word	0x8b60c8b3
 80079fc:	3fc68a28 	.word	0x3fc68a28
 8007a00:	509f79fb 	.word	0x509f79fb
 8007a04:	3fd34413 	.word	0x3fd34413
 8007a08:	08009e85 	.word	0x08009e85
 8007a0c:	08009e9c 	.word	0x08009e9c
 8007a10:	7ff00000 	.word	0x7ff00000
 8007a14:	08009e55 	.word	0x08009e55
 8007a18:	3ff80000 	.word	0x3ff80000
 8007a1c:	08009ff0 	.word	0x08009ff0
 8007a20:	08009ef4 	.word	0x08009ef4
 8007a24:	08009e81 	.word	0x08009e81
 8007a28:	08009e54 	.word	0x08009e54
 8007a2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a30:	6018      	str	r0, [r3, #0]
 8007a32:	9b03      	ldr	r3, [sp, #12]
 8007a34:	2b0e      	cmp	r3, #14
 8007a36:	f200 80a1 	bhi.w	8007b7c <_dtoa_r+0x444>
 8007a3a:	2c00      	cmp	r4, #0
 8007a3c:	f000 809e 	beq.w	8007b7c <_dtoa_r+0x444>
 8007a40:	2f00      	cmp	r7, #0
 8007a42:	dd33      	ble.n	8007aac <_dtoa_r+0x374>
 8007a44:	4b9c      	ldr	r3, [pc, #624]	@ (8007cb8 <_dtoa_r+0x580>)
 8007a46:	f007 020f 	and.w	r2, r7, #15
 8007a4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a4e:	ed93 7b00 	vldr	d7, [r3]
 8007a52:	05f8      	lsls	r0, r7, #23
 8007a54:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007a58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a5c:	d516      	bpl.n	8007a8c <_dtoa_r+0x354>
 8007a5e:	4b97      	ldr	r3, [pc, #604]	@ (8007cbc <_dtoa_r+0x584>)
 8007a60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a68:	f7f8 ff18 	bl	800089c <__aeabi_ddiv>
 8007a6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a70:	f004 040f 	and.w	r4, r4, #15
 8007a74:	2603      	movs	r6, #3
 8007a76:	4d91      	ldr	r5, [pc, #580]	@ (8007cbc <_dtoa_r+0x584>)
 8007a78:	b954      	cbnz	r4, 8007a90 <_dtoa_r+0x358>
 8007a7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007a7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a82:	f7f8 ff0b 	bl	800089c <__aeabi_ddiv>
 8007a86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a8a:	e028      	b.n	8007ade <_dtoa_r+0x3a6>
 8007a8c:	2602      	movs	r6, #2
 8007a8e:	e7f2      	b.n	8007a76 <_dtoa_r+0x33e>
 8007a90:	07e1      	lsls	r1, r4, #31
 8007a92:	d508      	bpl.n	8007aa6 <_dtoa_r+0x36e>
 8007a94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007a98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a9c:	f7f8 fdd4 	bl	8000648 <__aeabi_dmul>
 8007aa0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007aa4:	3601      	adds	r6, #1
 8007aa6:	1064      	asrs	r4, r4, #1
 8007aa8:	3508      	adds	r5, #8
 8007aaa:	e7e5      	b.n	8007a78 <_dtoa_r+0x340>
 8007aac:	f000 80af 	beq.w	8007c0e <_dtoa_r+0x4d6>
 8007ab0:	427c      	negs	r4, r7
 8007ab2:	4b81      	ldr	r3, [pc, #516]	@ (8007cb8 <_dtoa_r+0x580>)
 8007ab4:	4d81      	ldr	r5, [pc, #516]	@ (8007cbc <_dtoa_r+0x584>)
 8007ab6:	f004 020f 	and.w	r2, r4, #15
 8007aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007ac6:	f7f8 fdbf 	bl	8000648 <__aeabi_dmul>
 8007aca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ace:	1124      	asrs	r4, r4, #4
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	2602      	movs	r6, #2
 8007ad4:	2c00      	cmp	r4, #0
 8007ad6:	f040 808f 	bne.w	8007bf8 <_dtoa_r+0x4c0>
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1d3      	bne.n	8007a86 <_dtoa_r+0x34e>
 8007ade:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ae0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 8094 	beq.w	8007c12 <_dtoa_r+0x4da>
 8007aea:	4b75      	ldr	r3, [pc, #468]	@ (8007cc0 <_dtoa_r+0x588>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	4620      	mov	r0, r4
 8007af0:	4629      	mov	r1, r5
 8007af2:	f7f9 f81b 	bl	8000b2c <__aeabi_dcmplt>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f000 808b 	beq.w	8007c12 <_dtoa_r+0x4da>
 8007afc:	9b03      	ldr	r3, [sp, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 8087 	beq.w	8007c12 <_dtoa_r+0x4da>
 8007b04:	f1bb 0f00 	cmp.w	fp, #0
 8007b08:	dd34      	ble.n	8007b74 <_dtoa_r+0x43c>
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	4b6d      	ldr	r3, [pc, #436]	@ (8007cc4 <_dtoa_r+0x58c>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	4629      	mov	r1, r5
 8007b12:	f7f8 fd99 	bl	8000648 <__aeabi_dmul>
 8007b16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b1a:	f107 38ff 	add.w	r8, r7, #4294967295
 8007b1e:	3601      	adds	r6, #1
 8007b20:	465c      	mov	r4, fp
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7f8 fd26 	bl	8000574 <__aeabi_i2d>
 8007b28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b2c:	f7f8 fd8c 	bl	8000648 <__aeabi_dmul>
 8007b30:	4b65      	ldr	r3, [pc, #404]	@ (8007cc8 <_dtoa_r+0x590>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	f7f8 fbd2 	bl	80002dc <__adddf3>
 8007b38:	4605      	mov	r5, r0
 8007b3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b3e:	2c00      	cmp	r4, #0
 8007b40:	d16a      	bne.n	8007c18 <_dtoa_r+0x4e0>
 8007b42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b46:	4b61      	ldr	r3, [pc, #388]	@ (8007ccc <_dtoa_r+0x594>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f7f8 fbc5 	bl	80002d8 <__aeabi_dsub>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b56:	462a      	mov	r2, r5
 8007b58:	4633      	mov	r3, r6
 8007b5a:	f7f9 f805 	bl	8000b68 <__aeabi_dcmpgt>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	f040 8298 	bne.w	8008094 <_dtoa_r+0x95c>
 8007b64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b68:	462a      	mov	r2, r5
 8007b6a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b6e:	f7f8 ffdd 	bl	8000b2c <__aeabi_dcmplt>
 8007b72:	bb38      	cbnz	r0, 8007bc4 <_dtoa_r+0x48c>
 8007b74:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007b78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f2c0 8157 	blt.w	8007e32 <_dtoa_r+0x6fa>
 8007b84:	2f0e      	cmp	r7, #14
 8007b86:	f300 8154 	bgt.w	8007e32 <_dtoa_r+0x6fa>
 8007b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8007cb8 <_dtoa_r+0x580>)
 8007b8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b90:	ed93 7b00 	vldr	d7, [r3]
 8007b94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	ed8d 7b00 	vstr	d7, [sp]
 8007b9c:	f280 80e5 	bge.w	8007d6a <_dtoa_r+0x632>
 8007ba0:	9b03      	ldr	r3, [sp, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f300 80e1 	bgt.w	8007d6a <_dtoa_r+0x632>
 8007ba8:	d10c      	bne.n	8007bc4 <_dtoa_r+0x48c>
 8007baa:	4b48      	ldr	r3, [pc, #288]	@ (8007ccc <_dtoa_r+0x594>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	ec51 0b17 	vmov	r0, r1, d7
 8007bb2:	f7f8 fd49 	bl	8000648 <__aeabi_dmul>
 8007bb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bba:	f7f8 ffcb 	bl	8000b54 <__aeabi_dcmpge>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	f000 8266 	beq.w	8008090 <_dtoa_r+0x958>
 8007bc4:	2400      	movs	r4, #0
 8007bc6:	4625      	mov	r5, r4
 8007bc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007bca:	4656      	mov	r6, sl
 8007bcc:	ea6f 0803 	mvn.w	r8, r3
 8007bd0:	2700      	movs	r7, #0
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4648      	mov	r0, r9
 8007bd6:	f000 fcbf 	bl	8008558 <_Bfree>
 8007bda:	2d00      	cmp	r5, #0
 8007bdc:	f000 80bd 	beq.w	8007d5a <_dtoa_r+0x622>
 8007be0:	b12f      	cbz	r7, 8007bee <_dtoa_r+0x4b6>
 8007be2:	42af      	cmp	r7, r5
 8007be4:	d003      	beq.n	8007bee <_dtoa_r+0x4b6>
 8007be6:	4639      	mov	r1, r7
 8007be8:	4648      	mov	r0, r9
 8007bea:	f000 fcb5 	bl	8008558 <_Bfree>
 8007bee:	4629      	mov	r1, r5
 8007bf0:	4648      	mov	r0, r9
 8007bf2:	f000 fcb1 	bl	8008558 <_Bfree>
 8007bf6:	e0b0      	b.n	8007d5a <_dtoa_r+0x622>
 8007bf8:	07e2      	lsls	r2, r4, #31
 8007bfa:	d505      	bpl.n	8007c08 <_dtoa_r+0x4d0>
 8007bfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c00:	f7f8 fd22 	bl	8000648 <__aeabi_dmul>
 8007c04:	3601      	adds	r6, #1
 8007c06:	2301      	movs	r3, #1
 8007c08:	1064      	asrs	r4, r4, #1
 8007c0a:	3508      	adds	r5, #8
 8007c0c:	e762      	b.n	8007ad4 <_dtoa_r+0x39c>
 8007c0e:	2602      	movs	r6, #2
 8007c10:	e765      	b.n	8007ade <_dtoa_r+0x3a6>
 8007c12:	9c03      	ldr	r4, [sp, #12]
 8007c14:	46b8      	mov	r8, r7
 8007c16:	e784      	b.n	8007b22 <_dtoa_r+0x3ea>
 8007c18:	4b27      	ldr	r3, [pc, #156]	@ (8007cb8 <_dtoa_r+0x580>)
 8007c1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c24:	4454      	add	r4, sl
 8007c26:	2900      	cmp	r1, #0
 8007c28:	d054      	beq.n	8007cd4 <_dtoa_r+0x59c>
 8007c2a:	4929      	ldr	r1, [pc, #164]	@ (8007cd0 <_dtoa_r+0x598>)
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	f7f8 fe35 	bl	800089c <__aeabi_ddiv>
 8007c32:	4633      	mov	r3, r6
 8007c34:	462a      	mov	r2, r5
 8007c36:	f7f8 fb4f 	bl	80002d8 <__aeabi_dsub>
 8007c3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007c3e:	4656      	mov	r6, sl
 8007c40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c44:	f7f8 ffb0 	bl	8000ba8 <__aeabi_d2iz>
 8007c48:	4605      	mov	r5, r0
 8007c4a:	f7f8 fc93 	bl	8000574 <__aeabi_i2d>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c56:	f7f8 fb3f 	bl	80002d8 <__aeabi_dsub>
 8007c5a:	3530      	adds	r5, #48	@ 0x30
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c64:	f806 5b01 	strb.w	r5, [r6], #1
 8007c68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c6c:	f7f8 ff5e 	bl	8000b2c <__aeabi_dcmplt>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d172      	bne.n	8007d5a <_dtoa_r+0x622>
 8007c74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c78:	4911      	ldr	r1, [pc, #68]	@ (8007cc0 <_dtoa_r+0x588>)
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	f7f8 fb2c 	bl	80002d8 <__aeabi_dsub>
 8007c80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c84:	f7f8 ff52 	bl	8000b2c <__aeabi_dcmplt>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	f040 80b4 	bne.w	8007df6 <_dtoa_r+0x6be>
 8007c8e:	42a6      	cmp	r6, r4
 8007c90:	f43f af70 	beq.w	8007b74 <_dtoa_r+0x43c>
 8007c94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007c98:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc4 <_dtoa_r+0x58c>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f7f8 fcd4 	bl	8000648 <__aeabi_dmul>
 8007ca0:	4b08      	ldr	r3, [pc, #32]	@ (8007cc4 <_dtoa_r+0x58c>)
 8007ca2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cac:	f7f8 fccc 	bl	8000648 <__aeabi_dmul>
 8007cb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cb4:	e7c4      	b.n	8007c40 <_dtoa_r+0x508>
 8007cb6:	bf00      	nop
 8007cb8:	08009ff0 	.word	0x08009ff0
 8007cbc:	08009fc8 	.word	0x08009fc8
 8007cc0:	3ff00000 	.word	0x3ff00000
 8007cc4:	40240000 	.word	0x40240000
 8007cc8:	401c0000 	.word	0x401c0000
 8007ccc:	40140000 	.word	0x40140000
 8007cd0:	3fe00000 	.word	0x3fe00000
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f7f8 fcb6 	bl	8000648 <__aeabi_dmul>
 8007cdc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007ce0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007ce2:	4656      	mov	r6, sl
 8007ce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ce8:	f7f8 ff5e 	bl	8000ba8 <__aeabi_d2iz>
 8007cec:	4605      	mov	r5, r0
 8007cee:	f7f8 fc41 	bl	8000574 <__aeabi_i2d>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cfa:	f7f8 faed 	bl	80002d8 <__aeabi_dsub>
 8007cfe:	3530      	adds	r5, #48	@ 0x30
 8007d00:	f806 5b01 	strb.w	r5, [r6], #1
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	42a6      	cmp	r6, r4
 8007d0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d0e:	f04f 0200 	mov.w	r2, #0
 8007d12:	d124      	bne.n	8007d5e <_dtoa_r+0x626>
 8007d14:	4baf      	ldr	r3, [pc, #700]	@ (8007fd4 <_dtoa_r+0x89c>)
 8007d16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d1a:	f7f8 fadf 	bl	80002dc <__adddf3>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d26:	f7f8 ff1f 	bl	8000b68 <__aeabi_dcmpgt>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d163      	bne.n	8007df6 <_dtoa_r+0x6be>
 8007d2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d32:	49a8      	ldr	r1, [pc, #672]	@ (8007fd4 <_dtoa_r+0x89c>)
 8007d34:	2000      	movs	r0, #0
 8007d36:	f7f8 facf 	bl	80002d8 <__aeabi_dsub>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d42:	f7f8 fef3 	bl	8000b2c <__aeabi_dcmplt>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	f43f af14 	beq.w	8007b74 <_dtoa_r+0x43c>
 8007d4c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007d4e:	1e73      	subs	r3, r6, #1
 8007d50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d56:	2b30      	cmp	r3, #48	@ 0x30
 8007d58:	d0f8      	beq.n	8007d4c <_dtoa_r+0x614>
 8007d5a:	4647      	mov	r7, r8
 8007d5c:	e03b      	b.n	8007dd6 <_dtoa_r+0x69e>
 8007d5e:	4b9e      	ldr	r3, [pc, #632]	@ (8007fd8 <_dtoa_r+0x8a0>)
 8007d60:	f7f8 fc72 	bl	8000648 <__aeabi_dmul>
 8007d64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d68:	e7bc      	b.n	8007ce4 <_dtoa_r+0x5ac>
 8007d6a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007d6e:	4656      	mov	r6, sl
 8007d70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d74:	4620      	mov	r0, r4
 8007d76:	4629      	mov	r1, r5
 8007d78:	f7f8 fd90 	bl	800089c <__aeabi_ddiv>
 8007d7c:	f7f8 ff14 	bl	8000ba8 <__aeabi_d2iz>
 8007d80:	4680      	mov	r8, r0
 8007d82:	f7f8 fbf7 	bl	8000574 <__aeabi_i2d>
 8007d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d8a:	f7f8 fc5d 	bl	8000648 <__aeabi_dmul>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4620      	mov	r0, r4
 8007d94:	4629      	mov	r1, r5
 8007d96:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d9a:	f7f8 fa9d 	bl	80002d8 <__aeabi_dsub>
 8007d9e:	f806 4b01 	strb.w	r4, [r6], #1
 8007da2:	9d03      	ldr	r5, [sp, #12]
 8007da4:	eba6 040a 	sub.w	r4, r6, sl
 8007da8:	42a5      	cmp	r5, r4
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	d133      	bne.n	8007e18 <_dtoa_r+0x6e0>
 8007db0:	f7f8 fa94 	bl	80002dc <__adddf3>
 8007db4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007db8:	4604      	mov	r4, r0
 8007dba:	460d      	mov	r5, r1
 8007dbc:	f7f8 fed4 	bl	8000b68 <__aeabi_dcmpgt>
 8007dc0:	b9c0      	cbnz	r0, 8007df4 <_dtoa_r+0x6bc>
 8007dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f7f8 fea5 	bl	8000b18 <__aeabi_dcmpeq>
 8007dce:	b110      	cbz	r0, 8007dd6 <_dtoa_r+0x69e>
 8007dd0:	f018 0f01 	tst.w	r8, #1
 8007dd4:	d10e      	bne.n	8007df4 <_dtoa_r+0x6bc>
 8007dd6:	9902      	ldr	r1, [sp, #8]
 8007dd8:	4648      	mov	r0, r9
 8007dda:	f000 fbbd 	bl	8008558 <_Bfree>
 8007dde:	2300      	movs	r3, #0
 8007de0:	7033      	strb	r3, [r6, #0]
 8007de2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007de4:	3701      	adds	r7, #1
 8007de6:	601f      	str	r7, [r3, #0]
 8007de8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 824b 	beq.w	8008286 <_dtoa_r+0xb4e>
 8007df0:	601e      	str	r6, [r3, #0]
 8007df2:	e248      	b.n	8008286 <_dtoa_r+0xb4e>
 8007df4:	46b8      	mov	r8, r7
 8007df6:	4633      	mov	r3, r6
 8007df8:	461e      	mov	r6, r3
 8007dfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dfe:	2a39      	cmp	r2, #57	@ 0x39
 8007e00:	d106      	bne.n	8007e10 <_dtoa_r+0x6d8>
 8007e02:	459a      	cmp	sl, r3
 8007e04:	d1f8      	bne.n	8007df8 <_dtoa_r+0x6c0>
 8007e06:	2230      	movs	r2, #48	@ 0x30
 8007e08:	f108 0801 	add.w	r8, r8, #1
 8007e0c:	f88a 2000 	strb.w	r2, [sl]
 8007e10:	781a      	ldrb	r2, [r3, #0]
 8007e12:	3201      	adds	r2, #1
 8007e14:	701a      	strb	r2, [r3, #0]
 8007e16:	e7a0      	b.n	8007d5a <_dtoa_r+0x622>
 8007e18:	4b6f      	ldr	r3, [pc, #444]	@ (8007fd8 <_dtoa_r+0x8a0>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f7f8 fc14 	bl	8000648 <__aeabi_dmul>
 8007e20:	2200      	movs	r2, #0
 8007e22:	2300      	movs	r3, #0
 8007e24:	4604      	mov	r4, r0
 8007e26:	460d      	mov	r5, r1
 8007e28:	f7f8 fe76 	bl	8000b18 <__aeabi_dcmpeq>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d09f      	beq.n	8007d70 <_dtoa_r+0x638>
 8007e30:	e7d1      	b.n	8007dd6 <_dtoa_r+0x69e>
 8007e32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e34:	2a00      	cmp	r2, #0
 8007e36:	f000 80ea 	beq.w	800800e <_dtoa_r+0x8d6>
 8007e3a:	9a07      	ldr	r2, [sp, #28]
 8007e3c:	2a01      	cmp	r2, #1
 8007e3e:	f300 80cd 	bgt.w	8007fdc <_dtoa_r+0x8a4>
 8007e42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007e44:	2a00      	cmp	r2, #0
 8007e46:	f000 80c1 	beq.w	8007fcc <_dtoa_r+0x894>
 8007e4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e4e:	9c08      	ldr	r4, [sp, #32]
 8007e50:	9e00      	ldr	r6, [sp, #0]
 8007e52:	9a00      	ldr	r2, [sp, #0]
 8007e54:	441a      	add	r2, r3
 8007e56:	9200      	str	r2, [sp, #0]
 8007e58:	9a06      	ldr	r2, [sp, #24]
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	441a      	add	r2, r3
 8007e5e:	4648      	mov	r0, r9
 8007e60:	9206      	str	r2, [sp, #24]
 8007e62:	f000 fc2d 	bl	80086c0 <__i2b>
 8007e66:	4605      	mov	r5, r0
 8007e68:	b166      	cbz	r6, 8007e84 <_dtoa_r+0x74c>
 8007e6a:	9b06      	ldr	r3, [sp, #24]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dd09      	ble.n	8007e84 <_dtoa_r+0x74c>
 8007e70:	42b3      	cmp	r3, r6
 8007e72:	9a00      	ldr	r2, [sp, #0]
 8007e74:	bfa8      	it	ge
 8007e76:	4633      	movge	r3, r6
 8007e78:	1ad2      	subs	r2, r2, r3
 8007e7a:	9200      	str	r2, [sp, #0]
 8007e7c:	9a06      	ldr	r2, [sp, #24]
 8007e7e:	1af6      	subs	r6, r6, r3
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	9306      	str	r3, [sp, #24]
 8007e84:	9b08      	ldr	r3, [sp, #32]
 8007e86:	b30b      	cbz	r3, 8007ecc <_dtoa_r+0x794>
 8007e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 80c6 	beq.w	800801c <_dtoa_r+0x8e4>
 8007e90:	2c00      	cmp	r4, #0
 8007e92:	f000 80c0 	beq.w	8008016 <_dtoa_r+0x8de>
 8007e96:	4629      	mov	r1, r5
 8007e98:	4622      	mov	r2, r4
 8007e9a:	4648      	mov	r0, r9
 8007e9c:	f000 fcc8 	bl	8008830 <__pow5mult>
 8007ea0:	9a02      	ldr	r2, [sp, #8]
 8007ea2:	4601      	mov	r1, r0
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	4648      	mov	r0, r9
 8007ea8:	f000 fc20 	bl	80086ec <__multiply>
 8007eac:	9902      	ldr	r1, [sp, #8]
 8007eae:	4680      	mov	r8, r0
 8007eb0:	4648      	mov	r0, r9
 8007eb2:	f000 fb51 	bl	8008558 <_Bfree>
 8007eb6:	9b08      	ldr	r3, [sp, #32]
 8007eb8:	1b1b      	subs	r3, r3, r4
 8007eba:	9308      	str	r3, [sp, #32]
 8007ebc:	f000 80b1 	beq.w	8008022 <_dtoa_r+0x8ea>
 8007ec0:	9a08      	ldr	r2, [sp, #32]
 8007ec2:	4641      	mov	r1, r8
 8007ec4:	4648      	mov	r0, r9
 8007ec6:	f000 fcb3 	bl	8008830 <__pow5mult>
 8007eca:	9002      	str	r0, [sp, #8]
 8007ecc:	2101      	movs	r1, #1
 8007ece:	4648      	mov	r0, r9
 8007ed0:	f000 fbf6 	bl	80086c0 <__i2b>
 8007ed4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 81d8 	beq.w	800828e <_dtoa_r+0xb56>
 8007ede:	461a      	mov	r2, r3
 8007ee0:	4601      	mov	r1, r0
 8007ee2:	4648      	mov	r0, r9
 8007ee4:	f000 fca4 	bl	8008830 <__pow5mult>
 8007ee8:	9b07      	ldr	r3, [sp, #28]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	4604      	mov	r4, r0
 8007eee:	f300 809f 	bgt.w	8008030 <_dtoa_r+0x8f8>
 8007ef2:	9b04      	ldr	r3, [sp, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f040 8097 	bne.w	8008028 <_dtoa_r+0x8f0>
 8007efa:	9b05      	ldr	r3, [sp, #20]
 8007efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f040 8093 	bne.w	800802c <_dtoa_r+0x8f4>
 8007f06:	9b05      	ldr	r3, [sp, #20]
 8007f08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f0c:	0d1b      	lsrs	r3, r3, #20
 8007f0e:	051b      	lsls	r3, r3, #20
 8007f10:	b133      	cbz	r3, 8007f20 <_dtoa_r+0x7e8>
 8007f12:	9b00      	ldr	r3, [sp, #0]
 8007f14:	3301      	adds	r3, #1
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	9b06      	ldr	r3, [sp, #24]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	9306      	str	r3, [sp, #24]
 8007f1e:	2301      	movs	r3, #1
 8007f20:	9308      	str	r3, [sp, #32]
 8007f22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 81b8 	beq.w	800829a <_dtoa_r+0xb62>
 8007f2a:	6923      	ldr	r3, [r4, #16]
 8007f2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f30:	6918      	ldr	r0, [r3, #16]
 8007f32:	f000 fb79 	bl	8008628 <__hi0bits>
 8007f36:	f1c0 0020 	rsb	r0, r0, #32
 8007f3a:	9b06      	ldr	r3, [sp, #24]
 8007f3c:	4418      	add	r0, r3
 8007f3e:	f010 001f 	ands.w	r0, r0, #31
 8007f42:	f000 8082 	beq.w	800804a <_dtoa_r+0x912>
 8007f46:	f1c0 0320 	rsb	r3, r0, #32
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	dd73      	ble.n	8008036 <_dtoa_r+0x8fe>
 8007f4e:	9b00      	ldr	r3, [sp, #0]
 8007f50:	f1c0 001c 	rsb	r0, r0, #28
 8007f54:	4403      	add	r3, r0
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	9b06      	ldr	r3, [sp, #24]
 8007f5a:	4403      	add	r3, r0
 8007f5c:	4406      	add	r6, r0
 8007f5e:	9306      	str	r3, [sp, #24]
 8007f60:	9b00      	ldr	r3, [sp, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	dd05      	ble.n	8007f72 <_dtoa_r+0x83a>
 8007f66:	9902      	ldr	r1, [sp, #8]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	4648      	mov	r0, r9
 8007f6c:	f000 fcba 	bl	80088e4 <__lshift>
 8007f70:	9002      	str	r0, [sp, #8]
 8007f72:	9b06      	ldr	r3, [sp, #24]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dd05      	ble.n	8007f84 <_dtoa_r+0x84c>
 8007f78:	4621      	mov	r1, r4
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	4648      	mov	r0, r9
 8007f7e:	f000 fcb1 	bl	80088e4 <__lshift>
 8007f82:	4604      	mov	r4, r0
 8007f84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d061      	beq.n	800804e <_dtoa_r+0x916>
 8007f8a:	9802      	ldr	r0, [sp, #8]
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	f000 fd15 	bl	80089bc <__mcmp>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	da5b      	bge.n	800804e <_dtoa_r+0x916>
 8007f96:	2300      	movs	r3, #0
 8007f98:	9902      	ldr	r1, [sp, #8]
 8007f9a:	220a      	movs	r2, #10
 8007f9c:	4648      	mov	r0, r9
 8007f9e:	f000 fafd 	bl	800859c <__multadd>
 8007fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa4:	9002      	str	r0, [sp, #8]
 8007fa6:	f107 38ff 	add.w	r8, r7, #4294967295
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 8177 	beq.w	800829e <_dtoa_r+0xb66>
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	220a      	movs	r2, #10
 8007fb6:	4648      	mov	r0, r9
 8007fb8:	f000 faf0 	bl	800859c <__multadd>
 8007fbc:	f1bb 0f00 	cmp.w	fp, #0
 8007fc0:	4605      	mov	r5, r0
 8007fc2:	dc6f      	bgt.n	80080a4 <_dtoa_r+0x96c>
 8007fc4:	9b07      	ldr	r3, [sp, #28]
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	dc49      	bgt.n	800805e <_dtoa_r+0x926>
 8007fca:	e06b      	b.n	80080a4 <_dtoa_r+0x96c>
 8007fcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007fce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007fd2:	e73c      	b.n	8007e4e <_dtoa_r+0x716>
 8007fd4:	3fe00000 	.word	0x3fe00000
 8007fd8:	40240000 	.word	0x40240000
 8007fdc:	9b03      	ldr	r3, [sp, #12]
 8007fde:	1e5c      	subs	r4, r3, #1
 8007fe0:	9b08      	ldr	r3, [sp, #32]
 8007fe2:	42a3      	cmp	r3, r4
 8007fe4:	db09      	blt.n	8007ffa <_dtoa_r+0x8c2>
 8007fe6:	1b1c      	subs	r4, r3, r4
 8007fe8:	9b03      	ldr	r3, [sp, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f6bf af30 	bge.w	8007e50 <_dtoa_r+0x718>
 8007ff0:	9b00      	ldr	r3, [sp, #0]
 8007ff2:	9a03      	ldr	r2, [sp, #12]
 8007ff4:	1a9e      	subs	r6, r3, r2
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e72b      	b.n	8007e52 <_dtoa_r+0x71a>
 8007ffa:	9b08      	ldr	r3, [sp, #32]
 8007ffc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ffe:	9408      	str	r4, [sp, #32]
 8008000:	1ae3      	subs	r3, r4, r3
 8008002:	441a      	add	r2, r3
 8008004:	9e00      	ldr	r6, [sp, #0]
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	920d      	str	r2, [sp, #52]	@ 0x34
 800800a:	2400      	movs	r4, #0
 800800c:	e721      	b.n	8007e52 <_dtoa_r+0x71a>
 800800e:	9c08      	ldr	r4, [sp, #32]
 8008010:	9e00      	ldr	r6, [sp, #0]
 8008012:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008014:	e728      	b.n	8007e68 <_dtoa_r+0x730>
 8008016:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800801a:	e751      	b.n	8007ec0 <_dtoa_r+0x788>
 800801c:	9a08      	ldr	r2, [sp, #32]
 800801e:	9902      	ldr	r1, [sp, #8]
 8008020:	e750      	b.n	8007ec4 <_dtoa_r+0x78c>
 8008022:	f8cd 8008 	str.w	r8, [sp, #8]
 8008026:	e751      	b.n	8007ecc <_dtoa_r+0x794>
 8008028:	2300      	movs	r3, #0
 800802a:	e779      	b.n	8007f20 <_dtoa_r+0x7e8>
 800802c:	9b04      	ldr	r3, [sp, #16]
 800802e:	e777      	b.n	8007f20 <_dtoa_r+0x7e8>
 8008030:	2300      	movs	r3, #0
 8008032:	9308      	str	r3, [sp, #32]
 8008034:	e779      	b.n	8007f2a <_dtoa_r+0x7f2>
 8008036:	d093      	beq.n	8007f60 <_dtoa_r+0x828>
 8008038:	9a00      	ldr	r2, [sp, #0]
 800803a:	331c      	adds	r3, #28
 800803c:	441a      	add	r2, r3
 800803e:	9200      	str	r2, [sp, #0]
 8008040:	9a06      	ldr	r2, [sp, #24]
 8008042:	441a      	add	r2, r3
 8008044:	441e      	add	r6, r3
 8008046:	9206      	str	r2, [sp, #24]
 8008048:	e78a      	b.n	8007f60 <_dtoa_r+0x828>
 800804a:	4603      	mov	r3, r0
 800804c:	e7f4      	b.n	8008038 <_dtoa_r+0x900>
 800804e:	9b03      	ldr	r3, [sp, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	46b8      	mov	r8, r7
 8008054:	dc20      	bgt.n	8008098 <_dtoa_r+0x960>
 8008056:	469b      	mov	fp, r3
 8008058:	9b07      	ldr	r3, [sp, #28]
 800805a:	2b02      	cmp	r3, #2
 800805c:	dd1e      	ble.n	800809c <_dtoa_r+0x964>
 800805e:	f1bb 0f00 	cmp.w	fp, #0
 8008062:	f47f adb1 	bne.w	8007bc8 <_dtoa_r+0x490>
 8008066:	4621      	mov	r1, r4
 8008068:	465b      	mov	r3, fp
 800806a:	2205      	movs	r2, #5
 800806c:	4648      	mov	r0, r9
 800806e:	f000 fa95 	bl	800859c <__multadd>
 8008072:	4601      	mov	r1, r0
 8008074:	4604      	mov	r4, r0
 8008076:	9802      	ldr	r0, [sp, #8]
 8008078:	f000 fca0 	bl	80089bc <__mcmp>
 800807c:	2800      	cmp	r0, #0
 800807e:	f77f ada3 	ble.w	8007bc8 <_dtoa_r+0x490>
 8008082:	4656      	mov	r6, sl
 8008084:	2331      	movs	r3, #49	@ 0x31
 8008086:	f806 3b01 	strb.w	r3, [r6], #1
 800808a:	f108 0801 	add.w	r8, r8, #1
 800808e:	e59f      	b.n	8007bd0 <_dtoa_r+0x498>
 8008090:	9c03      	ldr	r4, [sp, #12]
 8008092:	46b8      	mov	r8, r7
 8008094:	4625      	mov	r5, r4
 8008096:	e7f4      	b.n	8008082 <_dtoa_r+0x94a>
 8008098:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800809c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 8101 	beq.w	80082a6 <_dtoa_r+0xb6e>
 80080a4:	2e00      	cmp	r6, #0
 80080a6:	dd05      	ble.n	80080b4 <_dtoa_r+0x97c>
 80080a8:	4629      	mov	r1, r5
 80080aa:	4632      	mov	r2, r6
 80080ac:	4648      	mov	r0, r9
 80080ae:	f000 fc19 	bl	80088e4 <__lshift>
 80080b2:	4605      	mov	r5, r0
 80080b4:	9b08      	ldr	r3, [sp, #32]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d05c      	beq.n	8008174 <_dtoa_r+0xa3c>
 80080ba:	6869      	ldr	r1, [r5, #4]
 80080bc:	4648      	mov	r0, r9
 80080be:	f000 fa0b 	bl	80084d8 <_Balloc>
 80080c2:	4606      	mov	r6, r0
 80080c4:	b928      	cbnz	r0, 80080d2 <_dtoa_r+0x99a>
 80080c6:	4b82      	ldr	r3, [pc, #520]	@ (80082d0 <_dtoa_r+0xb98>)
 80080c8:	4602      	mov	r2, r0
 80080ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080ce:	f7ff bb4a 	b.w	8007766 <_dtoa_r+0x2e>
 80080d2:	692a      	ldr	r2, [r5, #16]
 80080d4:	3202      	adds	r2, #2
 80080d6:	0092      	lsls	r2, r2, #2
 80080d8:	f105 010c 	add.w	r1, r5, #12
 80080dc:	300c      	adds	r0, #12
 80080de:	f000 fe31 	bl	8008d44 <memcpy>
 80080e2:	2201      	movs	r2, #1
 80080e4:	4631      	mov	r1, r6
 80080e6:	4648      	mov	r0, r9
 80080e8:	f000 fbfc 	bl	80088e4 <__lshift>
 80080ec:	f10a 0301 	add.w	r3, sl, #1
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	eb0a 030b 	add.w	r3, sl, fp
 80080f6:	9308      	str	r3, [sp, #32]
 80080f8:	9b04      	ldr	r3, [sp, #16]
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	462f      	mov	r7, r5
 8008100:	9306      	str	r3, [sp, #24]
 8008102:	4605      	mov	r5, r0
 8008104:	9b00      	ldr	r3, [sp, #0]
 8008106:	9802      	ldr	r0, [sp, #8]
 8008108:	4621      	mov	r1, r4
 800810a:	f103 3bff 	add.w	fp, r3, #4294967295
 800810e:	f7ff fa88 	bl	8007622 <quorem>
 8008112:	4603      	mov	r3, r0
 8008114:	3330      	adds	r3, #48	@ 0x30
 8008116:	9003      	str	r0, [sp, #12]
 8008118:	4639      	mov	r1, r7
 800811a:	9802      	ldr	r0, [sp, #8]
 800811c:	9309      	str	r3, [sp, #36]	@ 0x24
 800811e:	f000 fc4d 	bl	80089bc <__mcmp>
 8008122:	462a      	mov	r2, r5
 8008124:	9004      	str	r0, [sp, #16]
 8008126:	4621      	mov	r1, r4
 8008128:	4648      	mov	r0, r9
 800812a:	f000 fc63 	bl	80089f4 <__mdiff>
 800812e:	68c2      	ldr	r2, [r0, #12]
 8008130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008132:	4606      	mov	r6, r0
 8008134:	bb02      	cbnz	r2, 8008178 <_dtoa_r+0xa40>
 8008136:	4601      	mov	r1, r0
 8008138:	9802      	ldr	r0, [sp, #8]
 800813a:	f000 fc3f 	bl	80089bc <__mcmp>
 800813e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008140:	4602      	mov	r2, r0
 8008142:	4631      	mov	r1, r6
 8008144:	4648      	mov	r0, r9
 8008146:	920c      	str	r2, [sp, #48]	@ 0x30
 8008148:	9309      	str	r3, [sp, #36]	@ 0x24
 800814a:	f000 fa05 	bl	8008558 <_Bfree>
 800814e:	9b07      	ldr	r3, [sp, #28]
 8008150:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008152:	9e00      	ldr	r6, [sp, #0]
 8008154:	ea42 0103 	orr.w	r1, r2, r3
 8008158:	9b06      	ldr	r3, [sp, #24]
 800815a:	4319      	orrs	r1, r3
 800815c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800815e:	d10d      	bne.n	800817c <_dtoa_r+0xa44>
 8008160:	2b39      	cmp	r3, #57	@ 0x39
 8008162:	d027      	beq.n	80081b4 <_dtoa_r+0xa7c>
 8008164:	9a04      	ldr	r2, [sp, #16]
 8008166:	2a00      	cmp	r2, #0
 8008168:	dd01      	ble.n	800816e <_dtoa_r+0xa36>
 800816a:	9b03      	ldr	r3, [sp, #12]
 800816c:	3331      	adds	r3, #49	@ 0x31
 800816e:	f88b 3000 	strb.w	r3, [fp]
 8008172:	e52e      	b.n	8007bd2 <_dtoa_r+0x49a>
 8008174:	4628      	mov	r0, r5
 8008176:	e7b9      	b.n	80080ec <_dtoa_r+0x9b4>
 8008178:	2201      	movs	r2, #1
 800817a:	e7e2      	b.n	8008142 <_dtoa_r+0xa0a>
 800817c:	9904      	ldr	r1, [sp, #16]
 800817e:	2900      	cmp	r1, #0
 8008180:	db04      	blt.n	800818c <_dtoa_r+0xa54>
 8008182:	9807      	ldr	r0, [sp, #28]
 8008184:	4301      	orrs	r1, r0
 8008186:	9806      	ldr	r0, [sp, #24]
 8008188:	4301      	orrs	r1, r0
 800818a:	d120      	bne.n	80081ce <_dtoa_r+0xa96>
 800818c:	2a00      	cmp	r2, #0
 800818e:	ddee      	ble.n	800816e <_dtoa_r+0xa36>
 8008190:	9902      	ldr	r1, [sp, #8]
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	2201      	movs	r2, #1
 8008196:	4648      	mov	r0, r9
 8008198:	f000 fba4 	bl	80088e4 <__lshift>
 800819c:	4621      	mov	r1, r4
 800819e:	9002      	str	r0, [sp, #8]
 80081a0:	f000 fc0c 	bl	80089bc <__mcmp>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	9b00      	ldr	r3, [sp, #0]
 80081a8:	dc02      	bgt.n	80081b0 <_dtoa_r+0xa78>
 80081aa:	d1e0      	bne.n	800816e <_dtoa_r+0xa36>
 80081ac:	07da      	lsls	r2, r3, #31
 80081ae:	d5de      	bpl.n	800816e <_dtoa_r+0xa36>
 80081b0:	2b39      	cmp	r3, #57	@ 0x39
 80081b2:	d1da      	bne.n	800816a <_dtoa_r+0xa32>
 80081b4:	2339      	movs	r3, #57	@ 0x39
 80081b6:	f88b 3000 	strb.w	r3, [fp]
 80081ba:	4633      	mov	r3, r6
 80081bc:	461e      	mov	r6, r3
 80081be:	3b01      	subs	r3, #1
 80081c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081c4:	2a39      	cmp	r2, #57	@ 0x39
 80081c6:	d04e      	beq.n	8008266 <_dtoa_r+0xb2e>
 80081c8:	3201      	adds	r2, #1
 80081ca:	701a      	strb	r2, [r3, #0]
 80081cc:	e501      	b.n	8007bd2 <_dtoa_r+0x49a>
 80081ce:	2a00      	cmp	r2, #0
 80081d0:	dd03      	ble.n	80081da <_dtoa_r+0xaa2>
 80081d2:	2b39      	cmp	r3, #57	@ 0x39
 80081d4:	d0ee      	beq.n	80081b4 <_dtoa_r+0xa7c>
 80081d6:	3301      	adds	r3, #1
 80081d8:	e7c9      	b.n	800816e <_dtoa_r+0xa36>
 80081da:	9a00      	ldr	r2, [sp, #0]
 80081dc:	9908      	ldr	r1, [sp, #32]
 80081de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80081e2:	428a      	cmp	r2, r1
 80081e4:	d028      	beq.n	8008238 <_dtoa_r+0xb00>
 80081e6:	9902      	ldr	r1, [sp, #8]
 80081e8:	2300      	movs	r3, #0
 80081ea:	220a      	movs	r2, #10
 80081ec:	4648      	mov	r0, r9
 80081ee:	f000 f9d5 	bl	800859c <__multadd>
 80081f2:	42af      	cmp	r7, r5
 80081f4:	9002      	str	r0, [sp, #8]
 80081f6:	f04f 0300 	mov.w	r3, #0
 80081fa:	f04f 020a 	mov.w	r2, #10
 80081fe:	4639      	mov	r1, r7
 8008200:	4648      	mov	r0, r9
 8008202:	d107      	bne.n	8008214 <_dtoa_r+0xadc>
 8008204:	f000 f9ca 	bl	800859c <__multadd>
 8008208:	4607      	mov	r7, r0
 800820a:	4605      	mov	r5, r0
 800820c:	9b00      	ldr	r3, [sp, #0]
 800820e:	3301      	adds	r3, #1
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	e777      	b.n	8008104 <_dtoa_r+0x9cc>
 8008214:	f000 f9c2 	bl	800859c <__multadd>
 8008218:	4629      	mov	r1, r5
 800821a:	4607      	mov	r7, r0
 800821c:	2300      	movs	r3, #0
 800821e:	220a      	movs	r2, #10
 8008220:	4648      	mov	r0, r9
 8008222:	f000 f9bb 	bl	800859c <__multadd>
 8008226:	4605      	mov	r5, r0
 8008228:	e7f0      	b.n	800820c <_dtoa_r+0xad4>
 800822a:	f1bb 0f00 	cmp.w	fp, #0
 800822e:	bfcc      	ite	gt
 8008230:	465e      	movgt	r6, fp
 8008232:	2601      	movle	r6, #1
 8008234:	4456      	add	r6, sl
 8008236:	2700      	movs	r7, #0
 8008238:	9902      	ldr	r1, [sp, #8]
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	2201      	movs	r2, #1
 800823e:	4648      	mov	r0, r9
 8008240:	f000 fb50 	bl	80088e4 <__lshift>
 8008244:	4621      	mov	r1, r4
 8008246:	9002      	str	r0, [sp, #8]
 8008248:	f000 fbb8 	bl	80089bc <__mcmp>
 800824c:	2800      	cmp	r0, #0
 800824e:	dcb4      	bgt.n	80081ba <_dtoa_r+0xa82>
 8008250:	d102      	bne.n	8008258 <_dtoa_r+0xb20>
 8008252:	9b00      	ldr	r3, [sp, #0]
 8008254:	07db      	lsls	r3, r3, #31
 8008256:	d4b0      	bmi.n	80081ba <_dtoa_r+0xa82>
 8008258:	4633      	mov	r3, r6
 800825a:	461e      	mov	r6, r3
 800825c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008260:	2a30      	cmp	r2, #48	@ 0x30
 8008262:	d0fa      	beq.n	800825a <_dtoa_r+0xb22>
 8008264:	e4b5      	b.n	8007bd2 <_dtoa_r+0x49a>
 8008266:	459a      	cmp	sl, r3
 8008268:	d1a8      	bne.n	80081bc <_dtoa_r+0xa84>
 800826a:	2331      	movs	r3, #49	@ 0x31
 800826c:	f108 0801 	add.w	r8, r8, #1
 8008270:	f88a 3000 	strb.w	r3, [sl]
 8008274:	e4ad      	b.n	8007bd2 <_dtoa_r+0x49a>
 8008276:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008278:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80082d4 <_dtoa_r+0xb9c>
 800827c:	b11b      	cbz	r3, 8008286 <_dtoa_r+0xb4e>
 800827e:	f10a 0308 	add.w	r3, sl, #8
 8008282:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	4650      	mov	r0, sl
 8008288:	b017      	add	sp, #92	@ 0x5c
 800828a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828e:	9b07      	ldr	r3, [sp, #28]
 8008290:	2b01      	cmp	r3, #1
 8008292:	f77f ae2e 	ble.w	8007ef2 <_dtoa_r+0x7ba>
 8008296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008298:	9308      	str	r3, [sp, #32]
 800829a:	2001      	movs	r0, #1
 800829c:	e64d      	b.n	8007f3a <_dtoa_r+0x802>
 800829e:	f1bb 0f00 	cmp.w	fp, #0
 80082a2:	f77f aed9 	ble.w	8008058 <_dtoa_r+0x920>
 80082a6:	4656      	mov	r6, sl
 80082a8:	9802      	ldr	r0, [sp, #8]
 80082aa:	4621      	mov	r1, r4
 80082ac:	f7ff f9b9 	bl	8007622 <quorem>
 80082b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80082b4:	f806 3b01 	strb.w	r3, [r6], #1
 80082b8:	eba6 020a 	sub.w	r2, r6, sl
 80082bc:	4593      	cmp	fp, r2
 80082be:	ddb4      	ble.n	800822a <_dtoa_r+0xaf2>
 80082c0:	9902      	ldr	r1, [sp, #8]
 80082c2:	2300      	movs	r3, #0
 80082c4:	220a      	movs	r2, #10
 80082c6:	4648      	mov	r0, r9
 80082c8:	f000 f968 	bl	800859c <__multadd>
 80082cc:	9002      	str	r0, [sp, #8]
 80082ce:	e7eb      	b.n	80082a8 <_dtoa_r+0xb70>
 80082d0:	08009ef4 	.word	0x08009ef4
 80082d4:	08009e78 	.word	0x08009e78

080082d8 <_free_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4605      	mov	r5, r0
 80082dc:	2900      	cmp	r1, #0
 80082de:	d041      	beq.n	8008364 <_free_r+0x8c>
 80082e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e4:	1f0c      	subs	r4, r1, #4
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	bfb8      	it	lt
 80082ea:	18e4      	addlt	r4, r4, r3
 80082ec:	f000 f8e8 	bl	80084c0 <__malloc_lock>
 80082f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008368 <_free_r+0x90>)
 80082f2:	6813      	ldr	r3, [r2, #0]
 80082f4:	b933      	cbnz	r3, 8008304 <_free_r+0x2c>
 80082f6:	6063      	str	r3, [r4, #4]
 80082f8:	6014      	str	r4, [r2, #0]
 80082fa:	4628      	mov	r0, r5
 80082fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008300:	f000 b8e4 	b.w	80084cc <__malloc_unlock>
 8008304:	42a3      	cmp	r3, r4
 8008306:	d908      	bls.n	800831a <_free_r+0x42>
 8008308:	6820      	ldr	r0, [r4, #0]
 800830a:	1821      	adds	r1, r4, r0
 800830c:	428b      	cmp	r3, r1
 800830e:	bf01      	itttt	eq
 8008310:	6819      	ldreq	r1, [r3, #0]
 8008312:	685b      	ldreq	r3, [r3, #4]
 8008314:	1809      	addeq	r1, r1, r0
 8008316:	6021      	streq	r1, [r4, #0]
 8008318:	e7ed      	b.n	80082f6 <_free_r+0x1e>
 800831a:	461a      	mov	r2, r3
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	b10b      	cbz	r3, 8008324 <_free_r+0x4c>
 8008320:	42a3      	cmp	r3, r4
 8008322:	d9fa      	bls.n	800831a <_free_r+0x42>
 8008324:	6811      	ldr	r1, [r2, #0]
 8008326:	1850      	adds	r0, r2, r1
 8008328:	42a0      	cmp	r0, r4
 800832a:	d10b      	bne.n	8008344 <_free_r+0x6c>
 800832c:	6820      	ldr	r0, [r4, #0]
 800832e:	4401      	add	r1, r0
 8008330:	1850      	adds	r0, r2, r1
 8008332:	4283      	cmp	r3, r0
 8008334:	6011      	str	r1, [r2, #0]
 8008336:	d1e0      	bne.n	80082fa <_free_r+0x22>
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	6053      	str	r3, [r2, #4]
 800833e:	4408      	add	r0, r1
 8008340:	6010      	str	r0, [r2, #0]
 8008342:	e7da      	b.n	80082fa <_free_r+0x22>
 8008344:	d902      	bls.n	800834c <_free_r+0x74>
 8008346:	230c      	movs	r3, #12
 8008348:	602b      	str	r3, [r5, #0]
 800834a:	e7d6      	b.n	80082fa <_free_r+0x22>
 800834c:	6820      	ldr	r0, [r4, #0]
 800834e:	1821      	adds	r1, r4, r0
 8008350:	428b      	cmp	r3, r1
 8008352:	bf04      	itt	eq
 8008354:	6819      	ldreq	r1, [r3, #0]
 8008356:	685b      	ldreq	r3, [r3, #4]
 8008358:	6063      	str	r3, [r4, #4]
 800835a:	bf04      	itt	eq
 800835c:	1809      	addeq	r1, r1, r0
 800835e:	6021      	streq	r1, [r4, #0]
 8008360:	6054      	str	r4, [r2, #4]
 8008362:	e7ca      	b.n	80082fa <_free_r+0x22>
 8008364:	bd38      	pop	{r3, r4, r5, pc}
 8008366:	bf00      	nop
 8008368:	20000868 	.word	0x20000868

0800836c <malloc>:
 800836c:	4b02      	ldr	r3, [pc, #8]	@ (8008378 <malloc+0xc>)
 800836e:	4601      	mov	r1, r0
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	f000 b825 	b.w	80083c0 <_malloc_r>
 8008376:	bf00      	nop
 8008378:	20000018 	.word	0x20000018

0800837c <sbrk_aligned>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	4e0f      	ldr	r6, [pc, #60]	@ (80083bc <sbrk_aligned+0x40>)
 8008380:	460c      	mov	r4, r1
 8008382:	6831      	ldr	r1, [r6, #0]
 8008384:	4605      	mov	r5, r0
 8008386:	b911      	cbnz	r1, 800838e <sbrk_aligned+0x12>
 8008388:	f000 fccc 	bl	8008d24 <_sbrk_r>
 800838c:	6030      	str	r0, [r6, #0]
 800838e:	4621      	mov	r1, r4
 8008390:	4628      	mov	r0, r5
 8008392:	f000 fcc7 	bl	8008d24 <_sbrk_r>
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	d103      	bne.n	80083a2 <sbrk_aligned+0x26>
 800839a:	f04f 34ff 	mov.w	r4, #4294967295
 800839e:	4620      	mov	r0, r4
 80083a0:	bd70      	pop	{r4, r5, r6, pc}
 80083a2:	1cc4      	adds	r4, r0, #3
 80083a4:	f024 0403 	bic.w	r4, r4, #3
 80083a8:	42a0      	cmp	r0, r4
 80083aa:	d0f8      	beq.n	800839e <sbrk_aligned+0x22>
 80083ac:	1a21      	subs	r1, r4, r0
 80083ae:	4628      	mov	r0, r5
 80083b0:	f000 fcb8 	bl	8008d24 <_sbrk_r>
 80083b4:	3001      	adds	r0, #1
 80083b6:	d1f2      	bne.n	800839e <sbrk_aligned+0x22>
 80083b8:	e7ef      	b.n	800839a <sbrk_aligned+0x1e>
 80083ba:	bf00      	nop
 80083bc:	20000864 	.word	0x20000864

080083c0 <_malloc_r>:
 80083c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c4:	1ccd      	adds	r5, r1, #3
 80083c6:	f025 0503 	bic.w	r5, r5, #3
 80083ca:	3508      	adds	r5, #8
 80083cc:	2d0c      	cmp	r5, #12
 80083ce:	bf38      	it	cc
 80083d0:	250c      	movcc	r5, #12
 80083d2:	2d00      	cmp	r5, #0
 80083d4:	4606      	mov	r6, r0
 80083d6:	db01      	blt.n	80083dc <_malloc_r+0x1c>
 80083d8:	42a9      	cmp	r1, r5
 80083da:	d904      	bls.n	80083e6 <_malloc_r+0x26>
 80083dc:	230c      	movs	r3, #12
 80083de:	6033      	str	r3, [r6, #0]
 80083e0:	2000      	movs	r0, #0
 80083e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084bc <_malloc_r+0xfc>
 80083ea:	f000 f869 	bl	80084c0 <__malloc_lock>
 80083ee:	f8d8 3000 	ldr.w	r3, [r8]
 80083f2:	461c      	mov	r4, r3
 80083f4:	bb44      	cbnz	r4, 8008448 <_malloc_r+0x88>
 80083f6:	4629      	mov	r1, r5
 80083f8:	4630      	mov	r0, r6
 80083fa:	f7ff ffbf 	bl	800837c <sbrk_aligned>
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	4604      	mov	r4, r0
 8008402:	d158      	bne.n	80084b6 <_malloc_r+0xf6>
 8008404:	f8d8 4000 	ldr.w	r4, [r8]
 8008408:	4627      	mov	r7, r4
 800840a:	2f00      	cmp	r7, #0
 800840c:	d143      	bne.n	8008496 <_malloc_r+0xd6>
 800840e:	2c00      	cmp	r4, #0
 8008410:	d04b      	beq.n	80084aa <_malloc_r+0xea>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	4639      	mov	r1, r7
 8008416:	4630      	mov	r0, r6
 8008418:	eb04 0903 	add.w	r9, r4, r3
 800841c:	f000 fc82 	bl	8008d24 <_sbrk_r>
 8008420:	4581      	cmp	r9, r0
 8008422:	d142      	bne.n	80084aa <_malloc_r+0xea>
 8008424:	6821      	ldr	r1, [r4, #0]
 8008426:	1a6d      	subs	r5, r5, r1
 8008428:	4629      	mov	r1, r5
 800842a:	4630      	mov	r0, r6
 800842c:	f7ff ffa6 	bl	800837c <sbrk_aligned>
 8008430:	3001      	adds	r0, #1
 8008432:	d03a      	beq.n	80084aa <_malloc_r+0xea>
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	442b      	add	r3, r5
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	f8d8 3000 	ldr.w	r3, [r8]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	bb62      	cbnz	r2, 800849c <_malloc_r+0xdc>
 8008442:	f8c8 7000 	str.w	r7, [r8]
 8008446:	e00f      	b.n	8008468 <_malloc_r+0xa8>
 8008448:	6822      	ldr	r2, [r4, #0]
 800844a:	1b52      	subs	r2, r2, r5
 800844c:	d420      	bmi.n	8008490 <_malloc_r+0xd0>
 800844e:	2a0b      	cmp	r2, #11
 8008450:	d917      	bls.n	8008482 <_malloc_r+0xc2>
 8008452:	1961      	adds	r1, r4, r5
 8008454:	42a3      	cmp	r3, r4
 8008456:	6025      	str	r5, [r4, #0]
 8008458:	bf18      	it	ne
 800845a:	6059      	strne	r1, [r3, #4]
 800845c:	6863      	ldr	r3, [r4, #4]
 800845e:	bf08      	it	eq
 8008460:	f8c8 1000 	streq.w	r1, [r8]
 8008464:	5162      	str	r2, [r4, r5]
 8008466:	604b      	str	r3, [r1, #4]
 8008468:	4630      	mov	r0, r6
 800846a:	f000 f82f 	bl	80084cc <__malloc_unlock>
 800846e:	f104 000b 	add.w	r0, r4, #11
 8008472:	1d23      	adds	r3, r4, #4
 8008474:	f020 0007 	bic.w	r0, r0, #7
 8008478:	1ac2      	subs	r2, r0, r3
 800847a:	bf1c      	itt	ne
 800847c:	1a1b      	subne	r3, r3, r0
 800847e:	50a3      	strne	r3, [r4, r2]
 8008480:	e7af      	b.n	80083e2 <_malloc_r+0x22>
 8008482:	6862      	ldr	r2, [r4, #4]
 8008484:	42a3      	cmp	r3, r4
 8008486:	bf0c      	ite	eq
 8008488:	f8c8 2000 	streq.w	r2, [r8]
 800848c:	605a      	strne	r2, [r3, #4]
 800848e:	e7eb      	b.n	8008468 <_malloc_r+0xa8>
 8008490:	4623      	mov	r3, r4
 8008492:	6864      	ldr	r4, [r4, #4]
 8008494:	e7ae      	b.n	80083f4 <_malloc_r+0x34>
 8008496:	463c      	mov	r4, r7
 8008498:	687f      	ldr	r7, [r7, #4]
 800849a:	e7b6      	b.n	800840a <_malloc_r+0x4a>
 800849c:	461a      	mov	r2, r3
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	d1fb      	bne.n	800849c <_malloc_r+0xdc>
 80084a4:	2300      	movs	r3, #0
 80084a6:	6053      	str	r3, [r2, #4]
 80084a8:	e7de      	b.n	8008468 <_malloc_r+0xa8>
 80084aa:	230c      	movs	r3, #12
 80084ac:	6033      	str	r3, [r6, #0]
 80084ae:	4630      	mov	r0, r6
 80084b0:	f000 f80c 	bl	80084cc <__malloc_unlock>
 80084b4:	e794      	b.n	80083e0 <_malloc_r+0x20>
 80084b6:	6005      	str	r5, [r0, #0]
 80084b8:	e7d6      	b.n	8008468 <_malloc_r+0xa8>
 80084ba:	bf00      	nop
 80084bc:	20000868 	.word	0x20000868

080084c0 <__malloc_lock>:
 80084c0:	4801      	ldr	r0, [pc, #4]	@ (80084c8 <__malloc_lock+0x8>)
 80084c2:	f7ff b8ac 	b.w	800761e <__retarget_lock_acquire_recursive>
 80084c6:	bf00      	nop
 80084c8:	20000860 	.word	0x20000860

080084cc <__malloc_unlock>:
 80084cc:	4801      	ldr	r0, [pc, #4]	@ (80084d4 <__malloc_unlock+0x8>)
 80084ce:	f7ff b8a7 	b.w	8007620 <__retarget_lock_release_recursive>
 80084d2:	bf00      	nop
 80084d4:	20000860 	.word	0x20000860

080084d8 <_Balloc>:
 80084d8:	b570      	push	{r4, r5, r6, lr}
 80084da:	69c6      	ldr	r6, [r0, #28]
 80084dc:	4604      	mov	r4, r0
 80084de:	460d      	mov	r5, r1
 80084e0:	b976      	cbnz	r6, 8008500 <_Balloc+0x28>
 80084e2:	2010      	movs	r0, #16
 80084e4:	f7ff ff42 	bl	800836c <malloc>
 80084e8:	4602      	mov	r2, r0
 80084ea:	61e0      	str	r0, [r4, #28]
 80084ec:	b920      	cbnz	r0, 80084f8 <_Balloc+0x20>
 80084ee:	4b18      	ldr	r3, [pc, #96]	@ (8008550 <_Balloc+0x78>)
 80084f0:	4818      	ldr	r0, [pc, #96]	@ (8008554 <_Balloc+0x7c>)
 80084f2:	216b      	movs	r1, #107	@ 0x6b
 80084f4:	f000 fc34 	bl	8008d60 <__assert_func>
 80084f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084fc:	6006      	str	r6, [r0, #0]
 80084fe:	60c6      	str	r6, [r0, #12]
 8008500:	69e6      	ldr	r6, [r4, #28]
 8008502:	68f3      	ldr	r3, [r6, #12]
 8008504:	b183      	cbz	r3, 8008528 <_Balloc+0x50>
 8008506:	69e3      	ldr	r3, [r4, #28]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800850e:	b9b8      	cbnz	r0, 8008540 <_Balloc+0x68>
 8008510:	2101      	movs	r1, #1
 8008512:	fa01 f605 	lsl.w	r6, r1, r5
 8008516:	1d72      	adds	r2, r6, #5
 8008518:	0092      	lsls	r2, r2, #2
 800851a:	4620      	mov	r0, r4
 800851c:	f000 fc3e 	bl	8008d9c <_calloc_r>
 8008520:	b160      	cbz	r0, 800853c <_Balloc+0x64>
 8008522:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008526:	e00e      	b.n	8008546 <_Balloc+0x6e>
 8008528:	2221      	movs	r2, #33	@ 0x21
 800852a:	2104      	movs	r1, #4
 800852c:	4620      	mov	r0, r4
 800852e:	f000 fc35 	bl	8008d9c <_calloc_r>
 8008532:	69e3      	ldr	r3, [r4, #28]
 8008534:	60f0      	str	r0, [r6, #12]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e4      	bne.n	8008506 <_Balloc+0x2e>
 800853c:	2000      	movs	r0, #0
 800853e:	bd70      	pop	{r4, r5, r6, pc}
 8008540:	6802      	ldr	r2, [r0, #0]
 8008542:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008546:	2300      	movs	r3, #0
 8008548:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800854c:	e7f7      	b.n	800853e <_Balloc+0x66>
 800854e:	bf00      	nop
 8008550:	08009e85 	.word	0x08009e85
 8008554:	08009f05 	.word	0x08009f05

08008558 <_Bfree>:
 8008558:	b570      	push	{r4, r5, r6, lr}
 800855a:	69c6      	ldr	r6, [r0, #28]
 800855c:	4605      	mov	r5, r0
 800855e:	460c      	mov	r4, r1
 8008560:	b976      	cbnz	r6, 8008580 <_Bfree+0x28>
 8008562:	2010      	movs	r0, #16
 8008564:	f7ff ff02 	bl	800836c <malloc>
 8008568:	4602      	mov	r2, r0
 800856a:	61e8      	str	r0, [r5, #28]
 800856c:	b920      	cbnz	r0, 8008578 <_Bfree+0x20>
 800856e:	4b09      	ldr	r3, [pc, #36]	@ (8008594 <_Bfree+0x3c>)
 8008570:	4809      	ldr	r0, [pc, #36]	@ (8008598 <_Bfree+0x40>)
 8008572:	218f      	movs	r1, #143	@ 0x8f
 8008574:	f000 fbf4 	bl	8008d60 <__assert_func>
 8008578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800857c:	6006      	str	r6, [r0, #0]
 800857e:	60c6      	str	r6, [r0, #12]
 8008580:	b13c      	cbz	r4, 8008592 <_Bfree+0x3a>
 8008582:	69eb      	ldr	r3, [r5, #28]
 8008584:	6862      	ldr	r2, [r4, #4]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800858c:	6021      	str	r1, [r4, #0]
 800858e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	08009e85 	.word	0x08009e85
 8008598:	08009f05 	.word	0x08009f05

0800859c <__multadd>:
 800859c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085a0:	690d      	ldr	r5, [r1, #16]
 80085a2:	4607      	mov	r7, r0
 80085a4:	460c      	mov	r4, r1
 80085a6:	461e      	mov	r6, r3
 80085a8:	f101 0c14 	add.w	ip, r1, #20
 80085ac:	2000      	movs	r0, #0
 80085ae:	f8dc 3000 	ldr.w	r3, [ip]
 80085b2:	b299      	uxth	r1, r3
 80085b4:	fb02 6101 	mla	r1, r2, r1, r6
 80085b8:	0c1e      	lsrs	r6, r3, #16
 80085ba:	0c0b      	lsrs	r3, r1, #16
 80085bc:	fb02 3306 	mla	r3, r2, r6, r3
 80085c0:	b289      	uxth	r1, r1
 80085c2:	3001      	adds	r0, #1
 80085c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085c8:	4285      	cmp	r5, r0
 80085ca:	f84c 1b04 	str.w	r1, [ip], #4
 80085ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085d2:	dcec      	bgt.n	80085ae <__multadd+0x12>
 80085d4:	b30e      	cbz	r6, 800861a <__multadd+0x7e>
 80085d6:	68a3      	ldr	r3, [r4, #8]
 80085d8:	42ab      	cmp	r3, r5
 80085da:	dc19      	bgt.n	8008610 <__multadd+0x74>
 80085dc:	6861      	ldr	r1, [r4, #4]
 80085de:	4638      	mov	r0, r7
 80085e0:	3101      	adds	r1, #1
 80085e2:	f7ff ff79 	bl	80084d8 <_Balloc>
 80085e6:	4680      	mov	r8, r0
 80085e8:	b928      	cbnz	r0, 80085f6 <__multadd+0x5a>
 80085ea:	4602      	mov	r2, r0
 80085ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008620 <__multadd+0x84>)
 80085ee:	480d      	ldr	r0, [pc, #52]	@ (8008624 <__multadd+0x88>)
 80085f0:	21ba      	movs	r1, #186	@ 0xba
 80085f2:	f000 fbb5 	bl	8008d60 <__assert_func>
 80085f6:	6922      	ldr	r2, [r4, #16]
 80085f8:	3202      	adds	r2, #2
 80085fa:	f104 010c 	add.w	r1, r4, #12
 80085fe:	0092      	lsls	r2, r2, #2
 8008600:	300c      	adds	r0, #12
 8008602:	f000 fb9f 	bl	8008d44 <memcpy>
 8008606:	4621      	mov	r1, r4
 8008608:	4638      	mov	r0, r7
 800860a:	f7ff ffa5 	bl	8008558 <_Bfree>
 800860e:	4644      	mov	r4, r8
 8008610:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008614:	3501      	adds	r5, #1
 8008616:	615e      	str	r6, [r3, #20]
 8008618:	6125      	str	r5, [r4, #16]
 800861a:	4620      	mov	r0, r4
 800861c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008620:	08009ef4 	.word	0x08009ef4
 8008624:	08009f05 	.word	0x08009f05

08008628 <__hi0bits>:
 8008628:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800862c:	4603      	mov	r3, r0
 800862e:	bf36      	itet	cc
 8008630:	0403      	lslcc	r3, r0, #16
 8008632:	2000      	movcs	r0, #0
 8008634:	2010      	movcc	r0, #16
 8008636:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800863a:	bf3c      	itt	cc
 800863c:	021b      	lslcc	r3, r3, #8
 800863e:	3008      	addcc	r0, #8
 8008640:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008644:	bf3c      	itt	cc
 8008646:	011b      	lslcc	r3, r3, #4
 8008648:	3004      	addcc	r0, #4
 800864a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800864e:	bf3c      	itt	cc
 8008650:	009b      	lslcc	r3, r3, #2
 8008652:	3002      	addcc	r0, #2
 8008654:	2b00      	cmp	r3, #0
 8008656:	db05      	blt.n	8008664 <__hi0bits+0x3c>
 8008658:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800865c:	f100 0001 	add.w	r0, r0, #1
 8008660:	bf08      	it	eq
 8008662:	2020      	moveq	r0, #32
 8008664:	4770      	bx	lr

08008666 <__lo0bits>:
 8008666:	6803      	ldr	r3, [r0, #0]
 8008668:	4602      	mov	r2, r0
 800866a:	f013 0007 	ands.w	r0, r3, #7
 800866e:	d00b      	beq.n	8008688 <__lo0bits+0x22>
 8008670:	07d9      	lsls	r1, r3, #31
 8008672:	d421      	bmi.n	80086b8 <__lo0bits+0x52>
 8008674:	0798      	lsls	r0, r3, #30
 8008676:	bf49      	itett	mi
 8008678:	085b      	lsrmi	r3, r3, #1
 800867a:	089b      	lsrpl	r3, r3, #2
 800867c:	2001      	movmi	r0, #1
 800867e:	6013      	strmi	r3, [r2, #0]
 8008680:	bf5c      	itt	pl
 8008682:	6013      	strpl	r3, [r2, #0]
 8008684:	2002      	movpl	r0, #2
 8008686:	4770      	bx	lr
 8008688:	b299      	uxth	r1, r3
 800868a:	b909      	cbnz	r1, 8008690 <__lo0bits+0x2a>
 800868c:	0c1b      	lsrs	r3, r3, #16
 800868e:	2010      	movs	r0, #16
 8008690:	b2d9      	uxtb	r1, r3
 8008692:	b909      	cbnz	r1, 8008698 <__lo0bits+0x32>
 8008694:	3008      	adds	r0, #8
 8008696:	0a1b      	lsrs	r3, r3, #8
 8008698:	0719      	lsls	r1, r3, #28
 800869a:	bf04      	itt	eq
 800869c:	091b      	lsreq	r3, r3, #4
 800869e:	3004      	addeq	r0, #4
 80086a0:	0799      	lsls	r1, r3, #30
 80086a2:	bf04      	itt	eq
 80086a4:	089b      	lsreq	r3, r3, #2
 80086a6:	3002      	addeq	r0, #2
 80086a8:	07d9      	lsls	r1, r3, #31
 80086aa:	d403      	bmi.n	80086b4 <__lo0bits+0x4e>
 80086ac:	085b      	lsrs	r3, r3, #1
 80086ae:	f100 0001 	add.w	r0, r0, #1
 80086b2:	d003      	beq.n	80086bc <__lo0bits+0x56>
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	4770      	bx	lr
 80086b8:	2000      	movs	r0, #0
 80086ba:	4770      	bx	lr
 80086bc:	2020      	movs	r0, #32
 80086be:	4770      	bx	lr

080086c0 <__i2b>:
 80086c0:	b510      	push	{r4, lr}
 80086c2:	460c      	mov	r4, r1
 80086c4:	2101      	movs	r1, #1
 80086c6:	f7ff ff07 	bl	80084d8 <_Balloc>
 80086ca:	4602      	mov	r2, r0
 80086cc:	b928      	cbnz	r0, 80086da <__i2b+0x1a>
 80086ce:	4b05      	ldr	r3, [pc, #20]	@ (80086e4 <__i2b+0x24>)
 80086d0:	4805      	ldr	r0, [pc, #20]	@ (80086e8 <__i2b+0x28>)
 80086d2:	f240 1145 	movw	r1, #325	@ 0x145
 80086d6:	f000 fb43 	bl	8008d60 <__assert_func>
 80086da:	2301      	movs	r3, #1
 80086dc:	6144      	str	r4, [r0, #20]
 80086de:	6103      	str	r3, [r0, #16]
 80086e0:	bd10      	pop	{r4, pc}
 80086e2:	bf00      	nop
 80086e4:	08009ef4 	.word	0x08009ef4
 80086e8:	08009f05 	.word	0x08009f05

080086ec <__multiply>:
 80086ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f0:	4617      	mov	r7, r2
 80086f2:	690a      	ldr	r2, [r1, #16]
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	bfa8      	it	ge
 80086fa:	463b      	movge	r3, r7
 80086fc:	4689      	mov	r9, r1
 80086fe:	bfa4      	itt	ge
 8008700:	460f      	movge	r7, r1
 8008702:	4699      	movge	r9, r3
 8008704:	693d      	ldr	r5, [r7, #16]
 8008706:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	6879      	ldr	r1, [r7, #4]
 800870e:	eb05 060a 	add.w	r6, r5, sl
 8008712:	42b3      	cmp	r3, r6
 8008714:	b085      	sub	sp, #20
 8008716:	bfb8      	it	lt
 8008718:	3101      	addlt	r1, #1
 800871a:	f7ff fedd 	bl	80084d8 <_Balloc>
 800871e:	b930      	cbnz	r0, 800872e <__multiply+0x42>
 8008720:	4602      	mov	r2, r0
 8008722:	4b41      	ldr	r3, [pc, #260]	@ (8008828 <__multiply+0x13c>)
 8008724:	4841      	ldr	r0, [pc, #260]	@ (800882c <__multiply+0x140>)
 8008726:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800872a:	f000 fb19 	bl	8008d60 <__assert_func>
 800872e:	f100 0414 	add.w	r4, r0, #20
 8008732:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008736:	4623      	mov	r3, r4
 8008738:	2200      	movs	r2, #0
 800873a:	4573      	cmp	r3, lr
 800873c:	d320      	bcc.n	8008780 <__multiply+0x94>
 800873e:	f107 0814 	add.w	r8, r7, #20
 8008742:	f109 0114 	add.w	r1, r9, #20
 8008746:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800874a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800874e:	9302      	str	r3, [sp, #8]
 8008750:	1beb      	subs	r3, r5, r7
 8008752:	3b15      	subs	r3, #21
 8008754:	f023 0303 	bic.w	r3, r3, #3
 8008758:	3304      	adds	r3, #4
 800875a:	3715      	adds	r7, #21
 800875c:	42bd      	cmp	r5, r7
 800875e:	bf38      	it	cc
 8008760:	2304      	movcc	r3, #4
 8008762:	9301      	str	r3, [sp, #4]
 8008764:	9b02      	ldr	r3, [sp, #8]
 8008766:	9103      	str	r1, [sp, #12]
 8008768:	428b      	cmp	r3, r1
 800876a:	d80c      	bhi.n	8008786 <__multiply+0x9a>
 800876c:	2e00      	cmp	r6, #0
 800876e:	dd03      	ble.n	8008778 <__multiply+0x8c>
 8008770:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008774:	2b00      	cmp	r3, #0
 8008776:	d055      	beq.n	8008824 <__multiply+0x138>
 8008778:	6106      	str	r6, [r0, #16]
 800877a:	b005      	add	sp, #20
 800877c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008780:	f843 2b04 	str.w	r2, [r3], #4
 8008784:	e7d9      	b.n	800873a <__multiply+0x4e>
 8008786:	f8b1 a000 	ldrh.w	sl, [r1]
 800878a:	f1ba 0f00 	cmp.w	sl, #0
 800878e:	d01f      	beq.n	80087d0 <__multiply+0xe4>
 8008790:	46c4      	mov	ip, r8
 8008792:	46a1      	mov	r9, r4
 8008794:	2700      	movs	r7, #0
 8008796:	f85c 2b04 	ldr.w	r2, [ip], #4
 800879a:	f8d9 3000 	ldr.w	r3, [r9]
 800879e:	fa1f fb82 	uxth.w	fp, r2
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80087a8:	443b      	add	r3, r7
 80087aa:	f8d9 7000 	ldr.w	r7, [r9]
 80087ae:	0c12      	lsrs	r2, r2, #16
 80087b0:	0c3f      	lsrs	r7, r7, #16
 80087b2:	fb0a 7202 	mla	r2, sl, r2, r7
 80087b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087c0:	4565      	cmp	r5, ip
 80087c2:	f849 3b04 	str.w	r3, [r9], #4
 80087c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80087ca:	d8e4      	bhi.n	8008796 <__multiply+0xaa>
 80087cc:	9b01      	ldr	r3, [sp, #4]
 80087ce:	50e7      	str	r7, [r4, r3]
 80087d0:	9b03      	ldr	r3, [sp, #12]
 80087d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80087d6:	3104      	adds	r1, #4
 80087d8:	f1b9 0f00 	cmp.w	r9, #0
 80087dc:	d020      	beq.n	8008820 <__multiply+0x134>
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	4647      	mov	r7, r8
 80087e2:	46a4      	mov	ip, r4
 80087e4:	f04f 0a00 	mov.w	sl, #0
 80087e8:	f8b7 b000 	ldrh.w	fp, [r7]
 80087ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80087f0:	fb09 220b 	mla	r2, r9, fp, r2
 80087f4:	4452      	add	r2, sl
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087fc:	f84c 3b04 	str.w	r3, [ip], #4
 8008800:	f857 3b04 	ldr.w	r3, [r7], #4
 8008804:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008808:	f8bc 3000 	ldrh.w	r3, [ip]
 800880c:	fb09 330a 	mla	r3, r9, sl, r3
 8008810:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008814:	42bd      	cmp	r5, r7
 8008816:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800881a:	d8e5      	bhi.n	80087e8 <__multiply+0xfc>
 800881c:	9a01      	ldr	r2, [sp, #4]
 800881e:	50a3      	str	r3, [r4, r2]
 8008820:	3404      	adds	r4, #4
 8008822:	e79f      	b.n	8008764 <__multiply+0x78>
 8008824:	3e01      	subs	r6, #1
 8008826:	e7a1      	b.n	800876c <__multiply+0x80>
 8008828:	08009ef4 	.word	0x08009ef4
 800882c:	08009f05 	.word	0x08009f05

08008830 <__pow5mult>:
 8008830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008834:	4615      	mov	r5, r2
 8008836:	f012 0203 	ands.w	r2, r2, #3
 800883a:	4607      	mov	r7, r0
 800883c:	460e      	mov	r6, r1
 800883e:	d007      	beq.n	8008850 <__pow5mult+0x20>
 8008840:	4c25      	ldr	r4, [pc, #148]	@ (80088d8 <__pow5mult+0xa8>)
 8008842:	3a01      	subs	r2, #1
 8008844:	2300      	movs	r3, #0
 8008846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800884a:	f7ff fea7 	bl	800859c <__multadd>
 800884e:	4606      	mov	r6, r0
 8008850:	10ad      	asrs	r5, r5, #2
 8008852:	d03d      	beq.n	80088d0 <__pow5mult+0xa0>
 8008854:	69fc      	ldr	r4, [r7, #28]
 8008856:	b97c      	cbnz	r4, 8008878 <__pow5mult+0x48>
 8008858:	2010      	movs	r0, #16
 800885a:	f7ff fd87 	bl	800836c <malloc>
 800885e:	4602      	mov	r2, r0
 8008860:	61f8      	str	r0, [r7, #28]
 8008862:	b928      	cbnz	r0, 8008870 <__pow5mult+0x40>
 8008864:	4b1d      	ldr	r3, [pc, #116]	@ (80088dc <__pow5mult+0xac>)
 8008866:	481e      	ldr	r0, [pc, #120]	@ (80088e0 <__pow5mult+0xb0>)
 8008868:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800886c:	f000 fa78 	bl	8008d60 <__assert_func>
 8008870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008874:	6004      	str	r4, [r0, #0]
 8008876:	60c4      	str	r4, [r0, #12]
 8008878:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800887c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008880:	b94c      	cbnz	r4, 8008896 <__pow5mult+0x66>
 8008882:	f240 2171 	movw	r1, #625	@ 0x271
 8008886:	4638      	mov	r0, r7
 8008888:	f7ff ff1a 	bl	80086c0 <__i2b>
 800888c:	2300      	movs	r3, #0
 800888e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008892:	4604      	mov	r4, r0
 8008894:	6003      	str	r3, [r0, #0]
 8008896:	f04f 0900 	mov.w	r9, #0
 800889a:	07eb      	lsls	r3, r5, #31
 800889c:	d50a      	bpl.n	80088b4 <__pow5mult+0x84>
 800889e:	4631      	mov	r1, r6
 80088a0:	4622      	mov	r2, r4
 80088a2:	4638      	mov	r0, r7
 80088a4:	f7ff ff22 	bl	80086ec <__multiply>
 80088a8:	4631      	mov	r1, r6
 80088aa:	4680      	mov	r8, r0
 80088ac:	4638      	mov	r0, r7
 80088ae:	f7ff fe53 	bl	8008558 <_Bfree>
 80088b2:	4646      	mov	r6, r8
 80088b4:	106d      	asrs	r5, r5, #1
 80088b6:	d00b      	beq.n	80088d0 <__pow5mult+0xa0>
 80088b8:	6820      	ldr	r0, [r4, #0]
 80088ba:	b938      	cbnz	r0, 80088cc <__pow5mult+0x9c>
 80088bc:	4622      	mov	r2, r4
 80088be:	4621      	mov	r1, r4
 80088c0:	4638      	mov	r0, r7
 80088c2:	f7ff ff13 	bl	80086ec <__multiply>
 80088c6:	6020      	str	r0, [r4, #0]
 80088c8:	f8c0 9000 	str.w	r9, [r0]
 80088cc:	4604      	mov	r4, r0
 80088ce:	e7e4      	b.n	800889a <__pow5mult+0x6a>
 80088d0:	4630      	mov	r0, r6
 80088d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d6:	bf00      	nop
 80088d8:	08009fb8 	.word	0x08009fb8
 80088dc:	08009e85 	.word	0x08009e85
 80088e0:	08009f05 	.word	0x08009f05

080088e4 <__lshift>:
 80088e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e8:	460c      	mov	r4, r1
 80088ea:	6849      	ldr	r1, [r1, #4]
 80088ec:	6923      	ldr	r3, [r4, #16]
 80088ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088f2:	68a3      	ldr	r3, [r4, #8]
 80088f4:	4607      	mov	r7, r0
 80088f6:	4691      	mov	r9, r2
 80088f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088fc:	f108 0601 	add.w	r6, r8, #1
 8008900:	42b3      	cmp	r3, r6
 8008902:	db0b      	blt.n	800891c <__lshift+0x38>
 8008904:	4638      	mov	r0, r7
 8008906:	f7ff fde7 	bl	80084d8 <_Balloc>
 800890a:	4605      	mov	r5, r0
 800890c:	b948      	cbnz	r0, 8008922 <__lshift+0x3e>
 800890e:	4602      	mov	r2, r0
 8008910:	4b28      	ldr	r3, [pc, #160]	@ (80089b4 <__lshift+0xd0>)
 8008912:	4829      	ldr	r0, [pc, #164]	@ (80089b8 <__lshift+0xd4>)
 8008914:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008918:	f000 fa22 	bl	8008d60 <__assert_func>
 800891c:	3101      	adds	r1, #1
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	e7ee      	b.n	8008900 <__lshift+0x1c>
 8008922:	2300      	movs	r3, #0
 8008924:	f100 0114 	add.w	r1, r0, #20
 8008928:	f100 0210 	add.w	r2, r0, #16
 800892c:	4618      	mov	r0, r3
 800892e:	4553      	cmp	r3, sl
 8008930:	db33      	blt.n	800899a <__lshift+0xb6>
 8008932:	6920      	ldr	r0, [r4, #16]
 8008934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008938:	f104 0314 	add.w	r3, r4, #20
 800893c:	f019 091f 	ands.w	r9, r9, #31
 8008940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008944:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008948:	d02b      	beq.n	80089a2 <__lshift+0xbe>
 800894a:	f1c9 0e20 	rsb	lr, r9, #32
 800894e:	468a      	mov	sl, r1
 8008950:	2200      	movs	r2, #0
 8008952:	6818      	ldr	r0, [r3, #0]
 8008954:	fa00 f009 	lsl.w	r0, r0, r9
 8008958:	4310      	orrs	r0, r2
 800895a:	f84a 0b04 	str.w	r0, [sl], #4
 800895e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008962:	459c      	cmp	ip, r3
 8008964:	fa22 f20e 	lsr.w	r2, r2, lr
 8008968:	d8f3      	bhi.n	8008952 <__lshift+0x6e>
 800896a:	ebac 0304 	sub.w	r3, ip, r4
 800896e:	3b15      	subs	r3, #21
 8008970:	f023 0303 	bic.w	r3, r3, #3
 8008974:	3304      	adds	r3, #4
 8008976:	f104 0015 	add.w	r0, r4, #21
 800897a:	4560      	cmp	r0, ip
 800897c:	bf88      	it	hi
 800897e:	2304      	movhi	r3, #4
 8008980:	50ca      	str	r2, [r1, r3]
 8008982:	b10a      	cbz	r2, 8008988 <__lshift+0xa4>
 8008984:	f108 0602 	add.w	r6, r8, #2
 8008988:	3e01      	subs	r6, #1
 800898a:	4638      	mov	r0, r7
 800898c:	612e      	str	r6, [r5, #16]
 800898e:	4621      	mov	r1, r4
 8008990:	f7ff fde2 	bl	8008558 <_Bfree>
 8008994:	4628      	mov	r0, r5
 8008996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899a:	f842 0f04 	str.w	r0, [r2, #4]!
 800899e:	3301      	adds	r3, #1
 80089a0:	e7c5      	b.n	800892e <__lshift+0x4a>
 80089a2:	3904      	subs	r1, #4
 80089a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80089ac:	459c      	cmp	ip, r3
 80089ae:	d8f9      	bhi.n	80089a4 <__lshift+0xc0>
 80089b0:	e7ea      	b.n	8008988 <__lshift+0xa4>
 80089b2:	bf00      	nop
 80089b4:	08009ef4 	.word	0x08009ef4
 80089b8:	08009f05 	.word	0x08009f05

080089bc <__mcmp>:
 80089bc:	690a      	ldr	r2, [r1, #16]
 80089be:	4603      	mov	r3, r0
 80089c0:	6900      	ldr	r0, [r0, #16]
 80089c2:	1a80      	subs	r0, r0, r2
 80089c4:	b530      	push	{r4, r5, lr}
 80089c6:	d10e      	bne.n	80089e6 <__mcmp+0x2a>
 80089c8:	3314      	adds	r3, #20
 80089ca:	3114      	adds	r1, #20
 80089cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80089d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80089d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089dc:	4295      	cmp	r5, r2
 80089de:	d003      	beq.n	80089e8 <__mcmp+0x2c>
 80089e0:	d205      	bcs.n	80089ee <__mcmp+0x32>
 80089e2:	f04f 30ff 	mov.w	r0, #4294967295
 80089e6:	bd30      	pop	{r4, r5, pc}
 80089e8:	42a3      	cmp	r3, r4
 80089ea:	d3f3      	bcc.n	80089d4 <__mcmp+0x18>
 80089ec:	e7fb      	b.n	80089e6 <__mcmp+0x2a>
 80089ee:	2001      	movs	r0, #1
 80089f0:	e7f9      	b.n	80089e6 <__mcmp+0x2a>
	...

080089f4 <__mdiff>:
 80089f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f8:	4689      	mov	r9, r1
 80089fa:	4606      	mov	r6, r0
 80089fc:	4611      	mov	r1, r2
 80089fe:	4648      	mov	r0, r9
 8008a00:	4614      	mov	r4, r2
 8008a02:	f7ff ffdb 	bl	80089bc <__mcmp>
 8008a06:	1e05      	subs	r5, r0, #0
 8008a08:	d112      	bne.n	8008a30 <__mdiff+0x3c>
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f7ff fd63 	bl	80084d8 <_Balloc>
 8008a12:	4602      	mov	r2, r0
 8008a14:	b928      	cbnz	r0, 8008a22 <__mdiff+0x2e>
 8008a16:	4b3f      	ldr	r3, [pc, #252]	@ (8008b14 <__mdiff+0x120>)
 8008a18:	f240 2137 	movw	r1, #567	@ 0x237
 8008a1c:	483e      	ldr	r0, [pc, #248]	@ (8008b18 <__mdiff+0x124>)
 8008a1e:	f000 f99f 	bl	8008d60 <__assert_func>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a28:	4610      	mov	r0, r2
 8008a2a:	b003      	add	sp, #12
 8008a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a30:	bfbc      	itt	lt
 8008a32:	464b      	movlt	r3, r9
 8008a34:	46a1      	movlt	r9, r4
 8008a36:	4630      	mov	r0, r6
 8008a38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008a3c:	bfba      	itte	lt
 8008a3e:	461c      	movlt	r4, r3
 8008a40:	2501      	movlt	r5, #1
 8008a42:	2500      	movge	r5, #0
 8008a44:	f7ff fd48 	bl	80084d8 <_Balloc>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	b918      	cbnz	r0, 8008a54 <__mdiff+0x60>
 8008a4c:	4b31      	ldr	r3, [pc, #196]	@ (8008b14 <__mdiff+0x120>)
 8008a4e:	f240 2145 	movw	r1, #581	@ 0x245
 8008a52:	e7e3      	b.n	8008a1c <__mdiff+0x28>
 8008a54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008a58:	6926      	ldr	r6, [r4, #16]
 8008a5a:	60c5      	str	r5, [r0, #12]
 8008a5c:	f109 0310 	add.w	r3, r9, #16
 8008a60:	f109 0514 	add.w	r5, r9, #20
 8008a64:	f104 0e14 	add.w	lr, r4, #20
 8008a68:	f100 0b14 	add.w	fp, r0, #20
 8008a6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008a70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	46d9      	mov	r9, fp
 8008a78:	f04f 0c00 	mov.w	ip, #0
 8008a7c:	9b01      	ldr	r3, [sp, #4]
 8008a7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a86:	9301      	str	r3, [sp, #4]
 8008a88:	fa1f f38a 	uxth.w	r3, sl
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	b283      	uxth	r3, r0
 8008a90:	1acb      	subs	r3, r1, r3
 8008a92:	0c00      	lsrs	r0, r0, #16
 8008a94:	4463      	add	r3, ip
 8008a96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008aa4:	4576      	cmp	r6, lr
 8008aa6:	f849 3b04 	str.w	r3, [r9], #4
 8008aaa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008aae:	d8e5      	bhi.n	8008a7c <__mdiff+0x88>
 8008ab0:	1b33      	subs	r3, r6, r4
 8008ab2:	3b15      	subs	r3, #21
 8008ab4:	f023 0303 	bic.w	r3, r3, #3
 8008ab8:	3415      	adds	r4, #21
 8008aba:	3304      	adds	r3, #4
 8008abc:	42a6      	cmp	r6, r4
 8008abe:	bf38      	it	cc
 8008ac0:	2304      	movcc	r3, #4
 8008ac2:	441d      	add	r5, r3
 8008ac4:	445b      	add	r3, fp
 8008ac6:	461e      	mov	r6, r3
 8008ac8:	462c      	mov	r4, r5
 8008aca:	4544      	cmp	r4, r8
 8008acc:	d30e      	bcc.n	8008aec <__mdiff+0xf8>
 8008ace:	f108 0103 	add.w	r1, r8, #3
 8008ad2:	1b49      	subs	r1, r1, r5
 8008ad4:	f021 0103 	bic.w	r1, r1, #3
 8008ad8:	3d03      	subs	r5, #3
 8008ada:	45a8      	cmp	r8, r5
 8008adc:	bf38      	it	cc
 8008ade:	2100      	movcc	r1, #0
 8008ae0:	440b      	add	r3, r1
 8008ae2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ae6:	b191      	cbz	r1, 8008b0e <__mdiff+0x11a>
 8008ae8:	6117      	str	r7, [r2, #16]
 8008aea:	e79d      	b.n	8008a28 <__mdiff+0x34>
 8008aec:	f854 1b04 	ldr.w	r1, [r4], #4
 8008af0:	46e6      	mov	lr, ip
 8008af2:	0c08      	lsrs	r0, r1, #16
 8008af4:	fa1c fc81 	uxtah	ip, ip, r1
 8008af8:	4471      	add	r1, lr
 8008afa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008afe:	b289      	uxth	r1, r1
 8008b00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b04:	f846 1b04 	str.w	r1, [r6], #4
 8008b08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b0c:	e7dd      	b.n	8008aca <__mdiff+0xd6>
 8008b0e:	3f01      	subs	r7, #1
 8008b10:	e7e7      	b.n	8008ae2 <__mdiff+0xee>
 8008b12:	bf00      	nop
 8008b14:	08009ef4 	.word	0x08009ef4
 8008b18:	08009f05 	.word	0x08009f05

08008b1c <__d2b>:
 8008b1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b20:	460f      	mov	r7, r1
 8008b22:	2101      	movs	r1, #1
 8008b24:	ec59 8b10 	vmov	r8, r9, d0
 8008b28:	4616      	mov	r6, r2
 8008b2a:	f7ff fcd5 	bl	80084d8 <_Balloc>
 8008b2e:	4604      	mov	r4, r0
 8008b30:	b930      	cbnz	r0, 8008b40 <__d2b+0x24>
 8008b32:	4602      	mov	r2, r0
 8008b34:	4b23      	ldr	r3, [pc, #140]	@ (8008bc4 <__d2b+0xa8>)
 8008b36:	4824      	ldr	r0, [pc, #144]	@ (8008bc8 <__d2b+0xac>)
 8008b38:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b3c:	f000 f910 	bl	8008d60 <__assert_func>
 8008b40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b48:	b10d      	cbz	r5, 8008b4e <__d2b+0x32>
 8008b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	f1b8 0300 	subs.w	r3, r8, #0
 8008b54:	d023      	beq.n	8008b9e <__d2b+0x82>
 8008b56:	4668      	mov	r0, sp
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	f7ff fd84 	bl	8008666 <__lo0bits>
 8008b5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b62:	b1d0      	cbz	r0, 8008b9a <__d2b+0x7e>
 8008b64:	f1c0 0320 	rsb	r3, r0, #32
 8008b68:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6c:	430b      	orrs	r3, r1
 8008b6e:	40c2      	lsrs	r2, r0
 8008b70:	6163      	str	r3, [r4, #20]
 8008b72:	9201      	str	r2, [sp, #4]
 8008b74:	9b01      	ldr	r3, [sp, #4]
 8008b76:	61a3      	str	r3, [r4, #24]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	bf0c      	ite	eq
 8008b7c:	2201      	moveq	r2, #1
 8008b7e:	2202      	movne	r2, #2
 8008b80:	6122      	str	r2, [r4, #16]
 8008b82:	b1a5      	cbz	r5, 8008bae <__d2b+0x92>
 8008b84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b88:	4405      	add	r5, r0
 8008b8a:	603d      	str	r5, [r7, #0]
 8008b8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b90:	6030      	str	r0, [r6, #0]
 8008b92:	4620      	mov	r0, r4
 8008b94:	b003      	add	sp, #12
 8008b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b9a:	6161      	str	r1, [r4, #20]
 8008b9c:	e7ea      	b.n	8008b74 <__d2b+0x58>
 8008b9e:	a801      	add	r0, sp, #4
 8008ba0:	f7ff fd61 	bl	8008666 <__lo0bits>
 8008ba4:	9b01      	ldr	r3, [sp, #4]
 8008ba6:	6163      	str	r3, [r4, #20]
 8008ba8:	3020      	adds	r0, #32
 8008baa:	2201      	movs	r2, #1
 8008bac:	e7e8      	b.n	8008b80 <__d2b+0x64>
 8008bae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008bb6:	6038      	str	r0, [r7, #0]
 8008bb8:	6918      	ldr	r0, [r3, #16]
 8008bba:	f7ff fd35 	bl	8008628 <__hi0bits>
 8008bbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bc2:	e7e5      	b.n	8008b90 <__d2b+0x74>
 8008bc4:	08009ef4 	.word	0x08009ef4
 8008bc8:	08009f05 	.word	0x08009f05

08008bcc <__sflush_r>:
 8008bcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd4:	0716      	lsls	r6, r2, #28
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	460c      	mov	r4, r1
 8008bda:	d454      	bmi.n	8008c86 <__sflush_r+0xba>
 8008bdc:	684b      	ldr	r3, [r1, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dc02      	bgt.n	8008be8 <__sflush_r+0x1c>
 8008be2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dd48      	ble.n	8008c7a <__sflush_r+0xae>
 8008be8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bea:	2e00      	cmp	r6, #0
 8008bec:	d045      	beq.n	8008c7a <__sflush_r+0xae>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008bf4:	682f      	ldr	r7, [r5, #0]
 8008bf6:	6a21      	ldr	r1, [r4, #32]
 8008bf8:	602b      	str	r3, [r5, #0]
 8008bfa:	d030      	beq.n	8008c5e <__sflush_r+0x92>
 8008bfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008bfe:	89a3      	ldrh	r3, [r4, #12]
 8008c00:	0759      	lsls	r1, r3, #29
 8008c02:	d505      	bpl.n	8008c10 <__sflush_r+0x44>
 8008c04:	6863      	ldr	r3, [r4, #4]
 8008c06:	1ad2      	subs	r2, r2, r3
 8008c08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c0a:	b10b      	cbz	r3, 8008c10 <__sflush_r+0x44>
 8008c0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c0e:	1ad2      	subs	r2, r2, r3
 8008c10:	2300      	movs	r3, #0
 8008c12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c14:	6a21      	ldr	r1, [r4, #32]
 8008c16:	4628      	mov	r0, r5
 8008c18:	47b0      	blx	r6
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	d106      	bne.n	8008c2e <__sflush_r+0x62>
 8008c20:	6829      	ldr	r1, [r5, #0]
 8008c22:	291d      	cmp	r1, #29
 8008c24:	d82b      	bhi.n	8008c7e <__sflush_r+0xb2>
 8008c26:	4a2a      	ldr	r2, [pc, #168]	@ (8008cd0 <__sflush_r+0x104>)
 8008c28:	40ca      	lsrs	r2, r1
 8008c2a:	07d6      	lsls	r6, r2, #31
 8008c2c:	d527      	bpl.n	8008c7e <__sflush_r+0xb2>
 8008c2e:	2200      	movs	r2, #0
 8008c30:	6062      	str	r2, [r4, #4]
 8008c32:	04d9      	lsls	r1, r3, #19
 8008c34:	6922      	ldr	r2, [r4, #16]
 8008c36:	6022      	str	r2, [r4, #0]
 8008c38:	d504      	bpl.n	8008c44 <__sflush_r+0x78>
 8008c3a:	1c42      	adds	r2, r0, #1
 8008c3c:	d101      	bne.n	8008c42 <__sflush_r+0x76>
 8008c3e:	682b      	ldr	r3, [r5, #0]
 8008c40:	b903      	cbnz	r3, 8008c44 <__sflush_r+0x78>
 8008c42:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c46:	602f      	str	r7, [r5, #0]
 8008c48:	b1b9      	cbz	r1, 8008c7a <__sflush_r+0xae>
 8008c4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c4e:	4299      	cmp	r1, r3
 8008c50:	d002      	beq.n	8008c58 <__sflush_r+0x8c>
 8008c52:	4628      	mov	r0, r5
 8008c54:	f7ff fb40 	bl	80082d8 <_free_r>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c5c:	e00d      	b.n	8008c7a <__sflush_r+0xae>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b0      	blx	r6
 8008c64:	4602      	mov	r2, r0
 8008c66:	1c50      	adds	r0, r2, #1
 8008c68:	d1c9      	bne.n	8008bfe <__sflush_r+0x32>
 8008c6a:	682b      	ldr	r3, [r5, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d0c6      	beq.n	8008bfe <__sflush_r+0x32>
 8008c70:	2b1d      	cmp	r3, #29
 8008c72:	d001      	beq.n	8008c78 <__sflush_r+0xac>
 8008c74:	2b16      	cmp	r3, #22
 8008c76:	d11e      	bne.n	8008cb6 <__sflush_r+0xea>
 8008c78:	602f      	str	r7, [r5, #0]
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	e022      	b.n	8008cc4 <__sflush_r+0xf8>
 8008c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c82:	b21b      	sxth	r3, r3
 8008c84:	e01b      	b.n	8008cbe <__sflush_r+0xf2>
 8008c86:	690f      	ldr	r7, [r1, #16]
 8008c88:	2f00      	cmp	r7, #0
 8008c8a:	d0f6      	beq.n	8008c7a <__sflush_r+0xae>
 8008c8c:	0793      	lsls	r3, r2, #30
 8008c8e:	680e      	ldr	r6, [r1, #0]
 8008c90:	bf08      	it	eq
 8008c92:	694b      	ldreq	r3, [r1, #20]
 8008c94:	600f      	str	r7, [r1, #0]
 8008c96:	bf18      	it	ne
 8008c98:	2300      	movne	r3, #0
 8008c9a:	eba6 0807 	sub.w	r8, r6, r7
 8008c9e:	608b      	str	r3, [r1, #8]
 8008ca0:	f1b8 0f00 	cmp.w	r8, #0
 8008ca4:	dde9      	ble.n	8008c7a <__sflush_r+0xae>
 8008ca6:	6a21      	ldr	r1, [r4, #32]
 8008ca8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008caa:	4643      	mov	r3, r8
 8008cac:	463a      	mov	r2, r7
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b0      	blx	r6
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	dc08      	bgt.n	8008cc8 <__sflush_r+0xfc>
 8008cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc8:	4407      	add	r7, r0
 8008cca:	eba8 0800 	sub.w	r8, r8, r0
 8008cce:	e7e7      	b.n	8008ca0 <__sflush_r+0xd4>
 8008cd0:	20400001 	.word	0x20400001

08008cd4 <_fflush_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	690b      	ldr	r3, [r1, #16]
 8008cd8:	4605      	mov	r5, r0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	b913      	cbnz	r3, 8008ce4 <_fflush_r+0x10>
 8008cde:	2500      	movs	r5, #0
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	bd38      	pop	{r3, r4, r5, pc}
 8008ce4:	b118      	cbz	r0, 8008cee <_fflush_r+0x1a>
 8008ce6:	6a03      	ldr	r3, [r0, #32]
 8008ce8:	b90b      	cbnz	r3, 8008cee <_fflush_r+0x1a>
 8008cea:	f7fe fba1 	bl	8007430 <__sinit>
 8008cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0f3      	beq.n	8008cde <_fflush_r+0xa>
 8008cf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008cf8:	07d0      	lsls	r0, r2, #31
 8008cfa:	d404      	bmi.n	8008d06 <_fflush_r+0x32>
 8008cfc:	0599      	lsls	r1, r3, #22
 8008cfe:	d402      	bmi.n	8008d06 <_fflush_r+0x32>
 8008d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d02:	f7fe fc8c 	bl	800761e <__retarget_lock_acquire_recursive>
 8008d06:	4628      	mov	r0, r5
 8008d08:	4621      	mov	r1, r4
 8008d0a:	f7ff ff5f 	bl	8008bcc <__sflush_r>
 8008d0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d10:	07da      	lsls	r2, r3, #31
 8008d12:	4605      	mov	r5, r0
 8008d14:	d4e4      	bmi.n	8008ce0 <_fflush_r+0xc>
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	059b      	lsls	r3, r3, #22
 8008d1a:	d4e1      	bmi.n	8008ce0 <_fflush_r+0xc>
 8008d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d1e:	f7fe fc7f 	bl	8007620 <__retarget_lock_release_recursive>
 8008d22:	e7dd      	b.n	8008ce0 <_fflush_r+0xc>

08008d24 <_sbrk_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d06      	ldr	r5, [pc, #24]	@ (8008d40 <_sbrk_r+0x1c>)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	602b      	str	r3, [r5, #0]
 8008d30:	f7f8 fef0 	bl	8001b14 <_sbrk>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_sbrk_r+0x1a>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_sbrk_r+0x1a>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	2000085c 	.word	0x2000085c

08008d44 <memcpy>:
 8008d44:	440a      	add	r2, r1
 8008d46:	4291      	cmp	r1, r2
 8008d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d4c:	d100      	bne.n	8008d50 <memcpy+0xc>
 8008d4e:	4770      	bx	lr
 8008d50:	b510      	push	{r4, lr}
 8008d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d5a:	4291      	cmp	r1, r2
 8008d5c:	d1f9      	bne.n	8008d52 <memcpy+0xe>
 8008d5e:	bd10      	pop	{r4, pc}

08008d60 <__assert_func>:
 8008d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d62:	4614      	mov	r4, r2
 8008d64:	461a      	mov	r2, r3
 8008d66:	4b09      	ldr	r3, [pc, #36]	@ (8008d8c <__assert_func+0x2c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	68d8      	ldr	r0, [r3, #12]
 8008d6e:	b14c      	cbz	r4, 8008d84 <__assert_func+0x24>
 8008d70:	4b07      	ldr	r3, [pc, #28]	@ (8008d90 <__assert_func+0x30>)
 8008d72:	9100      	str	r1, [sp, #0]
 8008d74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d78:	4906      	ldr	r1, [pc, #24]	@ (8008d94 <__assert_func+0x34>)
 8008d7a:	462b      	mov	r3, r5
 8008d7c:	f000 f842 	bl	8008e04 <fiprintf>
 8008d80:	f000 f852 	bl	8008e28 <abort>
 8008d84:	4b04      	ldr	r3, [pc, #16]	@ (8008d98 <__assert_func+0x38>)
 8008d86:	461c      	mov	r4, r3
 8008d88:	e7f3      	b.n	8008d72 <__assert_func+0x12>
 8008d8a:	bf00      	nop
 8008d8c:	20000018 	.word	0x20000018
 8008d90:	08009f68 	.word	0x08009f68
 8008d94:	08009f75 	.word	0x08009f75
 8008d98:	08009fa3 	.word	0x08009fa3

08008d9c <_calloc_r>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	fba1 5402 	umull	r5, r4, r1, r2
 8008da2:	b934      	cbnz	r4, 8008db2 <_calloc_r+0x16>
 8008da4:	4629      	mov	r1, r5
 8008da6:	f7ff fb0b 	bl	80083c0 <_malloc_r>
 8008daa:	4606      	mov	r6, r0
 8008dac:	b928      	cbnz	r0, 8008dba <_calloc_r+0x1e>
 8008dae:	4630      	mov	r0, r6
 8008db0:	bd70      	pop	{r4, r5, r6, pc}
 8008db2:	220c      	movs	r2, #12
 8008db4:	6002      	str	r2, [r0, #0]
 8008db6:	2600      	movs	r6, #0
 8008db8:	e7f9      	b.n	8008dae <_calloc_r+0x12>
 8008dba:	462a      	mov	r2, r5
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	f7fe fbb0 	bl	8007522 <memset>
 8008dc2:	e7f4      	b.n	8008dae <_calloc_r+0x12>

08008dc4 <__ascii_mbtowc>:
 8008dc4:	b082      	sub	sp, #8
 8008dc6:	b901      	cbnz	r1, 8008dca <__ascii_mbtowc+0x6>
 8008dc8:	a901      	add	r1, sp, #4
 8008dca:	b142      	cbz	r2, 8008dde <__ascii_mbtowc+0x1a>
 8008dcc:	b14b      	cbz	r3, 8008de2 <__ascii_mbtowc+0x1e>
 8008dce:	7813      	ldrb	r3, [r2, #0]
 8008dd0:	600b      	str	r3, [r1, #0]
 8008dd2:	7812      	ldrb	r2, [r2, #0]
 8008dd4:	1e10      	subs	r0, r2, #0
 8008dd6:	bf18      	it	ne
 8008dd8:	2001      	movne	r0, #1
 8008dda:	b002      	add	sp, #8
 8008ddc:	4770      	bx	lr
 8008dde:	4610      	mov	r0, r2
 8008de0:	e7fb      	b.n	8008dda <__ascii_mbtowc+0x16>
 8008de2:	f06f 0001 	mvn.w	r0, #1
 8008de6:	e7f8      	b.n	8008dda <__ascii_mbtowc+0x16>

08008de8 <__ascii_wctomb>:
 8008de8:	4603      	mov	r3, r0
 8008dea:	4608      	mov	r0, r1
 8008dec:	b141      	cbz	r1, 8008e00 <__ascii_wctomb+0x18>
 8008dee:	2aff      	cmp	r2, #255	@ 0xff
 8008df0:	d904      	bls.n	8008dfc <__ascii_wctomb+0x14>
 8008df2:	228a      	movs	r2, #138	@ 0x8a
 8008df4:	601a      	str	r2, [r3, #0]
 8008df6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfa:	4770      	bx	lr
 8008dfc:	700a      	strb	r2, [r1, #0]
 8008dfe:	2001      	movs	r0, #1
 8008e00:	4770      	bx	lr
	...

08008e04 <fiprintf>:
 8008e04:	b40e      	push	{r1, r2, r3}
 8008e06:	b503      	push	{r0, r1, lr}
 8008e08:	4601      	mov	r1, r0
 8008e0a:	ab03      	add	r3, sp, #12
 8008e0c:	4805      	ldr	r0, [pc, #20]	@ (8008e24 <fiprintf+0x20>)
 8008e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e12:	6800      	ldr	r0, [r0, #0]
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	f000 f837 	bl	8008e88 <_vfiprintf_r>
 8008e1a:	b002      	add	sp, #8
 8008e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e20:	b003      	add	sp, #12
 8008e22:	4770      	bx	lr
 8008e24:	20000018 	.word	0x20000018

08008e28 <abort>:
 8008e28:	b508      	push	{r3, lr}
 8008e2a:	2006      	movs	r0, #6
 8008e2c:	f000 fa00 	bl	8009230 <raise>
 8008e30:	2001      	movs	r0, #1
 8008e32:	f7f8 fdf7 	bl	8001a24 <_exit>

08008e36 <__sfputc_r>:
 8008e36:	6893      	ldr	r3, [r2, #8]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	b410      	push	{r4}
 8008e3e:	6093      	str	r3, [r2, #8]
 8008e40:	da08      	bge.n	8008e54 <__sfputc_r+0x1e>
 8008e42:	6994      	ldr	r4, [r2, #24]
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	db01      	blt.n	8008e4c <__sfputc_r+0x16>
 8008e48:	290a      	cmp	r1, #10
 8008e4a:	d103      	bne.n	8008e54 <__sfputc_r+0x1e>
 8008e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e50:	f000 b932 	b.w	80090b8 <__swbuf_r>
 8008e54:	6813      	ldr	r3, [r2, #0]
 8008e56:	1c58      	adds	r0, r3, #1
 8008e58:	6010      	str	r0, [r2, #0]
 8008e5a:	7019      	strb	r1, [r3, #0]
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <__sfputs_r>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	4606      	mov	r6, r0
 8008e68:	460f      	mov	r7, r1
 8008e6a:	4614      	mov	r4, r2
 8008e6c:	18d5      	adds	r5, r2, r3
 8008e6e:	42ac      	cmp	r4, r5
 8008e70:	d101      	bne.n	8008e76 <__sfputs_r+0x12>
 8008e72:	2000      	movs	r0, #0
 8008e74:	e007      	b.n	8008e86 <__sfputs_r+0x22>
 8008e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e7a:	463a      	mov	r2, r7
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f7ff ffda 	bl	8008e36 <__sfputc_r>
 8008e82:	1c43      	adds	r3, r0, #1
 8008e84:	d1f3      	bne.n	8008e6e <__sfputs_r+0xa>
 8008e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e88 <_vfiprintf_r>:
 8008e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	460d      	mov	r5, r1
 8008e8e:	b09d      	sub	sp, #116	@ 0x74
 8008e90:	4614      	mov	r4, r2
 8008e92:	4698      	mov	r8, r3
 8008e94:	4606      	mov	r6, r0
 8008e96:	b118      	cbz	r0, 8008ea0 <_vfiprintf_r+0x18>
 8008e98:	6a03      	ldr	r3, [r0, #32]
 8008e9a:	b90b      	cbnz	r3, 8008ea0 <_vfiprintf_r+0x18>
 8008e9c:	f7fe fac8 	bl	8007430 <__sinit>
 8008ea0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ea2:	07d9      	lsls	r1, r3, #31
 8008ea4:	d405      	bmi.n	8008eb2 <_vfiprintf_r+0x2a>
 8008ea6:	89ab      	ldrh	r3, [r5, #12]
 8008ea8:	059a      	lsls	r2, r3, #22
 8008eaa:	d402      	bmi.n	8008eb2 <_vfiprintf_r+0x2a>
 8008eac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eae:	f7fe fbb6 	bl	800761e <__retarget_lock_acquire_recursive>
 8008eb2:	89ab      	ldrh	r3, [r5, #12]
 8008eb4:	071b      	lsls	r3, r3, #28
 8008eb6:	d501      	bpl.n	8008ebc <_vfiprintf_r+0x34>
 8008eb8:	692b      	ldr	r3, [r5, #16]
 8008eba:	b99b      	cbnz	r3, 8008ee4 <_vfiprintf_r+0x5c>
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f000 f938 	bl	8009134 <__swsetup_r>
 8008ec4:	b170      	cbz	r0, 8008ee4 <_vfiprintf_r+0x5c>
 8008ec6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ec8:	07dc      	lsls	r4, r3, #31
 8008eca:	d504      	bpl.n	8008ed6 <_vfiprintf_r+0x4e>
 8008ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed0:	b01d      	add	sp, #116	@ 0x74
 8008ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed6:	89ab      	ldrh	r3, [r5, #12]
 8008ed8:	0598      	lsls	r0, r3, #22
 8008eda:	d4f7      	bmi.n	8008ecc <_vfiprintf_r+0x44>
 8008edc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ede:	f7fe fb9f 	bl	8007620 <__retarget_lock_release_recursive>
 8008ee2:	e7f3      	b.n	8008ecc <_vfiprintf_r+0x44>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ee8:	2320      	movs	r3, #32
 8008eea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008eee:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ef2:	2330      	movs	r3, #48	@ 0x30
 8008ef4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80090a4 <_vfiprintf_r+0x21c>
 8008ef8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008efc:	f04f 0901 	mov.w	r9, #1
 8008f00:	4623      	mov	r3, r4
 8008f02:	469a      	mov	sl, r3
 8008f04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f08:	b10a      	cbz	r2, 8008f0e <_vfiprintf_r+0x86>
 8008f0a:	2a25      	cmp	r2, #37	@ 0x25
 8008f0c:	d1f9      	bne.n	8008f02 <_vfiprintf_r+0x7a>
 8008f0e:	ebba 0b04 	subs.w	fp, sl, r4
 8008f12:	d00b      	beq.n	8008f2c <_vfiprintf_r+0xa4>
 8008f14:	465b      	mov	r3, fp
 8008f16:	4622      	mov	r2, r4
 8008f18:	4629      	mov	r1, r5
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	f7ff ffa2 	bl	8008e64 <__sfputs_r>
 8008f20:	3001      	adds	r0, #1
 8008f22:	f000 80a7 	beq.w	8009074 <_vfiprintf_r+0x1ec>
 8008f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f28:	445a      	add	r2, fp
 8008f2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 809f 	beq.w	8009074 <_vfiprintf_r+0x1ec>
 8008f36:	2300      	movs	r3, #0
 8008f38:	f04f 32ff 	mov.w	r2, #4294967295
 8008f3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f40:	f10a 0a01 	add.w	sl, sl, #1
 8008f44:	9304      	str	r3, [sp, #16]
 8008f46:	9307      	str	r3, [sp, #28]
 8008f48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f4e:	4654      	mov	r4, sl
 8008f50:	2205      	movs	r2, #5
 8008f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f56:	4853      	ldr	r0, [pc, #332]	@ (80090a4 <_vfiprintf_r+0x21c>)
 8008f58:	f7f7 f962 	bl	8000220 <memchr>
 8008f5c:	9a04      	ldr	r2, [sp, #16]
 8008f5e:	b9d8      	cbnz	r0, 8008f98 <_vfiprintf_r+0x110>
 8008f60:	06d1      	lsls	r1, r2, #27
 8008f62:	bf44      	itt	mi
 8008f64:	2320      	movmi	r3, #32
 8008f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f6a:	0713      	lsls	r3, r2, #28
 8008f6c:	bf44      	itt	mi
 8008f6e:	232b      	movmi	r3, #43	@ 0x2b
 8008f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f74:	f89a 3000 	ldrb.w	r3, [sl]
 8008f78:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f7a:	d015      	beq.n	8008fa8 <_vfiprintf_r+0x120>
 8008f7c:	9a07      	ldr	r2, [sp, #28]
 8008f7e:	4654      	mov	r4, sl
 8008f80:	2000      	movs	r0, #0
 8008f82:	f04f 0c0a 	mov.w	ip, #10
 8008f86:	4621      	mov	r1, r4
 8008f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f8c:	3b30      	subs	r3, #48	@ 0x30
 8008f8e:	2b09      	cmp	r3, #9
 8008f90:	d94b      	bls.n	800902a <_vfiprintf_r+0x1a2>
 8008f92:	b1b0      	cbz	r0, 8008fc2 <_vfiprintf_r+0x13a>
 8008f94:	9207      	str	r2, [sp, #28]
 8008f96:	e014      	b.n	8008fc2 <_vfiprintf_r+0x13a>
 8008f98:	eba0 0308 	sub.w	r3, r0, r8
 8008f9c:	fa09 f303 	lsl.w	r3, r9, r3
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	9304      	str	r3, [sp, #16]
 8008fa4:	46a2      	mov	sl, r4
 8008fa6:	e7d2      	b.n	8008f4e <_vfiprintf_r+0xc6>
 8008fa8:	9b03      	ldr	r3, [sp, #12]
 8008faa:	1d19      	adds	r1, r3, #4
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	9103      	str	r1, [sp, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	bfbb      	ittet	lt
 8008fb4:	425b      	neglt	r3, r3
 8008fb6:	f042 0202 	orrlt.w	r2, r2, #2
 8008fba:	9307      	strge	r3, [sp, #28]
 8008fbc:	9307      	strlt	r3, [sp, #28]
 8008fbe:	bfb8      	it	lt
 8008fc0:	9204      	strlt	r2, [sp, #16]
 8008fc2:	7823      	ldrb	r3, [r4, #0]
 8008fc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fc6:	d10a      	bne.n	8008fde <_vfiprintf_r+0x156>
 8008fc8:	7863      	ldrb	r3, [r4, #1]
 8008fca:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fcc:	d132      	bne.n	8009034 <_vfiprintf_r+0x1ac>
 8008fce:	9b03      	ldr	r3, [sp, #12]
 8008fd0:	1d1a      	adds	r2, r3, #4
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	9203      	str	r2, [sp, #12]
 8008fd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fda:	3402      	adds	r4, #2
 8008fdc:	9305      	str	r3, [sp, #20]
 8008fde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80090b4 <_vfiprintf_r+0x22c>
 8008fe2:	7821      	ldrb	r1, [r4, #0]
 8008fe4:	2203      	movs	r2, #3
 8008fe6:	4650      	mov	r0, sl
 8008fe8:	f7f7 f91a 	bl	8000220 <memchr>
 8008fec:	b138      	cbz	r0, 8008ffe <_vfiprintf_r+0x176>
 8008fee:	9b04      	ldr	r3, [sp, #16]
 8008ff0:	eba0 000a 	sub.w	r0, r0, sl
 8008ff4:	2240      	movs	r2, #64	@ 0x40
 8008ff6:	4082      	lsls	r2, r0
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	3401      	adds	r4, #1
 8008ffc:	9304      	str	r3, [sp, #16]
 8008ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009002:	4829      	ldr	r0, [pc, #164]	@ (80090a8 <_vfiprintf_r+0x220>)
 8009004:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009008:	2206      	movs	r2, #6
 800900a:	f7f7 f909 	bl	8000220 <memchr>
 800900e:	2800      	cmp	r0, #0
 8009010:	d03f      	beq.n	8009092 <_vfiprintf_r+0x20a>
 8009012:	4b26      	ldr	r3, [pc, #152]	@ (80090ac <_vfiprintf_r+0x224>)
 8009014:	bb1b      	cbnz	r3, 800905e <_vfiprintf_r+0x1d6>
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	3307      	adds	r3, #7
 800901a:	f023 0307 	bic.w	r3, r3, #7
 800901e:	3308      	adds	r3, #8
 8009020:	9303      	str	r3, [sp, #12]
 8009022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009024:	443b      	add	r3, r7
 8009026:	9309      	str	r3, [sp, #36]	@ 0x24
 8009028:	e76a      	b.n	8008f00 <_vfiprintf_r+0x78>
 800902a:	fb0c 3202 	mla	r2, ip, r2, r3
 800902e:	460c      	mov	r4, r1
 8009030:	2001      	movs	r0, #1
 8009032:	e7a8      	b.n	8008f86 <_vfiprintf_r+0xfe>
 8009034:	2300      	movs	r3, #0
 8009036:	3401      	adds	r4, #1
 8009038:	9305      	str	r3, [sp, #20]
 800903a:	4619      	mov	r1, r3
 800903c:	f04f 0c0a 	mov.w	ip, #10
 8009040:	4620      	mov	r0, r4
 8009042:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009046:	3a30      	subs	r2, #48	@ 0x30
 8009048:	2a09      	cmp	r2, #9
 800904a:	d903      	bls.n	8009054 <_vfiprintf_r+0x1cc>
 800904c:	2b00      	cmp	r3, #0
 800904e:	d0c6      	beq.n	8008fde <_vfiprintf_r+0x156>
 8009050:	9105      	str	r1, [sp, #20]
 8009052:	e7c4      	b.n	8008fde <_vfiprintf_r+0x156>
 8009054:	fb0c 2101 	mla	r1, ip, r1, r2
 8009058:	4604      	mov	r4, r0
 800905a:	2301      	movs	r3, #1
 800905c:	e7f0      	b.n	8009040 <_vfiprintf_r+0x1b8>
 800905e:	ab03      	add	r3, sp, #12
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	462a      	mov	r2, r5
 8009064:	4b12      	ldr	r3, [pc, #72]	@ (80090b0 <_vfiprintf_r+0x228>)
 8009066:	a904      	add	r1, sp, #16
 8009068:	4630      	mov	r0, r6
 800906a:	f7fd fd9f 	bl	8006bac <_printf_float>
 800906e:	4607      	mov	r7, r0
 8009070:	1c78      	adds	r0, r7, #1
 8009072:	d1d6      	bne.n	8009022 <_vfiprintf_r+0x19a>
 8009074:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009076:	07d9      	lsls	r1, r3, #31
 8009078:	d405      	bmi.n	8009086 <_vfiprintf_r+0x1fe>
 800907a:	89ab      	ldrh	r3, [r5, #12]
 800907c:	059a      	lsls	r2, r3, #22
 800907e:	d402      	bmi.n	8009086 <_vfiprintf_r+0x1fe>
 8009080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009082:	f7fe facd 	bl	8007620 <__retarget_lock_release_recursive>
 8009086:	89ab      	ldrh	r3, [r5, #12]
 8009088:	065b      	lsls	r3, r3, #25
 800908a:	f53f af1f 	bmi.w	8008ecc <_vfiprintf_r+0x44>
 800908e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009090:	e71e      	b.n	8008ed0 <_vfiprintf_r+0x48>
 8009092:	ab03      	add	r3, sp, #12
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	462a      	mov	r2, r5
 8009098:	4b05      	ldr	r3, [pc, #20]	@ (80090b0 <_vfiprintf_r+0x228>)
 800909a:	a904      	add	r1, sp, #16
 800909c:	4630      	mov	r0, r6
 800909e:	f7fe f81d 	bl	80070dc <_printf_i>
 80090a2:	e7e4      	b.n	800906e <_vfiprintf_r+0x1e6>
 80090a4:	08009fa4 	.word	0x08009fa4
 80090a8:	08009fae 	.word	0x08009fae
 80090ac:	08006bad 	.word	0x08006bad
 80090b0:	08008e65 	.word	0x08008e65
 80090b4:	08009faa 	.word	0x08009faa

080090b8 <__swbuf_r>:
 80090b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ba:	460e      	mov	r6, r1
 80090bc:	4614      	mov	r4, r2
 80090be:	4605      	mov	r5, r0
 80090c0:	b118      	cbz	r0, 80090ca <__swbuf_r+0x12>
 80090c2:	6a03      	ldr	r3, [r0, #32]
 80090c4:	b90b      	cbnz	r3, 80090ca <__swbuf_r+0x12>
 80090c6:	f7fe f9b3 	bl	8007430 <__sinit>
 80090ca:	69a3      	ldr	r3, [r4, #24]
 80090cc:	60a3      	str	r3, [r4, #8]
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	071a      	lsls	r2, r3, #28
 80090d2:	d501      	bpl.n	80090d8 <__swbuf_r+0x20>
 80090d4:	6923      	ldr	r3, [r4, #16]
 80090d6:	b943      	cbnz	r3, 80090ea <__swbuf_r+0x32>
 80090d8:	4621      	mov	r1, r4
 80090da:	4628      	mov	r0, r5
 80090dc:	f000 f82a 	bl	8009134 <__swsetup_r>
 80090e0:	b118      	cbz	r0, 80090ea <__swbuf_r+0x32>
 80090e2:	f04f 37ff 	mov.w	r7, #4294967295
 80090e6:	4638      	mov	r0, r7
 80090e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	6922      	ldr	r2, [r4, #16]
 80090ee:	1a98      	subs	r0, r3, r2
 80090f0:	6963      	ldr	r3, [r4, #20]
 80090f2:	b2f6      	uxtb	r6, r6
 80090f4:	4283      	cmp	r3, r0
 80090f6:	4637      	mov	r7, r6
 80090f8:	dc05      	bgt.n	8009106 <__swbuf_r+0x4e>
 80090fa:	4621      	mov	r1, r4
 80090fc:	4628      	mov	r0, r5
 80090fe:	f7ff fde9 	bl	8008cd4 <_fflush_r>
 8009102:	2800      	cmp	r0, #0
 8009104:	d1ed      	bne.n	80090e2 <__swbuf_r+0x2a>
 8009106:	68a3      	ldr	r3, [r4, #8]
 8009108:	3b01      	subs	r3, #1
 800910a:	60a3      	str	r3, [r4, #8]
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	6022      	str	r2, [r4, #0]
 8009112:	701e      	strb	r6, [r3, #0]
 8009114:	6962      	ldr	r2, [r4, #20]
 8009116:	1c43      	adds	r3, r0, #1
 8009118:	429a      	cmp	r2, r3
 800911a:	d004      	beq.n	8009126 <__swbuf_r+0x6e>
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	07db      	lsls	r3, r3, #31
 8009120:	d5e1      	bpl.n	80090e6 <__swbuf_r+0x2e>
 8009122:	2e0a      	cmp	r6, #10
 8009124:	d1df      	bne.n	80090e6 <__swbuf_r+0x2e>
 8009126:	4621      	mov	r1, r4
 8009128:	4628      	mov	r0, r5
 800912a:	f7ff fdd3 	bl	8008cd4 <_fflush_r>
 800912e:	2800      	cmp	r0, #0
 8009130:	d0d9      	beq.n	80090e6 <__swbuf_r+0x2e>
 8009132:	e7d6      	b.n	80090e2 <__swbuf_r+0x2a>

08009134 <__swsetup_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4b29      	ldr	r3, [pc, #164]	@ (80091dc <__swsetup_r+0xa8>)
 8009138:	4605      	mov	r5, r0
 800913a:	6818      	ldr	r0, [r3, #0]
 800913c:	460c      	mov	r4, r1
 800913e:	b118      	cbz	r0, 8009148 <__swsetup_r+0x14>
 8009140:	6a03      	ldr	r3, [r0, #32]
 8009142:	b90b      	cbnz	r3, 8009148 <__swsetup_r+0x14>
 8009144:	f7fe f974 	bl	8007430 <__sinit>
 8009148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800914c:	0719      	lsls	r1, r3, #28
 800914e:	d422      	bmi.n	8009196 <__swsetup_r+0x62>
 8009150:	06da      	lsls	r2, r3, #27
 8009152:	d407      	bmi.n	8009164 <__swsetup_r+0x30>
 8009154:	2209      	movs	r2, #9
 8009156:	602a      	str	r2, [r5, #0]
 8009158:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800915c:	81a3      	strh	r3, [r4, #12]
 800915e:	f04f 30ff 	mov.w	r0, #4294967295
 8009162:	e033      	b.n	80091cc <__swsetup_r+0x98>
 8009164:	0758      	lsls	r0, r3, #29
 8009166:	d512      	bpl.n	800918e <__swsetup_r+0x5a>
 8009168:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800916a:	b141      	cbz	r1, 800917e <__swsetup_r+0x4a>
 800916c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009170:	4299      	cmp	r1, r3
 8009172:	d002      	beq.n	800917a <__swsetup_r+0x46>
 8009174:	4628      	mov	r0, r5
 8009176:	f7ff f8af 	bl	80082d8 <_free_r>
 800917a:	2300      	movs	r3, #0
 800917c:	6363      	str	r3, [r4, #52]	@ 0x34
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009184:	81a3      	strh	r3, [r4, #12]
 8009186:	2300      	movs	r3, #0
 8009188:	6063      	str	r3, [r4, #4]
 800918a:	6923      	ldr	r3, [r4, #16]
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	89a3      	ldrh	r3, [r4, #12]
 8009190:	f043 0308 	orr.w	r3, r3, #8
 8009194:	81a3      	strh	r3, [r4, #12]
 8009196:	6923      	ldr	r3, [r4, #16]
 8009198:	b94b      	cbnz	r3, 80091ae <__swsetup_r+0x7a>
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091a4:	d003      	beq.n	80091ae <__swsetup_r+0x7a>
 80091a6:	4621      	mov	r1, r4
 80091a8:	4628      	mov	r0, r5
 80091aa:	f000 f883 	bl	80092b4 <__smakebuf_r>
 80091ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b2:	f013 0201 	ands.w	r2, r3, #1
 80091b6:	d00a      	beq.n	80091ce <__swsetup_r+0x9a>
 80091b8:	2200      	movs	r2, #0
 80091ba:	60a2      	str	r2, [r4, #8]
 80091bc:	6962      	ldr	r2, [r4, #20]
 80091be:	4252      	negs	r2, r2
 80091c0:	61a2      	str	r2, [r4, #24]
 80091c2:	6922      	ldr	r2, [r4, #16]
 80091c4:	b942      	cbnz	r2, 80091d8 <__swsetup_r+0xa4>
 80091c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091ca:	d1c5      	bne.n	8009158 <__swsetup_r+0x24>
 80091cc:	bd38      	pop	{r3, r4, r5, pc}
 80091ce:	0799      	lsls	r1, r3, #30
 80091d0:	bf58      	it	pl
 80091d2:	6962      	ldrpl	r2, [r4, #20]
 80091d4:	60a2      	str	r2, [r4, #8]
 80091d6:	e7f4      	b.n	80091c2 <__swsetup_r+0x8e>
 80091d8:	2000      	movs	r0, #0
 80091da:	e7f7      	b.n	80091cc <__swsetup_r+0x98>
 80091dc:	20000018 	.word	0x20000018

080091e0 <_raise_r>:
 80091e0:	291f      	cmp	r1, #31
 80091e2:	b538      	push	{r3, r4, r5, lr}
 80091e4:	4605      	mov	r5, r0
 80091e6:	460c      	mov	r4, r1
 80091e8:	d904      	bls.n	80091f4 <_raise_r+0x14>
 80091ea:	2316      	movs	r3, #22
 80091ec:	6003      	str	r3, [r0, #0]
 80091ee:	f04f 30ff 	mov.w	r0, #4294967295
 80091f2:	bd38      	pop	{r3, r4, r5, pc}
 80091f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091f6:	b112      	cbz	r2, 80091fe <_raise_r+0x1e>
 80091f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091fc:	b94b      	cbnz	r3, 8009212 <_raise_r+0x32>
 80091fe:	4628      	mov	r0, r5
 8009200:	f000 f830 	bl	8009264 <_getpid_r>
 8009204:	4622      	mov	r2, r4
 8009206:	4601      	mov	r1, r0
 8009208:	4628      	mov	r0, r5
 800920a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800920e:	f000 b817 	b.w	8009240 <_kill_r>
 8009212:	2b01      	cmp	r3, #1
 8009214:	d00a      	beq.n	800922c <_raise_r+0x4c>
 8009216:	1c59      	adds	r1, r3, #1
 8009218:	d103      	bne.n	8009222 <_raise_r+0x42>
 800921a:	2316      	movs	r3, #22
 800921c:	6003      	str	r3, [r0, #0]
 800921e:	2001      	movs	r0, #1
 8009220:	e7e7      	b.n	80091f2 <_raise_r+0x12>
 8009222:	2100      	movs	r1, #0
 8009224:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009228:	4620      	mov	r0, r4
 800922a:	4798      	blx	r3
 800922c:	2000      	movs	r0, #0
 800922e:	e7e0      	b.n	80091f2 <_raise_r+0x12>

08009230 <raise>:
 8009230:	4b02      	ldr	r3, [pc, #8]	@ (800923c <raise+0xc>)
 8009232:	4601      	mov	r1, r0
 8009234:	6818      	ldr	r0, [r3, #0]
 8009236:	f7ff bfd3 	b.w	80091e0 <_raise_r>
 800923a:	bf00      	nop
 800923c:	20000018 	.word	0x20000018

08009240 <_kill_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4d07      	ldr	r5, [pc, #28]	@ (8009260 <_kill_r+0x20>)
 8009244:	2300      	movs	r3, #0
 8009246:	4604      	mov	r4, r0
 8009248:	4608      	mov	r0, r1
 800924a:	4611      	mov	r1, r2
 800924c:	602b      	str	r3, [r5, #0]
 800924e:	f7f8 fbd9 	bl	8001a04 <_kill>
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	d102      	bne.n	800925c <_kill_r+0x1c>
 8009256:	682b      	ldr	r3, [r5, #0]
 8009258:	b103      	cbz	r3, 800925c <_kill_r+0x1c>
 800925a:	6023      	str	r3, [r4, #0]
 800925c:	bd38      	pop	{r3, r4, r5, pc}
 800925e:	bf00      	nop
 8009260:	2000085c 	.word	0x2000085c

08009264 <_getpid_r>:
 8009264:	f7f8 bbc6 	b.w	80019f4 <_getpid>

08009268 <__swhatbuf_r>:
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	460c      	mov	r4, r1
 800926c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009270:	2900      	cmp	r1, #0
 8009272:	b096      	sub	sp, #88	@ 0x58
 8009274:	4615      	mov	r5, r2
 8009276:	461e      	mov	r6, r3
 8009278:	da0d      	bge.n	8009296 <__swhatbuf_r+0x2e>
 800927a:	89a3      	ldrh	r3, [r4, #12]
 800927c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009280:	f04f 0100 	mov.w	r1, #0
 8009284:	bf14      	ite	ne
 8009286:	2340      	movne	r3, #64	@ 0x40
 8009288:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800928c:	2000      	movs	r0, #0
 800928e:	6031      	str	r1, [r6, #0]
 8009290:	602b      	str	r3, [r5, #0]
 8009292:	b016      	add	sp, #88	@ 0x58
 8009294:	bd70      	pop	{r4, r5, r6, pc}
 8009296:	466a      	mov	r2, sp
 8009298:	f000 f848 	bl	800932c <_fstat_r>
 800929c:	2800      	cmp	r0, #0
 800929e:	dbec      	blt.n	800927a <__swhatbuf_r+0x12>
 80092a0:	9901      	ldr	r1, [sp, #4]
 80092a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092aa:	4259      	negs	r1, r3
 80092ac:	4159      	adcs	r1, r3
 80092ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092b2:	e7eb      	b.n	800928c <__swhatbuf_r+0x24>

080092b4 <__smakebuf_r>:
 80092b4:	898b      	ldrh	r3, [r1, #12]
 80092b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092b8:	079d      	lsls	r5, r3, #30
 80092ba:	4606      	mov	r6, r0
 80092bc:	460c      	mov	r4, r1
 80092be:	d507      	bpl.n	80092d0 <__smakebuf_r+0x1c>
 80092c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	6123      	str	r3, [r4, #16]
 80092c8:	2301      	movs	r3, #1
 80092ca:	6163      	str	r3, [r4, #20]
 80092cc:	b003      	add	sp, #12
 80092ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092d0:	ab01      	add	r3, sp, #4
 80092d2:	466a      	mov	r2, sp
 80092d4:	f7ff ffc8 	bl	8009268 <__swhatbuf_r>
 80092d8:	9f00      	ldr	r7, [sp, #0]
 80092da:	4605      	mov	r5, r0
 80092dc:	4639      	mov	r1, r7
 80092de:	4630      	mov	r0, r6
 80092e0:	f7ff f86e 	bl	80083c0 <_malloc_r>
 80092e4:	b948      	cbnz	r0, 80092fa <__smakebuf_r+0x46>
 80092e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ea:	059a      	lsls	r2, r3, #22
 80092ec:	d4ee      	bmi.n	80092cc <__smakebuf_r+0x18>
 80092ee:	f023 0303 	bic.w	r3, r3, #3
 80092f2:	f043 0302 	orr.w	r3, r3, #2
 80092f6:	81a3      	strh	r3, [r4, #12]
 80092f8:	e7e2      	b.n	80092c0 <__smakebuf_r+0xc>
 80092fa:	89a3      	ldrh	r3, [r4, #12]
 80092fc:	6020      	str	r0, [r4, #0]
 80092fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	9b01      	ldr	r3, [sp, #4]
 8009306:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800930a:	b15b      	cbz	r3, 8009324 <__smakebuf_r+0x70>
 800930c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009310:	4630      	mov	r0, r6
 8009312:	f000 f81d 	bl	8009350 <_isatty_r>
 8009316:	b128      	cbz	r0, 8009324 <__smakebuf_r+0x70>
 8009318:	89a3      	ldrh	r3, [r4, #12]
 800931a:	f023 0303 	bic.w	r3, r3, #3
 800931e:	f043 0301 	orr.w	r3, r3, #1
 8009322:	81a3      	strh	r3, [r4, #12]
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	431d      	orrs	r5, r3
 8009328:	81a5      	strh	r5, [r4, #12]
 800932a:	e7cf      	b.n	80092cc <__smakebuf_r+0x18>

0800932c <_fstat_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	4d07      	ldr	r5, [pc, #28]	@ (800934c <_fstat_r+0x20>)
 8009330:	2300      	movs	r3, #0
 8009332:	4604      	mov	r4, r0
 8009334:	4608      	mov	r0, r1
 8009336:	4611      	mov	r1, r2
 8009338:	602b      	str	r3, [r5, #0]
 800933a:	f7f8 fbc3 	bl	8001ac4 <_fstat>
 800933e:	1c43      	adds	r3, r0, #1
 8009340:	d102      	bne.n	8009348 <_fstat_r+0x1c>
 8009342:	682b      	ldr	r3, [r5, #0]
 8009344:	b103      	cbz	r3, 8009348 <_fstat_r+0x1c>
 8009346:	6023      	str	r3, [r4, #0]
 8009348:	bd38      	pop	{r3, r4, r5, pc}
 800934a:	bf00      	nop
 800934c:	2000085c 	.word	0x2000085c

08009350 <_isatty_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4d06      	ldr	r5, [pc, #24]	@ (800936c <_isatty_r+0x1c>)
 8009354:	2300      	movs	r3, #0
 8009356:	4604      	mov	r4, r0
 8009358:	4608      	mov	r0, r1
 800935a:	602b      	str	r3, [r5, #0]
 800935c:	f7f8 fbc2 	bl	8001ae4 <_isatty>
 8009360:	1c43      	adds	r3, r0, #1
 8009362:	d102      	bne.n	800936a <_isatty_r+0x1a>
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	b103      	cbz	r3, 800936a <_isatty_r+0x1a>
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	bd38      	pop	{r3, r4, r5, pc}
 800936c:	2000085c 	.word	0x2000085c

08009370 <cosf>:
 8009370:	ee10 3a10 	vmov	r3, s0
 8009374:	b507      	push	{r0, r1, r2, lr}
 8009376:	4a1e      	ldr	r2, [pc, #120]	@ (80093f0 <cosf+0x80>)
 8009378:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800937c:	4293      	cmp	r3, r2
 800937e:	d806      	bhi.n	800938e <cosf+0x1e>
 8009380:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80093f4 <cosf+0x84>
 8009384:	b003      	add	sp, #12
 8009386:	f85d eb04 	ldr.w	lr, [sp], #4
 800938a:	f000 b835 	b.w	80093f8 <__kernel_cosf>
 800938e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009392:	d304      	bcc.n	800939e <cosf+0x2e>
 8009394:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009398:	b003      	add	sp, #12
 800939a:	f85d fb04 	ldr.w	pc, [sp], #4
 800939e:	4668      	mov	r0, sp
 80093a0:	f000 f8ca 	bl	8009538 <__ieee754_rem_pio2f>
 80093a4:	f000 0003 	and.w	r0, r0, #3
 80093a8:	2801      	cmp	r0, #1
 80093aa:	d009      	beq.n	80093c0 <cosf+0x50>
 80093ac:	2802      	cmp	r0, #2
 80093ae:	d010      	beq.n	80093d2 <cosf+0x62>
 80093b0:	b9b0      	cbnz	r0, 80093e0 <cosf+0x70>
 80093b2:	eddd 0a01 	vldr	s1, [sp, #4]
 80093b6:	ed9d 0a00 	vldr	s0, [sp]
 80093ba:	f000 f81d 	bl	80093f8 <__kernel_cosf>
 80093be:	e7eb      	b.n	8009398 <cosf+0x28>
 80093c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80093c4:	ed9d 0a00 	vldr	s0, [sp]
 80093c8:	f000 f86e 	bl	80094a8 <__kernel_sinf>
 80093cc:	eeb1 0a40 	vneg.f32	s0, s0
 80093d0:	e7e2      	b.n	8009398 <cosf+0x28>
 80093d2:	eddd 0a01 	vldr	s1, [sp, #4]
 80093d6:	ed9d 0a00 	vldr	s0, [sp]
 80093da:	f000 f80d 	bl	80093f8 <__kernel_cosf>
 80093de:	e7f5      	b.n	80093cc <cosf+0x5c>
 80093e0:	eddd 0a01 	vldr	s1, [sp, #4]
 80093e4:	ed9d 0a00 	vldr	s0, [sp]
 80093e8:	2001      	movs	r0, #1
 80093ea:	f000 f85d 	bl	80094a8 <__kernel_sinf>
 80093ee:	e7d3      	b.n	8009398 <cosf+0x28>
 80093f0:	3f490fd8 	.word	0x3f490fd8
 80093f4:	00000000 	.word	0x00000000

080093f8 <__kernel_cosf>:
 80093f8:	ee10 3a10 	vmov	r3, s0
 80093fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009400:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009404:	eef0 6a40 	vmov.f32	s13, s0
 8009408:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800940c:	d204      	bcs.n	8009418 <__kernel_cosf+0x20>
 800940e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8009412:	ee17 2a90 	vmov	r2, s15
 8009416:	b342      	cbz	r2, 800946a <__kernel_cosf+0x72>
 8009418:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800941c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8009488 <__kernel_cosf+0x90>
 8009420:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800948c <__kernel_cosf+0x94>
 8009424:	4a1a      	ldr	r2, [pc, #104]	@ (8009490 <__kernel_cosf+0x98>)
 8009426:	eea7 6a27 	vfma.f32	s12, s14, s15
 800942a:	4293      	cmp	r3, r2
 800942c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009494 <__kernel_cosf+0x9c>
 8009430:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009434:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8009498 <__kernel_cosf+0xa0>
 8009438:	eea7 6a87 	vfma.f32	s12, s15, s14
 800943c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800949c <__kernel_cosf+0xa4>
 8009440:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009444:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80094a0 <__kernel_cosf+0xa8>
 8009448:	eea7 6a87 	vfma.f32	s12, s15, s14
 800944c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8009450:	ee26 6a07 	vmul.f32	s12, s12, s14
 8009454:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009458:	eee7 0a06 	vfma.f32	s1, s14, s12
 800945c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009460:	d804      	bhi.n	800946c <__kernel_cosf+0x74>
 8009462:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009466:	ee30 0a67 	vsub.f32	s0, s0, s15
 800946a:	4770      	bx	lr
 800946c:	4a0d      	ldr	r2, [pc, #52]	@ (80094a4 <__kernel_cosf+0xac>)
 800946e:	4293      	cmp	r3, r2
 8009470:	bf9a      	itte	ls
 8009472:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8009476:	ee07 3a10 	vmovls	s14, r3
 800947a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800947e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009486:	e7ec      	b.n	8009462 <__kernel_cosf+0x6a>
 8009488:	ad47d74e 	.word	0xad47d74e
 800948c:	310f74f6 	.word	0x310f74f6
 8009490:	3e999999 	.word	0x3e999999
 8009494:	b493f27c 	.word	0xb493f27c
 8009498:	37d00d01 	.word	0x37d00d01
 800949c:	bab60b61 	.word	0xbab60b61
 80094a0:	3d2aaaab 	.word	0x3d2aaaab
 80094a4:	3f480000 	.word	0x3f480000

080094a8 <__kernel_sinf>:
 80094a8:	ee10 3a10 	vmov	r3, s0
 80094ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80094b0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80094b4:	d204      	bcs.n	80094c0 <__kernel_sinf+0x18>
 80094b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80094ba:	ee17 3a90 	vmov	r3, s15
 80094be:	b35b      	cbz	r3, 8009518 <__kernel_sinf+0x70>
 80094c0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80094c4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800951c <__kernel_sinf+0x74>
 80094c8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8009520 <__kernel_sinf+0x78>
 80094cc:	eea7 6a27 	vfma.f32	s12, s14, s15
 80094d0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8009524 <__kernel_sinf+0x7c>
 80094d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80094d8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8009528 <__kernel_sinf+0x80>
 80094dc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80094e0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800952c <__kernel_sinf+0x84>
 80094e4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80094e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80094ec:	b930      	cbnz	r0, 80094fc <__kernel_sinf+0x54>
 80094ee:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8009530 <__kernel_sinf+0x88>
 80094f2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80094f6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80094fa:	4770      	bx	lr
 80094fc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009500:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009504:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009508:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800950c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8009534 <__kernel_sinf+0x8c>
 8009510:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009514:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	2f2ec9d3 	.word	0x2f2ec9d3
 8009520:	b2d72f34 	.word	0xb2d72f34
 8009524:	3638ef1b 	.word	0x3638ef1b
 8009528:	b9500d01 	.word	0xb9500d01
 800952c:	3c088889 	.word	0x3c088889
 8009530:	be2aaaab 	.word	0xbe2aaaab
 8009534:	3e2aaaab 	.word	0x3e2aaaab

08009538 <__ieee754_rem_pio2f>:
 8009538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800953a:	ee10 6a10 	vmov	r6, s0
 800953e:	4b88      	ldr	r3, [pc, #544]	@ (8009760 <__ieee754_rem_pio2f+0x228>)
 8009540:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8009544:	429d      	cmp	r5, r3
 8009546:	b087      	sub	sp, #28
 8009548:	4604      	mov	r4, r0
 800954a:	d805      	bhi.n	8009558 <__ieee754_rem_pio2f+0x20>
 800954c:	2300      	movs	r3, #0
 800954e:	ed80 0a00 	vstr	s0, [r0]
 8009552:	6043      	str	r3, [r0, #4]
 8009554:	2000      	movs	r0, #0
 8009556:	e022      	b.n	800959e <__ieee754_rem_pio2f+0x66>
 8009558:	4b82      	ldr	r3, [pc, #520]	@ (8009764 <__ieee754_rem_pio2f+0x22c>)
 800955a:	429d      	cmp	r5, r3
 800955c:	d83a      	bhi.n	80095d4 <__ieee754_rem_pio2f+0x9c>
 800955e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009562:	2e00      	cmp	r6, #0
 8009564:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8009768 <__ieee754_rem_pio2f+0x230>
 8009568:	4a80      	ldr	r2, [pc, #512]	@ (800976c <__ieee754_rem_pio2f+0x234>)
 800956a:	f023 030f 	bic.w	r3, r3, #15
 800956e:	dd18      	ble.n	80095a2 <__ieee754_rem_pio2f+0x6a>
 8009570:	4293      	cmp	r3, r2
 8009572:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009576:	bf09      	itett	eq
 8009578:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8009770 <__ieee754_rem_pio2f+0x238>
 800957c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8009774 <__ieee754_rem_pio2f+0x23c>
 8009580:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8009778 <__ieee754_rem_pio2f+0x240>
 8009584:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009588:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800958c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009590:	ed80 7a00 	vstr	s14, [r0]
 8009594:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009598:	edc0 7a01 	vstr	s15, [r0, #4]
 800959c:	2001      	movs	r0, #1
 800959e:	b007      	add	sp, #28
 80095a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095a2:	4293      	cmp	r3, r2
 80095a4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80095a8:	bf09      	itett	eq
 80095aa:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8009770 <__ieee754_rem_pio2f+0x238>
 80095ae:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8009774 <__ieee754_rem_pio2f+0x23c>
 80095b2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8009778 <__ieee754_rem_pio2f+0x240>
 80095b6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80095ba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80095be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80095c2:	ed80 7a00 	vstr	s14, [r0]
 80095c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ca:	edc0 7a01 	vstr	s15, [r0, #4]
 80095ce:	f04f 30ff 	mov.w	r0, #4294967295
 80095d2:	e7e4      	b.n	800959e <__ieee754_rem_pio2f+0x66>
 80095d4:	4b69      	ldr	r3, [pc, #420]	@ (800977c <__ieee754_rem_pio2f+0x244>)
 80095d6:	429d      	cmp	r5, r3
 80095d8:	d873      	bhi.n	80096c2 <__ieee754_rem_pio2f+0x18a>
 80095da:	f000 f8dd 	bl	8009798 <fabsf>
 80095de:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8009780 <__ieee754_rem_pio2f+0x248>
 80095e2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80095e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80095ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80095f2:	ee17 0a90 	vmov	r0, s15
 80095f6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009768 <__ieee754_rem_pio2f+0x230>
 80095fa:	eea7 0a67 	vfms.f32	s0, s14, s15
 80095fe:	281f      	cmp	r0, #31
 8009600:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009774 <__ieee754_rem_pio2f+0x23c>
 8009604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009608:	eeb1 6a47 	vneg.f32	s12, s14
 800960c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009610:	ee16 1a90 	vmov	r1, s13
 8009614:	dc09      	bgt.n	800962a <__ieee754_rem_pio2f+0xf2>
 8009616:	4a5b      	ldr	r2, [pc, #364]	@ (8009784 <__ieee754_rem_pio2f+0x24c>)
 8009618:	1e47      	subs	r7, r0, #1
 800961a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800961e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8009622:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009626:	4293      	cmp	r3, r2
 8009628:	d107      	bne.n	800963a <__ieee754_rem_pio2f+0x102>
 800962a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800962e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8009632:	2a08      	cmp	r2, #8
 8009634:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8009638:	dc14      	bgt.n	8009664 <__ieee754_rem_pio2f+0x12c>
 800963a:	6021      	str	r1, [r4, #0]
 800963c:	ed94 7a00 	vldr	s14, [r4]
 8009640:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009644:	2e00      	cmp	r6, #0
 8009646:	ee30 0a67 	vsub.f32	s0, s0, s15
 800964a:	ed84 0a01 	vstr	s0, [r4, #4]
 800964e:	daa6      	bge.n	800959e <__ieee754_rem_pio2f+0x66>
 8009650:	eeb1 7a47 	vneg.f32	s14, s14
 8009654:	eeb1 0a40 	vneg.f32	s0, s0
 8009658:	ed84 7a00 	vstr	s14, [r4]
 800965c:	ed84 0a01 	vstr	s0, [r4, #4]
 8009660:	4240      	negs	r0, r0
 8009662:	e79c      	b.n	800959e <__ieee754_rem_pio2f+0x66>
 8009664:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8009770 <__ieee754_rem_pio2f+0x238>
 8009668:	eef0 6a40 	vmov.f32	s13, s0
 800966c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009670:	ee70 7a66 	vsub.f32	s15, s0, s13
 8009674:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009678:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009778 <__ieee754_rem_pio2f+0x240>
 800967c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009680:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009684:	ee15 2a90 	vmov	r2, s11
 8009688:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800968c:	1a5b      	subs	r3, r3, r1
 800968e:	2b19      	cmp	r3, #25
 8009690:	dc04      	bgt.n	800969c <__ieee754_rem_pio2f+0x164>
 8009692:	edc4 5a00 	vstr	s11, [r4]
 8009696:	eeb0 0a66 	vmov.f32	s0, s13
 800969a:	e7cf      	b.n	800963c <__ieee754_rem_pio2f+0x104>
 800969c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8009788 <__ieee754_rem_pio2f+0x250>
 80096a0:	eeb0 0a66 	vmov.f32	s0, s13
 80096a4:	eea6 0a25 	vfma.f32	s0, s12, s11
 80096a8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80096ac:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800978c <__ieee754_rem_pio2f+0x254>
 80096b0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80096b4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80096b8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80096bc:	ed84 7a00 	vstr	s14, [r4]
 80096c0:	e7bc      	b.n	800963c <__ieee754_rem_pio2f+0x104>
 80096c2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80096c6:	d306      	bcc.n	80096d6 <__ieee754_rem_pio2f+0x19e>
 80096c8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80096cc:	edc0 7a01 	vstr	s15, [r0, #4]
 80096d0:	edc0 7a00 	vstr	s15, [r0]
 80096d4:	e73e      	b.n	8009554 <__ieee754_rem_pio2f+0x1c>
 80096d6:	15ea      	asrs	r2, r5, #23
 80096d8:	3a86      	subs	r2, #134	@ 0x86
 80096da:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80096de:	ee07 3a90 	vmov	s15, r3
 80096e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80096e6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8009790 <__ieee754_rem_pio2f+0x258>
 80096ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80096ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80096f2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80096f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80096fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80096fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009702:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009706:	ed8d 7a04 	vstr	s14, [sp, #16]
 800970a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800970e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009716:	edcd 7a05 	vstr	s15, [sp, #20]
 800971a:	d11e      	bne.n	800975a <__ieee754_rem_pio2f+0x222>
 800971c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009724:	bf0c      	ite	eq
 8009726:	2301      	moveq	r3, #1
 8009728:	2302      	movne	r3, #2
 800972a:	491a      	ldr	r1, [pc, #104]	@ (8009794 <__ieee754_rem_pio2f+0x25c>)
 800972c:	9101      	str	r1, [sp, #4]
 800972e:	2102      	movs	r1, #2
 8009730:	9100      	str	r1, [sp, #0]
 8009732:	a803      	add	r0, sp, #12
 8009734:	4621      	mov	r1, r4
 8009736:	f000 f837 	bl	80097a8 <__kernel_rem_pio2f>
 800973a:	2e00      	cmp	r6, #0
 800973c:	f6bf af2f 	bge.w	800959e <__ieee754_rem_pio2f+0x66>
 8009740:	edd4 7a00 	vldr	s15, [r4]
 8009744:	eef1 7a67 	vneg.f32	s15, s15
 8009748:	edc4 7a00 	vstr	s15, [r4]
 800974c:	edd4 7a01 	vldr	s15, [r4, #4]
 8009750:	eef1 7a67 	vneg.f32	s15, s15
 8009754:	edc4 7a01 	vstr	s15, [r4, #4]
 8009758:	e782      	b.n	8009660 <__ieee754_rem_pio2f+0x128>
 800975a:	2303      	movs	r3, #3
 800975c:	e7e5      	b.n	800972a <__ieee754_rem_pio2f+0x1f2>
 800975e:	bf00      	nop
 8009760:	3f490fd8 	.word	0x3f490fd8
 8009764:	4016cbe3 	.word	0x4016cbe3
 8009768:	3fc90f80 	.word	0x3fc90f80
 800976c:	3fc90fd0 	.word	0x3fc90fd0
 8009770:	37354400 	.word	0x37354400
 8009774:	37354443 	.word	0x37354443
 8009778:	2e85a308 	.word	0x2e85a308
 800977c:	43490f80 	.word	0x43490f80
 8009780:	3f22f984 	.word	0x3f22f984
 8009784:	0800a1bc 	.word	0x0800a1bc
 8009788:	2e85a300 	.word	0x2e85a300
 800978c:	248d3132 	.word	0x248d3132
 8009790:	43800000 	.word	0x43800000
 8009794:	0800a23c 	.word	0x0800a23c

08009798 <fabsf>:
 8009798:	ee10 3a10 	vmov	r3, s0
 800979c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097a0:	ee00 3a10 	vmov	s0, r3
 80097a4:	4770      	bx	lr
	...

080097a8 <__kernel_rem_pio2f>:
 80097a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ac:	ed2d 8b04 	vpush	{d8-d9}
 80097b0:	b0d9      	sub	sp, #356	@ 0x164
 80097b2:	4690      	mov	r8, r2
 80097b4:	9001      	str	r0, [sp, #4]
 80097b6:	4ab6      	ldr	r2, [pc, #728]	@ (8009a90 <__kernel_rem_pio2f+0x2e8>)
 80097b8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80097ba:	f118 0f04 	cmn.w	r8, #4
 80097be:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80097c2:	460f      	mov	r7, r1
 80097c4:	f103 3bff 	add.w	fp, r3, #4294967295
 80097c8:	db26      	blt.n	8009818 <__kernel_rem_pio2f+0x70>
 80097ca:	f1b8 0203 	subs.w	r2, r8, #3
 80097ce:	bf48      	it	mi
 80097d0:	f108 0204 	addmi.w	r2, r8, #4
 80097d4:	10d2      	asrs	r2, r2, #3
 80097d6:	1c55      	adds	r5, r2, #1
 80097d8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80097da:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8009aa0 <__kernel_rem_pio2f+0x2f8>
 80097de:	00e8      	lsls	r0, r5, #3
 80097e0:	eba2 060b 	sub.w	r6, r2, fp
 80097e4:	9002      	str	r0, [sp, #8]
 80097e6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80097ea:	eb0a 0c0b 	add.w	ip, sl, fp
 80097ee:	ac1c      	add	r4, sp, #112	@ 0x70
 80097f0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80097f4:	2000      	movs	r0, #0
 80097f6:	4560      	cmp	r0, ip
 80097f8:	dd10      	ble.n	800981c <__kernel_rem_pio2f+0x74>
 80097fa:	a91c      	add	r1, sp, #112	@ 0x70
 80097fc:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8009800:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8009804:	2600      	movs	r6, #0
 8009806:	4556      	cmp	r6, sl
 8009808:	dc24      	bgt.n	8009854 <__kernel_rem_pio2f+0xac>
 800980a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800980e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8009aa0 <__kernel_rem_pio2f+0x2f8>
 8009812:	4684      	mov	ip, r0
 8009814:	2400      	movs	r4, #0
 8009816:	e016      	b.n	8009846 <__kernel_rem_pio2f+0x9e>
 8009818:	2200      	movs	r2, #0
 800981a:	e7dc      	b.n	80097d6 <__kernel_rem_pio2f+0x2e>
 800981c:	42c6      	cmn	r6, r0
 800981e:	bf5d      	ittte	pl
 8009820:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8009824:	ee07 1a90 	vmovpl	s15, r1
 8009828:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800982c:	eef0 7a47 	vmovmi.f32	s15, s14
 8009830:	ece4 7a01 	vstmia	r4!, {s15}
 8009834:	3001      	adds	r0, #1
 8009836:	e7de      	b.n	80097f6 <__kernel_rem_pio2f+0x4e>
 8009838:	ecfe 6a01 	vldmia	lr!, {s13}
 800983c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8009840:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009844:	3401      	adds	r4, #1
 8009846:	455c      	cmp	r4, fp
 8009848:	ddf6      	ble.n	8009838 <__kernel_rem_pio2f+0x90>
 800984a:	ece9 7a01 	vstmia	r9!, {s15}
 800984e:	3601      	adds	r6, #1
 8009850:	3004      	adds	r0, #4
 8009852:	e7d8      	b.n	8009806 <__kernel_rem_pio2f+0x5e>
 8009854:	a908      	add	r1, sp, #32
 8009856:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800985a:	9104      	str	r1, [sp, #16]
 800985c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800985e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8009a9c <__kernel_rem_pio2f+0x2f4>
 8009862:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8009a98 <__kernel_rem_pio2f+0x2f0>
 8009866:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800986a:	9203      	str	r2, [sp, #12]
 800986c:	4654      	mov	r4, sl
 800986e:	00a2      	lsls	r2, r4, #2
 8009870:	9205      	str	r2, [sp, #20]
 8009872:	aa58      	add	r2, sp, #352	@ 0x160
 8009874:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8009878:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800987c:	a944      	add	r1, sp, #272	@ 0x110
 800987e:	aa08      	add	r2, sp, #32
 8009880:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009884:	4694      	mov	ip, r2
 8009886:	4626      	mov	r6, r4
 8009888:	2e00      	cmp	r6, #0
 800988a:	dc4c      	bgt.n	8009926 <__kernel_rem_pio2f+0x17e>
 800988c:	4628      	mov	r0, r5
 800988e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009892:	f000 f9f1 	bl	8009c78 <scalbnf>
 8009896:	eeb0 8a40 	vmov.f32	s16, s0
 800989a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800989e:	ee28 0a00 	vmul.f32	s0, s16, s0
 80098a2:	f000 fa4f 	bl	8009d44 <floorf>
 80098a6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80098aa:	eea0 8a67 	vfms.f32	s16, s0, s15
 80098ae:	2d00      	cmp	r5, #0
 80098b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098b4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80098b8:	ee17 9a90 	vmov	r9, s15
 80098bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098c0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80098c4:	dd41      	ble.n	800994a <__kernel_rem_pio2f+0x1a2>
 80098c6:	f104 3cff 	add.w	ip, r4, #4294967295
 80098ca:	a908      	add	r1, sp, #32
 80098cc:	f1c5 0e08 	rsb	lr, r5, #8
 80098d0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80098d4:	fa46 f00e 	asr.w	r0, r6, lr
 80098d8:	4481      	add	r9, r0
 80098da:	fa00 f00e 	lsl.w	r0, r0, lr
 80098de:	1a36      	subs	r6, r6, r0
 80098e0:	f1c5 0007 	rsb	r0, r5, #7
 80098e4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80098e8:	4106      	asrs	r6, r0
 80098ea:	2e00      	cmp	r6, #0
 80098ec:	dd3c      	ble.n	8009968 <__kernel_rem_pio2f+0x1c0>
 80098ee:	f04f 0e00 	mov.w	lr, #0
 80098f2:	f109 0901 	add.w	r9, r9, #1
 80098f6:	4670      	mov	r0, lr
 80098f8:	4574      	cmp	r4, lr
 80098fa:	dc68      	bgt.n	80099ce <__kernel_rem_pio2f+0x226>
 80098fc:	2d00      	cmp	r5, #0
 80098fe:	dd03      	ble.n	8009908 <__kernel_rem_pio2f+0x160>
 8009900:	2d01      	cmp	r5, #1
 8009902:	d074      	beq.n	80099ee <__kernel_rem_pio2f+0x246>
 8009904:	2d02      	cmp	r5, #2
 8009906:	d07d      	beq.n	8009a04 <__kernel_rem_pio2f+0x25c>
 8009908:	2e02      	cmp	r6, #2
 800990a:	d12d      	bne.n	8009968 <__kernel_rem_pio2f+0x1c0>
 800990c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009910:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009914:	b340      	cbz	r0, 8009968 <__kernel_rem_pio2f+0x1c0>
 8009916:	4628      	mov	r0, r5
 8009918:	9306      	str	r3, [sp, #24]
 800991a:	f000 f9ad 	bl	8009c78 <scalbnf>
 800991e:	9b06      	ldr	r3, [sp, #24]
 8009920:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009924:	e020      	b.n	8009968 <__kernel_rem_pio2f+0x1c0>
 8009926:	ee60 7a28 	vmul.f32	s15, s0, s17
 800992a:	3e01      	subs	r6, #1
 800992c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009934:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009938:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800993c:	ecac 0a01 	vstmia	ip!, {s0}
 8009940:	ed30 0a01 	vldmdb	r0!, {s0}
 8009944:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009948:	e79e      	b.n	8009888 <__kernel_rem_pio2f+0xe0>
 800994a:	d105      	bne.n	8009958 <__kernel_rem_pio2f+0x1b0>
 800994c:	1e60      	subs	r0, r4, #1
 800994e:	a908      	add	r1, sp, #32
 8009950:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8009954:	11f6      	asrs	r6, r6, #7
 8009956:	e7c8      	b.n	80098ea <__kernel_rem_pio2f+0x142>
 8009958:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800995c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009964:	da31      	bge.n	80099ca <__kernel_rem_pio2f+0x222>
 8009966:	2600      	movs	r6, #0
 8009968:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800996c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009970:	f040 8098 	bne.w	8009aa4 <__kernel_rem_pio2f+0x2fc>
 8009974:	1e60      	subs	r0, r4, #1
 8009976:	2200      	movs	r2, #0
 8009978:	4550      	cmp	r0, sl
 800997a:	da4b      	bge.n	8009a14 <__kernel_rem_pio2f+0x26c>
 800997c:	2a00      	cmp	r2, #0
 800997e:	d065      	beq.n	8009a4c <__kernel_rem_pio2f+0x2a4>
 8009980:	3c01      	subs	r4, #1
 8009982:	ab08      	add	r3, sp, #32
 8009984:	3d08      	subs	r5, #8
 8009986:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0f8      	beq.n	8009980 <__kernel_rem_pio2f+0x1d8>
 800998e:	4628      	mov	r0, r5
 8009990:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009994:	f000 f970 	bl	8009c78 <scalbnf>
 8009998:	1c63      	adds	r3, r4, #1
 800999a:	aa44      	add	r2, sp, #272	@ 0x110
 800999c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8009a9c <__kernel_rem_pio2f+0x2f4>
 80099a0:	0099      	lsls	r1, r3, #2
 80099a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80099a6:	4623      	mov	r3, r4
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f280 80a9 	bge.w	8009b00 <__kernel_rem_pio2f+0x358>
 80099ae:	4623      	mov	r3, r4
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f2c0 80c7 	blt.w	8009b44 <__kernel_rem_pio2f+0x39c>
 80099b6:	aa44      	add	r2, sp, #272	@ 0x110
 80099b8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80099bc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8009a94 <__kernel_rem_pio2f+0x2ec>
 80099c0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8009aa0 <__kernel_rem_pio2f+0x2f8>
 80099c4:	2000      	movs	r0, #0
 80099c6:	1ae2      	subs	r2, r4, r3
 80099c8:	e0b1      	b.n	8009b2e <__kernel_rem_pio2f+0x386>
 80099ca:	2602      	movs	r6, #2
 80099cc:	e78f      	b.n	80098ee <__kernel_rem_pio2f+0x146>
 80099ce:	f852 1b04 	ldr.w	r1, [r2], #4
 80099d2:	b948      	cbnz	r0, 80099e8 <__kernel_rem_pio2f+0x240>
 80099d4:	b121      	cbz	r1, 80099e0 <__kernel_rem_pio2f+0x238>
 80099d6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80099da:	f842 1c04 	str.w	r1, [r2, #-4]
 80099de:	2101      	movs	r1, #1
 80099e0:	f10e 0e01 	add.w	lr, lr, #1
 80099e4:	4608      	mov	r0, r1
 80099e6:	e787      	b.n	80098f8 <__kernel_rem_pio2f+0x150>
 80099e8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80099ec:	e7f5      	b.n	80099da <__kernel_rem_pio2f+0x232>
 80099ee:	f104 3cff 	add.w	ip, r4, #4294967295
 80099f2:	aa08      	add	r2, sp, #32
 80099f4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80099f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80099fc:	a908      	add	r1, sp, #32
 80099fe:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8009a02:	e781      	b.n	8009908 <__kernel_rem_pio2f+0x160>
 8009a04:	f104 3cff 	add.w	ip, r4, #4294967295
 8009a08:	aa08      	add	r2, sp, #32
 8009a0a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8009a0e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009a12:	e7f3      	b.n	80099fc <__kernel_rem_pio2f+0x254>
 8009a14:	a908      	add	r1, sp, #32
 8009a16:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009a1a:	3801      	subs	r0, #1
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	e7ab      	b.n	8009978 <__kernel_rem_pio2f+0x1d0>
 8009a20:	3201      	adds	r2, #1
 8009a22:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8009a26:	2e00      	cmp	r6, #0
 8009a28:	d0fa      	beq.n	8009a20 <__kernel_rem_pio2f+0x278>
 8009a2a:	9905      	ldr	r1, [sp, #20]
 8009a2c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8009a30:	eb0d 0001 	add.w	r0, sp, r1
 8009a34:	18e6      	adds	r6, r4, r3
 8009a36:	a91c      	add	r1, sp, #112	@ 0x70
 8009a38:	f104 0c01 	add.w	ip, r4, #1
 8009a3c:	384c      	subs	r0, #76	@ 0x4c
 8009a3e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8009a42:	4422      	add	r2, r4
 8009a44:	4562      	cmp	r2, ip
 8009a46:	da04      	bge.n	8009a52 <__kernel_rem_pio2f+0x2aa>
 8009a48:	4614      	mov	r4, r2
 8009a4a:	e710      	b.n	800986e <__kernel_rem_pio2f+0xc6>
 8009a4c:	9804      	ldr	r0, [sp, #16]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	e7e7      	b.n	8009a22 <__kernel_rem_pio2f+0x27a>
 8009a52:	9903      	ldr	r1, [sp, #12]
 8009a54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009a58:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8009a5c:	9105      	str	r1, [sp, #20]
 8009a5e:	ee07 1a90 	vmov	s15, r1
 8009a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a66:	2400      	movs	r4, #0
 8009a68:	ece6 7a01 	vstmia	r6!, {s15}
 8009a6c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8009aa0 <__kernel_rem_pio2f+0x2f8>
 8009a70:	46b1      	mov	r9, r6
 8009a72:	455c      	cmp	r4, fp
 8009a74:	dd04      	ble.n	8009a80 <__kernel_rem_pio2f+0x2d8>
 8009a76:	ece0 7a01 	vstmia	r0!, {s15}
 8009a7a:	f10c 0c01 	add.w	ip, ip, #1
 8009a7e:	e7e1      	b.n	8009a44 <__kernel_rem_pio2f+0x29c>
 8009a80:	ecfe 6a01 	vldmia	lr!, {s13}
 8009a84:	ed39 7a01 	vldmdb	r9!, {s14}
 8009a88:	3401      	adds	r4, #1
 8009a8a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009a8e:	e7f0      	b.n	8009a72 <__kernel_rem_pio2f+0x2ca>
 8009a90:	0800a580 	.word	0x0800a580
 8009a94:	0800a554 	.word	0x0800a554
 8009a98:	43800000 	.word	0x43800000
 8009a9c:	3b800000 	.word	0x3b800000
 8009aa0:	00000000 	.word	0x00000000
 8009aa4:	9b02      	ldr	r3, [sp, #8]
 8009aa6:	eeb0 0a48 	vmov.f32	s0, s16
 8009aaa:	eba3 0008 	sub.w	r0, r3, r8
 8009aae:	f000 f8e3 	bl	8009c78 <scalbnf>
 8009ab2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8009a98 <__kernel_rem_pio2f+0x2f0>
 8009ab6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009abe:	db19      	blt.n	8009af4 <__kernel_rem_pio2f+0x34c>
 8009ac0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8009a9c <__kernel_rem_pio2f+0x2f4>
 8009ac4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009ac8:	aa08      	add	r2, sp, #32
 8009aca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ace:	3508      	adds	r5, #8
 8009ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ad4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009adc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009ae0:	ee10 3a10 	vmov	r3, s0
 8009ae4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009ae8:	ee17 3a90 	vmov	r3, s15
 8009aec:	3401      	adds	r4, #1
 8009aee:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009af2:	e74c      	b.n	800998e <__kernel_rem_pio2f+0x1e6>
 8009af4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009af8:	aa08      	add	r2, sp, #32
 8009afa:	ee10 3a10 	vmov	r3, s0
 8009afe:	e7f6      	b.n	8009aee <__kernel_rem_pio2f+0x346>
 8009b00:	a808      	add	r0, sp, #32
 8009b02:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009b06:	9001      	str	r0, [sp, #4]
 8009b08:	ee07 0a90 	vmov	s15, r0
 8009b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b10:	3b01      	subs	r3, #1
 8009b12:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009b16:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009b1a:	ed62 7a01 	vstmdb	r2!, {s15}
 8009b1e:	e743      	b.n	80099a8 <__kernel_rem_pio2f+0x200>
 8009b20:	ecfc 6a01 	vldmia	ip!, {s13}
 8009b24:	ecb5 7a01 	vldmia	r5!, {s14}
 8009b28:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	4550      	cmp	r0, sl
 8009b30:	dc01      	bgt.n	8009b36 <__kernel_rem_pio2f+0x38e>
 8009b32:	4290      	cmp	r0, r2
 8009b34:	ddf4      	ble.n	8009b20 <__kernel_rem_pio2f+0x378>
 8009b36:	a858      	add	r0, sp, #352	@ 0x160
 8009b38:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009b3c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8009b40:	3b01      	subs	r3, #1
 8009b42:	e735      	b.n	80099b0 <__kernel_rem_pio2f+0x208>
 8009b44:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	dc09      	bgt.n	8009b5e <__kernel_rem_pio2f+0x3b6>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	dc27      	bgt.n	8009b9e <__kernel_rem_pio2f+0x3f6>
 8009b4e:	d040      	beq.n	8009bd2 <__kernel_rem_pio2f+0x42a>
 8009b50:	f009 0007 	and.w	r0, r9, #7
 8009b54:	b059      	add	sp, #356	@ 0x164
 8009b56:	ecbd 8b04 	vpop	{d8-d9}
 8009b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009b60:	2b03      	cmp	r3, #3
 8009b62:	d1f5      	bne.n	8009b50 <__kernel_rem_pio2f+0x3a8>
 8009b64:	aa30      	add	r2, sp, #192	@ 0xc0
 8009b66:	1f0b      	subs	r3, r1, #4
 8009b68:	4413      	add	r3, r2
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	dc50      	bgt.n	8009c14 <__kernel_rem_pio2f+0x46c>
 8009b72:	4622      	mov	r2, r4
 8009b74:	2a01      	cmp	r2, #1
 8009b76:	dc5d      	bgt.n	8009c34 <__kernel_rem_pio2f+0x48c>
 8009b78:	ab30      	add	r3, sp, #192	@ 0xc0
 8009b7a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8009aa0 <__kernel_rem_pio2f+0x2f8>
 8009b7e:	440b      	add	r3, r1
 8009b80:	2c01      	cmp	r4, #1
 8009b82:	dc67      	bgt.n	8009c54 <__kernel_rem_pio2f+0x4ac>
 8009b84:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8009b88:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8009b8c:	2e00      	cmp	r6, #0
 8009b8e:	d167      	bne.n	8009c60 <__kernel_rem_pio2f+0x4b8>
 8009b90:	edc7 6a00 	vstr	s13, [r7]
 8009b94:	ed87 7a01 	vstr	s14, [r7, #4]
 8009b98:	edc7 7a02 	vstr	s15, [r7, #8]
 8009b9c:	e7d8      	b.n	8009b50 <__kernel_rem_pio2f+0x3a8>
 8009b9e:	ab30      	add	r3, sp, #192	@ 0xc0
 8009ba0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8009aa0 <__kernel_rem_pio2f+0x2f8>
 8009ba4:	440b      	add	r3, r1
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	2a00      	cmp	r2, #0
 8009baa:	da24      	bge.n	8009bf6 <__kernel_rem_pio2f+0x44e>
 8009bac:	b34e      	cbz	r6, 8009c02 <__kernel_rem_pio2f+0x45a>
 8009bae:	eef1 7a47 	vneg.f32	s15, s14
 8009bb2:	edc7 7a00 	vstr	s15, [r7]
 8009bb6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8009bba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009bbe:	aa31      	add	r2, sp, #196	@ 0xc4
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	429c      	cmp	r4, r3
 8009bc4:	da20      	bge.n	8009c08 <__kernel_rem_pio2f+0x460>
 8009bc6:	b10e      	cbz	r6, 8009bcc <__kernel_rem_pio2f+0x424>
 8009bc8:	eef1 7a67 	vneg.f32	s15, s15
 8009bcc:	edc7 7a01 	vstr	s15, [r7, #4]
 8009bd0:	e7be      	b.n	8009b50 <__kernel_rem_pio2f+0x3a8>
 8009bd2:	ab30      	add	r3, sp, #192	@ 0xc0
 8009bd4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8009aa0 <__kernel_rem_pio2f+0x2f8>
 8009bd8:	440b      	add	r3, r1
 8009bda:	2c00      	cmp	r4, #0
 8009bdc:	da05      	bge.n	8009bea <__kernel_rem_pio2f+0x442>
 8009bde:	b10e      	cbz	r6, 8009be4 <__kernel_rem_pio2f+0x43c>
 8009be0:	eef1 7a67 	vneg.f32	s15, s15
 8009be4:	edc7 7a00 	vstr	s15, [r7]
 8009be8:	e7b2      	b.n	8009b50 <__kernel_rem_pio2f+0x3a8>
 8009bea:	ed33 7a01 	vldmdb	r3!, {s14}
 8009bee:	3c01      	subs	r4, #1
 8009bf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009bf4:	e7f1      	b.n	8009bda <__kernel_rem_pio2f+0x432>
 8009bf6:	ed73 7a01 	vldmdb	r3!, {s15}
 8009bfa:	3a01      	subs	r2, #1
 8009bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c00:	e7d2      	b.n	8009ba8 <__kernel_rem_pio2f+0x400>
 8009c02:	eef0 7a47 	vmov.f32	s15, s14
 8009c06:	e7d4      	b.n	8009bb2 <__kernel_rem_pio2f+0x40a>
 8009c08:	ecb2 7a01 	vldmia	r2!, {s14}
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c12:	e7d6      	b.n	8009bc2 <__kernel_rem_pio2f+0x41a>
 8009c14:	ed72 7a01 	vldmdb	r2!, {s15}
 8009c18:	edd2 6a01 	vldr	s13, [r2, #4]
 8009c1c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009c20:	3801      	subs	r0, #1
 8009c22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c26:	ed82 7a00 	vstr	s14, [r2]
 8009c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c2e:	edc2 7a01 	vstr	s15, [r2, #4]
 8009c32:	e79c      	b.n	8009b6e <__kernel_rem_pio2f+0x3c6>
 8009c34:	ed73 7a01 	vldmdb	r3!, {s15}
 8009c38:	edd3 6a01 	vldr	s13, [r3, #4]
 8009c3c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009c40:	3a01      	subs	r2, #1
 8009c42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c46:	ed83 7a00 	vstr	s14, [r3]
 8009c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c4e:	edc3 7a01 	vstr	s15, [r3, #4]
 8009c52:	e78f      	b.n	8009b74 <__kernel_rem_pio2f+0x3cc>
 8009c54:	ed33 7a01 	vldmdb	r3!, {s14}
 8009c58:	3c01      	subs	r4, #1
 8009c5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c5e:	e78f      	b.n	8009b80 <__kernel_rem_pio2f+0x3d8>
 8009c60:	eef1 6a66 	vneg.f32	s13, s13
 8009c64:	eeb1 7a47 	vneg.f32	s14, s14
 8009c68:	edc7 6a00 	vstr	s13, [r7]
 8009c6c:	ed87 7a01 	vstr	s14, [r7, #4]
 8009c70:	eef1 7a67 	vneg.f32	s15, s15
 8009c74:	e790      	b.n	8009b98 <__kernel_rem_pio2f+0x3f0>
 8009c76:	bf00      	nop

08009c78 <scalbnf>:
 8009c78:	ee10 3a10 	vmov	r3, s0
 8009c7c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009c80:	d02b      	beq.n	8009cda <scalbnf+0x62>
 8009c82:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009c86:	d302      	bcc.n	8009c8e <scalbnf+0x16>
 8009c88:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c8c:	4770      	bx	lr
 8009c8e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009c92:	d123      	bne.n	8009cdc <scalbnf+0x64>
 8009c94:	4b24      	ldr	r3, [pc, #144]	@ (8009d28 <scalbnf+0xb0>)
 8009c96:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009d2c <scalbnf+0xb4>
 8009c9a:	4298      	cmp	r0, r3
 8009c9c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009ca0:	db17      	blt.n	8009cd2 <scalbnf+0x5a>
 8009ca2:	ee10 3a10 	vmov	r3, s0
 8009ca6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009caa:	3a19      	subs	r2, #25
 8009cac:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009cb0:	4288      	cmp	r0, r1
 8009cb2:	dd15      	ble.n	8009ce0 <scalbnf+0x68>
 8009cb4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009d30 <scalbnf+0xb8>
 8009cb8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009d34 <scalbnf+0xbc>
 8009cbc:	ee10 3a10 	vmov	r3, s0
 8009cc0:	eeb0 7a67 	vmov.f32	s14, s15
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bfb8      	it	lt
 8009cc8:	eef0 7a66 	vmovlt.f32	s15, s13
 8009ccc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009cd0:	4770      	bx	lr
 8009cd2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009d38 <scalbnf+0xc0>
 8009cd6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009cda:	4770      	bx	lr
 8009cdc:	0dd2      	lsrs	r2, r2, #23
 8009cde:	e7e5      	b.n	8009cac <scalbnf+0x34>
 8009ce0:	4410      	add	r0, r2
 8009ce2:	28fe      	cmp	r0, #254	@ 0xfe
 8009ce4:	dce6      	bgt.n	8009cb4 <scalbnf+0x3c>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	dd06      	ble.n	8009cf8 <scalbnf+0x80>
 8009cea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009cee:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009cf2:	ee00 3a10 	vmov	s0, r3
 8009cf6:	4770      	bx	lr
 8009cf8:	f110 0f16 	cmn.w	r0, #22
 8009cfc:	da09      	bge.n	8009d12 <scalbnf+0x9a>
 8009cfe:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009d38 <scalbnf+0xc0>
 8009d02:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009d3c <scalbnf+0xc4>
 8009d06:	ee10 3a10 	vmov	r3, s0
 8009d0a:	eeb0 7a67 	vmov.f32	s14, s15
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	e7d9      	b.n	8009cc6 <scalbnf+0x4e>
 8009d12:	3019      	adds	r0, #25
 8009d14:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009d18:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009d1c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009d40 <scalbnf+0xc8>
 8009d20:	ee07 3a90 	vmov	s15, r3
 8009d24:	e7d7      	b.n	8009cd6 <scalbnf+0x5e>
 8009d26:	bf00      	nop
 8009d28:	ffff3cb0 	.word	0xffff3cb0
 8009d2c:	4c000000 	.word	0x4c000000
 8009d30:	7149f2ca 	.word	0x7149f2ca
 8009d34:	f149f2ca 	.word	0xf149f2ca
 8009d38:	0da24260 	.word	0x0da24260
 8009d3c:	8da24260 	.word	0x8da24260
 8009d40:	33000000 	.word	0x33000000

08009d44 <floorf>:
 8009d44:	ee10 3a10 	vmov	r3, s0
 8009d48:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009d4c:	3a7f      	subs	r2, #127	@ 0x7f
 8009d4e:	2a16      	cmp	r2, #22
 8009d50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d54:	dc2b      	bgt.n	8009dae <floorf+0x6a>
 8009d56:	2a00      	cmp	r2, #0
 8009d58:	da12      	bge.n	8009d80 <floorf+0x3c>
 8009d5a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009dc0 <floorf+0x7c>
 8009d5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6a:	dd06      	ble.n	8009d7a <floorf+0x36>
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	da24      	bge.n	8009dba <floorf+0x76>
 8009d70:	2900      	cmp	r1, #0
 8009d72:	4b14      	ldr	r3, [pc, #80]	@ (8009dc4 <floorf+0x80>)
 8009d74:	bf08      	it	eq
 8009d76:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8009d7a:	ee00 3a10 	vmov	s0, r3
 8009d7e:	4770      	bx	lr
 8009d80:	4911      	ldr	r1, [pc, #68]	@ (8009dc8 <floorf+0x84>)
 8009d82:	4111      	asrs	r1, r2
 8009d84:	420b      	tst	r3, r1
 8009d86:	d0fa      	beq.n	8009d7e <floorf+0x3a>
 8009d88:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8009dc0 <floorf+0x7c>
 8009d8c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d90:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d98:	ddef      	ble.n	8009d7a <floorf+0x36>
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	bfbe      	ittt	lt
 8009d9e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8009da2:	fa40 f202 	asrlt.w	r2, r0, r2
 8009da6:	189b      	addlt	r3, r3, r2
 8009da8:	ea23 0301 	bic.w	r3, r3, r1
 8009dac:	e7e5      	b.n	8009d7a <floorf+0x36>
 8009dae:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009db2:	d3e4      	bcc.n	8009d7e <floorf+0x3a>
 8009db4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009db8:	4770      	bx	lr
 8009dba:	2300      	movs	r3, #0
 8009dbc:	e7dd      	b.n	8009d7a <floorf+0x36>
 8009dbe:	bf00      	nop
 8009dc0:	7149f2ca 	.word	0x7149f2ca
 8009dc4:	bf800000 	.word	0xbf800000
 8009dc8:	007fffff 	.word	0x007fffff

08009dcc <_init>:
 8009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dce:	bf00      	nop
 8009dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dd2:	bc08      	pop	{r3}
 8009dd4:	469e      	mov	lr, r3
 8009dd6:	4770      	bx	lr

08009dd8 <_fini>:
 8009dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dda:	bf00      	nop
 8009ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dde:	bc08      	pop	{r3}
 8009de0:	469e      	mov	lr, r3
 8009de2:	4770      	bx	lr
